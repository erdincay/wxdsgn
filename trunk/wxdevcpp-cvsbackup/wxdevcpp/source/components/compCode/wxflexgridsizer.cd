[MAININFO$]
CCVer=4.0
Compatible20=0
Compatible21=0
Compatible22=0
Compatible25=0
Compatible30=0
Compatible40=1
Lang=Pasc
UnitName=WXFlexGridSizer
LimitName=0
NewClassName=TWxFlexGridSizer
ParentClassName=TWxSizerPanel,IWxComponentInterface
VCLAncestorName=TPanel
DefaultPalette=Standard
CopyrightLine=Copyright © 2004 by Guru Kathiresan
TargetDir=e:\backup\delphi\demo\wxdevcpp\source\components\
FormMode=0
FormFile=
[UNITS$]
Lines=11
L1=WinTypes
L2=WinProcs
L3=Messages
L4=SysUtils
L5=Classes
L6=Controls
L7=Forms
L8=Graphics
L9=Extctrls
L10=WxUtils
L11=WxSizerPanel
[ITEMLIST$]
ColumnSpacing=Property
Columns=Property
Create=Method
Destroy=Method
FWx_PropertyList=Variable
GenerateControlIDs:String=Method
GenerateEventTableEntries=Method
GenerateGUIControlCreation:String=Method
GenerateGUIControlDeclaration:String=Method
GenerateHeaderInclude:String=Method
GetEventList:TStringlist=Method
GetIDName:String=Method
GetIDValue:LongInt=Method
GetParameterFromEventName=Method
GetPropertyList:TStringList=Method
GetTypeFromEventName=Method
GetWxClassName:String=Method
Loaded=Method
OnClick=ExistingEvent
OnDblClick=ExistingEvent
OnDragDrop=ExistingEvent
OnEnter=ExistingEvent
OnExit=ExistingEvent
OnKeyDown=ExistingEvent
OnKeyPress=ExistingEvent
OnKeyUp=ExistingEvent
OnMouseDown=ExistingEvent
OnMouseMove=ExistingEvent
OnMouseUp=ExistingEvent
OnResize=ExistingEvent
RowSpacing=Property
Rows=Property
SaveControlOrientation=Method
SetIDName=Method
SetIDValue=Method
SetWxClassName=Method
SpaceValue=Property
WMPaint=Method
Wx_Class=Property
Wx_ControlOrientation=Property
Wx_EventList=Property
Wx_HorizontalAlignment=Property
Wx_IDName=Property
Wx_IDValue=Property
Wx_VerticalAlignment=Property
maxHeightOfRow=Method
maxWidthOfColumn=Method
GenerateImageInclude:=Method
Wx_StretchFactor=Property
GetStretchFactor:Integer;=Method
SetStretchFactor=Method
[GLOBAL$]
Descr=
DefaultCode=1
Keywords=
[CODE$]
Lines=9
L1={
L2=*************IMPORTANT*************
L3=If you want to change any of the wxwidgets components,  you have to use comp screate by David Price.
L4=You can download a copy from
L5=
L6=http://torry.net/tools/components/compcreation/cc.zip
L7=
L8=***IF YOU FOLLOW THIS YOUR UPDATES WONT BE INCLUDED IN THE DISTRIBUTION****
L9=}
[HELP$]
Lines=0
[IMPGLOBAL$]
Descr=
DefaultCode=1
Keywords=
[IMPGLOBAL$CODE$]
Lines=0
[IMPGLOBAL$HELP$]
Lines=0
[ColumnSpacing]
Descr=
DefaultCode=6
Keywords=
IN=0
RO=0
PropType=Integer
PropDefault=0
Quote=0
RM=0
WM=0
VIRT=0
Hide=0
SP=0
DefEdit=1
All=0
EC=
EU=
Link=
[ColumnSpacingCODE$]
Lines=0
[ColumnSpacingHELP$]
Lines=0
[Columns]
Descr=
DefaultCode=6
Keywords=
IN=0
RO=0
PropType=Integer
PropDefault=2
Quote=0
RM=0
WM=0
VIRT=0
Hide=0
SP=0
DefEdit=1
All=0
EC=
EU=
Link=
[ColumnsCODE$]
Lines=0
[ColumnsHELP$]
Lines=0
[Create]
Descr=
DefaultCode=3
Keywords=
Kind=2
Header=Create(AOwner: TComponent)
S=0
Ov=1
Mode=2
WinMessage=
[CreateCODE$]
Lines=32
L1=begin
L2=~~~~~{ Call the Create method of the container's parent class       }
L3=~~~~~inherited Create(AOwner);
L4=
L5=~~~~~{ AutoInitialize sets the initial values of variables          }
L6=~~~~~{ (including subcomponent variables) and properties;           }
L7=~~~~~{ also, it creates objects for properties of standard          }
L8=~~~~~{ Delphi object types (e.g., TFont, TTimer, TPicture)          }
L9=~~~~~{ and for any variables marked as objects.                     }
L10=~~~~~{ AutoInitialize method is generated by Component Create.      }
L11=~~~~~AutoInitialize;
L12=
L13=~~~~~{ Code to perform other tasks when the container is created    }
L14=~~~~~FWx_PropertyList.add('wx_Class:Base Class');
L15=~~~~~FWx_PropertyList.add('Wx_IDName : IDName ');
L16=~~~~~FWx_PropertyList.add('Wx_IDValue : IDValue ');
L17=~~~~~FWx_PropertyList.add('Name : Name');
L18=~~~~~FWx_PropertyList.add('Left : Left');
L19=~~~~~FWx_PropertyList.add('Top : Top');
L20=~~~~~FWx_PropertyList.add('Width : Width');
L21=~~~~~FWx_PropertyList.add('Height:Height');
L22=~~~~~FWx_PropertyList.add('Orientation : Orientation');
L23=~~~~~FWx_PropertyList.add('SpaceValue : Border');
L24=~~~~~FWx_PropertyList.add('Rows : Rows');
L25=~~~~~FWx_PropertyList.add('Columns : Columns');
L26=~~~~~FWx_PropertyList.add('RowSpacing : RowSpacing');
L27=~~~~~FWx_PropertyList.add('ColumnSpacing : ColumnSpacing');
L28=
L29=~~~~~FWx_PropertyList.add('Wx_HorizontalAlignment : HorizontalAlignment');
L30=~~~~~FWx_PropertyList.add('Wx_VerticalAlignment   : VerticalAlignment');
L31=
L32=end;
[CreateHELP$]
Lines=0
[Destroy]
Descr=
DefaultCode=4
Keywords=
Kind=3
Header=Destroy
S=0
Ov=1
Mode=2
WinMessage=
[DestroyCODE$]
Lines=13
L1=begin
L2=~~~~~{ AutoDestroy, which is generated by Component Create, frees any   }
L3=~~~~~{ objects created by AutoInitialize.                               }
L4=~~~~~AutoDestroy;
L5=
L6=~~~~~{ Here, free any other dynamic objects that the component methods  }
L7=~~~~~{ created but have not yet freed.  Also perform any other clean-up }
L8=~~~~~{ operations needed before the component is destroyed.             }
L9=
L10=~~~~~{ Last, free the component by calling the Destroy method of the    }
L11=~~~~~{ parent class.                                                    }
L12=~~~~~inherited Destroy;
L13=end;
[DestroyHELP$]
Lines=0
[FWx_PropertyList]
Descr=
DefaultCode=17
Keywords=
DataType=TStringList
Default=
Quote=0
Sc=10
IsObject=1
IsSubComponent=0
[FWx_PropertyListCODE$]
Lines=0
[FWx_PropertyListHELP$]
Lines=0
[GenerateControlIDs:String]
Descr=
DefaultCode=0
Keywords=
Kind=1
Header=GenerateControlIDs:String
S=0
Ov=0
Mode=2
WinMessage=
[GenerateControlIDs:StringCODE$]
Lines=10
L1=~~~~~{ Internal declarations for method }
L2=~~~~~{ type }
L3=~~~~~{ . . . }
L4=~~~~~{ var }
L5=~~~~~{ . . . }
L6=begin
L7=~~~~~Result:='';
L8=~~~~~if (Wx_IDValue > 0) and (trim(Wx_IDName) <> '') then
L9=~~~~~~~~Result:=Format('#define %s %d ',[Wx_IDName,Wx_IDValue]);
L10=end;
[GenerateControlIDs:StringHELP$]
Lines=0
[GenerateEventTableEntries]
Descr=
DefaultCode=0
Keywords=
Kind=1
Header=GenerateEventTableEntries(CurrClassName:String):String
S=0
Ov=0
Mode=2
WinMessage=
[GenerateEventTableEntriesCODE$]
Lines=8
L1=~~~~~{ Internal declarations for method }
L2=~~~~~{ type }
L3=~~~~~{ . . . }
L4=~~~~~{ var }
L5=~~~~~{ . . . }
L6=begin
L7=~~~~~Result:='';
L8=end;
[GenerateEventTableEntriesHELP$]
Lines=0
[GenerateGUIControlCreation:String]
Descr=
DefaultCode=0
Keywords=
Kind=1
Header=GenerateGUIControlCreation:String
S=0
Ov=0
Mode=2
WinMessage=
[GenerateGUIControlCreation:StringCODE$]
Lines=25
L1=~~~~~{ Internal declarations for method }
L2=~~~~~{ type }
L3=~~~~~{ . . . }
L4=var
L5=~~~~~strStyle,strAlignment:String;
L6=begin
L7=
L8=~~~~Result:=Format('wxFlexGridSizer* %s = new wxFlexGridSizer(%d,%d,%d,%d);',[self.Name,self.rows,self.columns,self.rowSpacing,self.columnSpacing]);
L9=~~~~if self.Parent is TForm then
L10=~~~~begin
L11=~~~~~~~~~Result:=Result+#13+Format('this->SetSizer(%s);',[self.Name]);
L12=~~~~~~~~~Result:=Result+#13+'this->SetAutoLayout(TRUE);';
L13=~~~~end
L14=~~~~else
L15=~~~~begin
L16=~~~~~~~~strAlignment:=SizerAlignmentToStr(Wx_HorizontalAlignment) + ' | '+ SizerAlignmentToStr(Wx_VerticalAlignment) +' | wxALL';
L17=~~~~~~~~if wx_ControlOrientation = wxControlVertical then
L18=~~~~~~~~~~~~strAlignment:=SizerAlignmentToStr(Wx_HorizontalAlignment)+ ' | wxALL';
L19=
L20=~~~~~~~~~if wx_ControlOrientation = wxControlHorizontal then
L21=~~~~~~~~~~~~~strAlignment:=SizerAlignmentToStr(Wx_VerticalAlignment)+ ' | wxALL';
L22=
L23=~~~~~~~~~Result:=Result +#13+Format('%s->Add(%s,%d,%s,%d);',[self.Parent.Name,self.Name,0,strAlignment,self.SpaceValue]);
L24=~~~~end;
L25=end;
[GenerateGUIControlCreation:StringHELP$]
Lines=0
[GenerateGUIControlDeclaration:String]
Descr=
DefaultCode=0
Keywords=
Kind=1
Header=GenerateGUIControlDeclaration:String
S=0
Ov=0
Mode=2
WinMessage=
[GenerateGUIControlDeclaration:StringCODE$]
Lines=8
L1=~~~~~{ Internal declarations for method }
L2=~~~~~{ type }
L3=~~~~~{ . . . }
L4=~~~~~{ var }
L5=~~~~~{ . . . }
L6=begin
L7=~~~~~Result:=Format('%s *%s;',[trim(Self.Wx_Class),trim(Self.Name)]);
L8=end;
[GenerateGUIControlDeclaration:StringHELP$]
Lines=0
[GenerateHeaderInclude:String]
Descr=
DefaultCode=0
Keywords=
Kind=1
Header=GenerateHeaderInclude:String
S=0
Ov=0
Mode=2
WinMessage=
[GenerateHeaderInclude:StringCODE$]
Lines=8
L1=~~~~~{ Internal declarations for method }
L2=~~~~~{ type }
L3=~~~~~{ . . . }
L4=~~~~~{ var }
L5=~~~~~{ . . . }
L6=begin
L7=Result:='#include<wx/button.h>';
L8=end;
[GenerateHeaderInclude:StringHELP$]
Lines=0
[GetEventList:TStringlist]
Descr=
DefaultCode=0
Keywords=
Kind=1
Header=GetEventList:TStringlist
S=0
Ov=0
Mode=2
WinMessage=
[GetEventList:TStringlistCODE$]
Lines=8
L1=~~~~~{ Internal declarations for method }
L2=~~~~~{ type }
L3=~~~~~{ . . . }
L4=~~~~~{ var }
L5=~~~~~{ . . . }
L6=begin
L7=Result:=Wx_EventList;
L8=end;
[GetEventList:TStringlistHELP$]
Lines=0
[GetIDName:String]
Descr=
DefaultCode=0
Keywords=
Kind=1
Header=GetIDName:String
S=0
Ov=0
Mode=2
WinMessage=
[GetIDName:StringCODE$]
Lines=8
L1=~~~~~{ Internal declarations for method }
L2=~~~~~{ type }
L3=~~~~~{ . . . }
L4=~~~~~{ var }
L5=~~~~~{ . . . }
L6=begin
L7=Result:=wx_IDName;
L8=end;
[GetIDName:StringHELP$]
Lines=0
[GetIDValue:LongInt]
Descr=
DefaultCode=0
Keywords=
Kind=1
Header=GetIDValue:LongInt
S=0
Ov=0
Mode=2
WinMessage=
[GetIDValue:LongIntCODE$]
Lines=8
L1=~~~~~{ Internal declarations for method }
L2=~~~~~{ type }
L3=~~~~~{ . . . }
L4=~~~~~{ var }
L5=~~~~~{ . . . }
L6=begin
L7=Result:=wx_IDValue;
L8=end;
[GetIDValue:LongIntHELP$]
Lines=0
[GetParameterFromEventName]
Descr=
DefaultCode=0
Keywords=
Kind=1
Header=GetParameterFromEventName(EventName: string):String
S=0
Ov=0
Mode=2
WinMessage=
[GetParameterFromEventNameCODE$]
Lines=18
L1=~~~~~{ Internal declarations for method }
L2=~~~~~{ type }
L3=~~~~~{ . . . }
L4=~~~~~{ var }
L5=~~~~~{ . . . }
L6=begin
L7=if EventName = 'EVT_BUTTON' then
L8=begin
L9=~Result:='wxCommandEvent& event';
L10=~exit;
L11=end;
L12=if EventName = 'EVT_UPDATE_UI' then
L13=begin
L14=~Result:='wxUpdateUIEvent& event';
L15=~exit;
L16=end;
L17=
L18=end;
[GetParameterFromEventNameHELP$]
Lines=0
[GetPropertyList:TStringList]
Descr=
DefaultCode=0
Keywords=
Kind=1
Header=GetPropertyList:TStringList
S=0
Ov=0
Mode=2
WinMessage=
[GetPropertyList:TStringListCODE$]
Lines=8
L1=~~~~~{ Internal declarations for method }
L2=~~~~~{ type }
L3=~~~~~{ . . . }
L4=~~~~~{ var }
L5=~~~~~{ . . . }
L6=begin
L7=~~~~~Result:=FWx_PropertyList;
L8=end;
[GetPropertyList:TStringListHELP$]
Lines=0
[GetTypeFromEventName]
Descr=
DefaultCode=0
Keywords=
Kind=1
Header=GetTypeFromEventName(EventName: string):string
S=0
Ov=0
Mode=2
WinMessage=
[GetTypeFromEventNameCODE$]
Lines=8
L1=~~~~~{ Internal declarations for method }
L2=~~~~~{ type }
L3=~~~~~{ . . . }
L4=~~~~~{ var }
L5=~~~~~{ . . . }
L6=begin
L7=
L8=end;
[GetTypeFromEventNameHELP$]
Lines=0
[GetWxClassName:String]
Descr=
DefaultCode=0
Keywords=
Kind=1
Header=GetWxClassName:String
S=0
Ov=0
Mode=2
WinMessage=
[GetWxClassName:StringCODE$]
Lines=8
L1=~~~~~{ Internal declarations for method }
L2=~~~~~{ type }
L3=~~~~~{ . . . }
L4=~~~~~{ var }
L5=~~~~~{ . . . }
L6=begin
L7=Result:=wx_Class;
L8=end;
[GetWxClassName:StringHELP$]
Lines=0
[Loaded]
Descr=
DefaultCode=20
Keywords=
Kind=0
Header=Loaded
S=1
Ov=1
Mode=2
WinMessage=
[LoadedCODE$]
Lines=7
L1=begin
L2=~~~~~inherited Loaded;
L3=
L4=~~~~~{ Perform any component setup that depends on the property
L5=~~~~~~~values having been set }
L6=
L7=end;
[LoadedHELP$]
Lines=0
[OnClick]
Descr=
DefaultCode=7
Keywords=
Ov=1
P=1
HandlerDecl=Click
[OnClickCODE$]
Lines=11
L1=begin
L2=~~~~~{ Code to execute before activating click
L3=~~~~~~~behavior of component's parent class }
L4=
L5=~~~~~{ Activate click behavior of parent }
L6=~~~~~inherited Click;
L7=
L8=~~~~~{ Code to execute after click behavior
L9=~~~~~~~of parent }
L10=
L11=end;
[OnClickHELP$]
Lines=0
[OnDblClick]
Descr=
DefaultCode=8
Keywords=
Ov=0
P=1
HandlerDecl=DblClick
[OnDblClickCODE$]
Lines=0
[OnDblClickHELP$]
Lines=0
[OnDragDrop]
Descr=
DefaultCode=13
Keywords=
Ov=0
P=1
HandlerDecl=DragDrop(DragObject: TObject; X, Y: Integer)
[OnDragDropCODE$]
Lines=0
[OnDragDropHELP$]
Lines=0
[OnEnter]
Descr=
DefaultCode=13
Keywords=
Ov=0
P=1
HandlerDecl=DoEnter
[OnEnterCODE$]
Lines=0
[OnEnterHELP$]
Lines=0
[OnExit]
Descr=
DefaultCode=13
Keywords=
Ov=0
P=1
HandlerDecl=DoExit
[OnExitCODE$]
Lines=0
[OnExitHELP$]
Lines=0
[OnKeyDown]
Descr=
DefaultCode=10
Keywords=
Ov=0
P=1
HandlerDecl=KeyDown(var Key: Word; Shift: TShiftState)
[OnKeyDownCODE$]
Lines=0
[OnKeyDownHELP$]
Lines=0
[OnKeyPress]
Descr=
DefaultCode=9
Keywords=
Ov=1
P=1
HandlerDecl=KeyPress(var Key : Char)
[OnKeyPressCODE$]
Lines=16
L1=const
L2=~~~~~TabKey = Char(VK_TAB);
L3=~~~~~EnterKey = Char(VK_RETURN);
L4=begin
L5=~~~~~{ Key contains the character produced by the keypress.
L6=~~~~~~~It can be tested or assigned a new value before the
L7=~~~~~~~call to the inherited KeyPress method.  Setting Key
L8=~~~~~~~to #0 before call to the inherited KeyPress method
L9=~~~~~~~terminates any further processing of the character. }
L10=
L11=~~~~~{ Activate KeyPress behavior of parent }
L12=~~~~~inherited KeyPress(Key);
L13=
L14=~~~~~{ Code to execute after KeyPress behavior of parent }
L15=
L16=end;
[OnKeyPressHELP$]
Lines=0
[OnKeyUp]
Descr=
DefaultCode=13
Keywords=
Ov=0
P=1
HandlerDecl=KeyUp(var Key: Word; Shift: TShiftState)
[OnKeyUpCODE$]
Lines=0
[OnKeyUpHELP$]
Lines=0
[OnMouseDown]
Descr=
DefaultCode=13
Keywords=
Ov=0
P=1
HandlerDecl=MouseDown(Button: TMouseButton; Shift: TShiftState; X, Y: Integer)
[OnMouseDownCODE$]
Lines=0
[OnMouseDownHELP$]
Lines=0
[OnMouseMove]
Descr=
DefaultCode=13
Keywords=
Ov=0
P=1
HandlerDecl=MouseMove(Shift: TShiftState; X, Y: Integer)
[OnMouseMoveCODE$]
Lines=0
[OnMouseMoveHELP$]
Lines=0
[OnMouseUp]
Descr=
DefaultCode=13
Keywords=
Ov=0
P=1
HandlerDecl=MouseUp(Button: TMouseButton; Shift: TShiftState; X, Y: Integer)
[OnMouseUpCODE$]
Lines=0
[OnMouseUpHELP$]
Lines=0
[OnResize]
Descr=
DefaultCode=11
Keywords=
Ov=1
P=1
HandlerDecl=Resize
[OnResizeCODE$]
Lines=8
L1=begin
L2=~~~~~{ Parent's Resize method }
L3=~~~~~inherited Resize;
L4=
L5=~~~~~{ Code to perform other actions (e.g., resizing any sub-
L6=~~~~~~~components) needed in response to change in size of this
L7=~~~~~~~component }
L8=end;
[OnResizeHELP$]
Lines=0
[RowSpacing]
Descr=
DefaultCode=6
Keywords=
IN=0
RO=0
PropType=Integer
PropDefault=0
Quote=0
RM=0
WM=0
VIRT=0
Hide=0
SP=0
DefEdit=1
All=0
EC=
EU=
Link=
[RowSpacingCODE$]
Lines=0
[RowSpacingHELP$]
Lines=0
[Rows]
Descr=
DefaultCode=6
Keywords=
IN=0
RO=0
PropType=Integer
PropDefault=2
Quote=0
RM=0
WM=0
VIRT=0
Hide=0
SP=0
DefEdit=1
All=0
EC=
EU=
Link=
[RowsCODE$]
Lines=0
[RowsHELP$]
Lines=0
[SaveControlOrientation]
Descr=
DefaultCode=0
Keywords=
Kind=0
Header=SaveControlOrientation(ControlOrientation:TWxControlOrientation)
S=0
Ov=0
Mode=2
WinMessage=
[SaveControlOrientationCODE$]
Lines=8
L1=~~~~~{ Internal declarations for method }
L2=~~~~~{ type }
L3=~~~~~{ . . . }
L4=~~~~~{ var }
L5=~~~~~{ . . . }
L6=begin
L7=wx_ControlOrientation:=ControlOrientation;
L8=end;
[SaveControlOrientationHELP$]
Lines=0
[SetIDName]
Descr=
DefaultCode=0
Keywords=
Kind=0
Header=SetIDName(IDName:String)
S=0
Ov=0
Mode=2
WinMessage=
[SetIDNameCODE$]
Lines=8
L1=~~~~~{ Internal declarations for method }
L2=~~~~~{ type }
L3=~~~~~{ . . . }
L4=~~~~~{ var }
L5=~~~~~{ . . . }
L6=begin
L7=wx_IDName:=IDName;
L8=end;
[SetIDNameHELP$]
Lines=0
[SetIDValue]
Descr=
DefaultCode=0
Keywords=
Kind=0
Header=SetIDValue(IDValue:longInt)
S=0
Ov=0
Mode=2
WinMessage=
[SetIDValueCODE$]
Lines=8
L1=~~~~~{ Internal declarations for method }
L2=~~~~~{ type }
L3=~~~~~{ . . . }
L4=~~~~~{ var }
L5=~~~~~{ . . . }
L6=begin
L7=Wx_IDValue:=IDVAlue;
L8=end;
[SetIDValueHELP$]
Lines=0
[SetWxClassName]
Descr=
DefaultCode=0
Keywords=
Kind=0
Header=SetWxClassName(wxClassName:String)
S=0
Ov=0
Mode=2
WinMessage=
[SetWxClassNameCODE$]
Lines=8
L1=~~~~~{ Internal declarations for method }
L2=~~~~~{ type }
L3=~~~~~{ . . . }
L4=~~~~~{ var }
L5=~~~~~{ . . . }
L6=begin
L7=wx_Class:=wxClassName;
L8=end;
[SetWxClassNameHELP$]
Lines=0
[SpaceValue]
Descr=
DefaultCode=6
Keywords=
IN=0
RO=0
PropType=Integer
PropDefault=5
Quote=0
RM=0
WM=0
VIRT=0
Hide=0
SP=0
DefEdit=1
All=0
EC=
EU=
Link=
[SpaceValueCODE$]
Lines=0
[SpaceValueHELP$]
Lines=0
[WMPaint]
Descr=
DefaultCode=0
Keywords=
Kind=0
Header=WMPaint(var Message: TWMPaint)
S=0
Ov=0
Mode=2
WinMessage=WM_PAINT
[WMPaintCODE$]
Lines=148
L1=var
L2=~~~~maxWidth,maxHt:Integer;
L3=~~~~totalmaxWidth,totalmaxHt,tmpHtofRow,tmpTotalWt,tmpWtofCol:Integer;
L4=~~~~orimaxWidth,orimaxHt:Integer;
L5=~~~~startX,nextX:Integer;
L6=~~~~i,j,k:Integer;
L7=~~~~TotalControlCount:Integer;
L8=~~~~coordTop,coordLeft:Integer;
L9=~~~~intAlignment:Integer;
L10=~~~~oriRows:Integer;
L11=~~~~rowCount,colCount:Integer;
L12=~~~~intTemp:Integer;
L13=~~~~wxcompInterface: IWxComponentInterface;
L14=begin
L15=~~~~intAlignment:=1;
L16=~~~~~{ Make this component look like its parent component by calling
L17=~~~~~~~its parent's Paint method. }
L18=
L19=
L20=~~~~~self.Caption:='';
L21=
L22=~~~~~maxWidth:=-1;
L23=~~~~~maxHt:=-1;
L24=
L25=~~~~~totalmaxWidth:=0;
L26=~~~~~totalmaxHt:=0;
L27=
L28=~~~~~maxHt:=2*self.FSpaceValue;
L29=
L30=~~~~oriRows:=self.ControlCount div self.Columns;
L31=~~~~if oriRows * self.Columns < self.ControlCount then
L32=~~~~~~~~oriRows:=oriRows+1;
L33=
L34=
L35=~~~~for i := 0 to self.ControlCount - 1 do
L36=~~~~begin
L37=~~~~~~~~//Calculate the total size for all childens
L38=~~~~~~~~totalmaxWidth:=totalmaxWidth+self.Controls[i].Width+ 2* self.FSpaceValue;
L39=~~~~~~~~totalmaxHt:=totalmaxHt+self.Controls[i].Height+2* self.FSpaceValue;
L40=
L41=~~~~~~~~if self.Controls[i].Width > maxWidth then
L42=~~~~~~~~begin
L43=~~~~~~~~~~~~maxWidth:=self.Controls[i].Width;
L44=~~~~~~~~end;
L45=
L46=~~~~~~~~if self.Controls[i].Height > maxHt then
L47=~~~~~~~~begin
L48=~~~~~~~~~~~~maxHt:=self.Controls[i].Height;
L49=~~~~~~~~end;
L50=~~~~~~if self.Controls[i].GetInterface(IID_IWxComponentInterface,wxcompInterface) then
L51=~~~~~~~~wxcompInterface.SaveControlOrientation(wxControlNone);
L52=
L53=~~~~end;
L54=
L55=~~~~intTemp:=totalmaxHt;
L56=~~~~totalmaxHt:=0;
L57=~~~~for i := 0 to oriRows - 1 do
L58=~~~~begin
L59=~~~~~~~~tmpHtofRow:=maxHeightOfRow(i);
L60=~~~~~~~~totalmaxHt:=totalmaxHt+tmpHtofRow+(2* self.FSpaceValue);
L61=~~~~end;
L62=
L63=~~~~tmpTotalWt:=0;
L64=~~~~for i := 0 to columns - 1 do
L65=~~~~begin
L66=~~~~~~~~tmpWtofCol:=maxWidthOfColumn(i,oriRows);
L67=~~~~~~~~tmpTotalWt:=tmpTotalWt+tmpWtofCol+(2* self.FSpaceValue);
L68=~~~~end;
L69=
L70=~~~~if self.Parent is TForm then
L71=~~~~begin
L72=~~~~~~~~if (totalmaxWidth < 100) then
L73=~~~~~~~~~~~~self.Parent.ClientWidth:=100
L74=~~~~~~~~else
L75=~~~~~~~~~~~~self.Parent.ClientWidth:=tmpTotalWt;//self.Columns * (maxWidth+2* self.FSpaceValue);
L76=
L77=~~~~~~~~if (totalmaxht < 45)then
L78=~~~~~~~~~~~~self.Parent.ClientHeight:=35
L79=~~~~~~~~else
L80=~~~~~~~~~~~~self.Parent.ClientHeight:=totalmaxHt;//OriRows * (maxHt+2* self.FSpaceValue);
L81=
L82=~~~~~~~~self.Align:=alClient;
L83=~~~~end
L84=~~~~else
L85=~~~~begin
L86=~~~~~~~~self.Align:=alNone;
L87=
L88=~~~~~~~~if (totalmaxWidth < 4*self.FSpaceValue) then
L89=~~~~~~~~~~~~self.Width:=4*self.FSpaceValue
L90=~~~~~~~~else
L91=~~~~~~~~~~~~self.Width:=tmpTotalWt;//self.Columns * (maxWidth+2* self.FSpaceValue);
L92=
L93=~~~~~~~~if (totalmaxht < 4*self.FSpaceValue)then
L94=~~~~~~~~~~~~self.Height:=4*self.FSpaceValue
L95=~~~~~~~~else
L96=~~~~~~~~~~~~self.Height:=totalmaxHt; //OriRows * (maxHt+2* self.FSpaceValue);
L97=
L98=~~~~end;
L99=
L100=~startX:=FSpaceValue;
L101=~rowCount:=0;
L102=~colCount:=0;
L103=
L104=~~~~for i := 0 to self.ControlCount - 1 do
L105=~~~~begin
L106=~~~~~~~~maxHt:=maxHeightOfRow(RowCount);
L107=~~~~~~~~maxWidth:=maxWidthOfColumn(colCount,oriRows);
L108=
L109=~~~~~~~~intTemp:=0;
L110=~~~~~~~~for k := 0 to rowCount - 1 do
L111=~~~~~~~~begin
L112=~~~~~~~~~~~~intTemp:=intTemp+maxHeightOfRow(k);
L113=~~~~~~~~end;
L114=
L115=~~~~~~~~tmpWtofCol:=0;
L116=~~~~~~~~for k := 0 to ColCount - 1 do
L117=~~~~~~~~begin
L118=~~~~~~~~~~~~tmpWtofCol:=tmpWtofCol+maxWidthOfColumn(k,oriRows);
L119=~~~~~~~~end;
L120=
L121=~~~~~~~~//sendDebug('Ht = '+IntToStr(maxHt));
L122=
L123=~~~~~~~~if intAlignment =0 then
L124=~~~~~~~~begin
L125=~~~~~~~~~~~~self.Controls[i].Top:=(FSpaceValue * (2*(rowCount+1) -1) ) + maxHt * rowCount;
L126=~~~~~~~~~~~~self.Controls[i].left:=(FSpaceValue* (2*(colCount+1) -1) ) + maxWidth *  colCount;
L127=~~~~~~~~end;
L128=
L129=~~~~~~~~if intAlignment =1 then
L130=~~~~~~~~begin
L131=~~~~~~~~~~~~coordLeft:=(maxWidth - self.Controls[i].Width) div 2;
L132=~~~~~~~~~~~~coordTop:=(maxHt - self.Controls[i].Height) div 2;
L133=
L134=~~~~~~~~~~~~self.Controls[i].Top:= (FSpaceValue * (2*(rowCount+1) -1) ) +  intTemp + coordTop;
L135=~~~~~~~~~~~~self.Controls[i].left:= (FSpaceValue* (2*(colCount+1) -1) ) +  tmpWtofCol + coordLeft;
L136=~~~~~~~~end;
L137=
L138=~~~~~~~~inc(ColCount);
L139=~~~~~~~~if ColCount+1 > Columns then
L140=~~~~~~~~begin
L141=~~~~~~~~~~~~ColCount:=0;
L142=~~~~~~~~~~~~inc(RowCount);
L143=~~~~~~~~end;
L144=~~~~end;
L145=
L146=~~~~inherited;
L147=
L148=end;
[WMPaintHELP$]
Lines=0
[Wx_Class]
Descr=
DefaultCode=6
Keywords=
IN=0
RO=0
PropType=String
PropDefault='wxFlexGridSizer'
Quote=1
RM=0
WM=0
VIRT=0
Hide=0
SP=0
DefEdit=1
All=0
EC=
EU=
Link=
[Wx_ClassCODE$]
Lines=0
[Wx_ClassHELP$]
Lines=0
[Wx_ControlOrientation]
Descr=
DefaultCode=6
Keywords=
IN=0
RO=0
PropType=TWxControlOrientation
PropDefault=
Quote=0
RM=0
WM=0
VIRT=0
Hide=0
SP=0
DefEdit=1
All=0
EC=
EU=
Link=
[Wx_ControlOrientationCODE$]
Lines=0
[Wx_ControlOrientationHELP$]
Lines=0
[Wx_EventList]
Descr=
DefaultCode=6
Keywords=
IN=0
RO=0
PropType=TStringList
PropDefault=
Quote=0
RM=0
WM=1
VIRT=0
Hide=0
SP=2
DefEdit=1
All=0
EC=
EU=
Link=
[Wx_EventListCODE$]
Lines=10
L1=begin
L2=~~~~~{ Use Assign method because TStringList is an object type
L3=~~~~~~~and FWx_EventList has been created. }
L4=~~~~~FWx_EventList.Assign(Value);
L5=
L6=~~~~~{ If changing this property affects the appearance of
L7=~~~~~~~the component, call Invalidate here so the image will be
L8=~~~~~~~updated. }
L9=~~~~~{ Invalidate; }
L10=end;
[Wx_EventListHELP$]
Lines=0
[Wx_HorizontalAlignment]
Descr=
DefaultCode=6
Keywords=
IN=0
RO=0
PropType=TWxSizerHorizontalAlignment
PropDefault=wxSZALIGN_CENTER_HORIZONTAL
Quote=0
RM=0
WM=0
VIRT=0
Hide=0
SP=0
DefEdit=1
All=0
EC=
EU=
Link=
[Wx_HorizontalAlignmentCODE$]
Lines=0
[Wx_HorizontalAlignmentHELP$]
Lines=0
[Wx_IDName]
Descr=
DefaultCode=6
Keywords=
IN=0
RO=0
PropType=String
PropDefault=
Quote=0
RM=0
WM=0
VIRT=0
Hide=0
SP=0
DefEdit=1
All=0
EC=
EU=
Link=
[Wx_IDNameCODE$]
Lines=0
[Wx_IDNameHELP$]
Lines=0
[Wx_IDValue]
Descr=
DefaultCode=6
Keywords=
IN=0
RO=0
PropType=Integer
PropDefault=-1
Quote=0
RM=0
WM=0
VIRT=0
Hide=0
SP=0
DefEdit=1
All=0
EC=
EU=
Link=
[Wx_IDValueCODE$]
Lines=0
[Wx_IDValueHELP$]
Lines=0
[Wx_VerticalAlignment]
Descr=
DefaultCode=6
Keywords=
IN=0
RO=0
PropType=TWxSizerVerticalAlignment
PropDefault=wxSZALIGN_CENTER_VERTICAL
Quote=0
RM=0
WM=0
VIRT=0
Hide=0
SP=0
DefEdit=1
All=0
EC=
EU=
Link=
[Wx_VerticalAlignmentCODE$]
Lines=0
[Wx_VerticalAlignmentHELP$]
Lines=0
[maxHeightOfRow]
Descr=
DefaultCode=0
Keywords=
Kind=1
Header=maxHeightOfRow(rowIndex:Integer):Integer
S=0
Ov=0
Mode=2
WinMessage=
[maxHeightOfRowCODE$]
Lines=20
L1=~~~~~{ Internal declarations for method }
L2=~~~~~{ type }
L3=~~~~~{ . . . }
L4=var
L5=~~~~startItem,endItem,i:Integer;
L6=begin
L7=~~~~startItem:=rowIndex * columns;
L8=~~~~endItem:=rowIndex *columns + columns -1;
L9=~~~~result:=0;
L10=~~~~for i := 0 to self.ControlCount - 1 do
L11=~~~~begin
L12=~~~~~~~~~//sendDebug('name = '+ self.Controls[i].name +' ht = '+IntToStr(self.Controls[i].Height)+' i = '+IntToStr(i) + ' Start = '+IntToStr(startItem) + '  End = '+IntToStr(endItem));
L13=~~~~~~~~~if (i >= startItem) and (i <= endItem) then
L14=~~~~~~~~~begin
L15=~~~~~~~~~~~~~~if result < self.Controls[i].Height then
L16=~~~~~~~~~~~~~~~~~result := self.Controls[i].Height;
L17=~~~~~~~~~end;
L18=
L19=~~~~end;
L20=end;
[maxHeightOfRowHELP$]
Lines=0
[maxWidthOfColumn]
Descr=
DefaultCode=0
Keywords=
Kind=1
Header=maxWidthOfColumn(colIndex,totalRows:Integer):Integer
S=0
Ov=0
Mode=2
WinMessage=
[maxWidthOfColumnCODE$]
Lines=19
L1=var
L2=~~~~startItem,i:Integer;
L3=begin
L4=~~~~result:=0;
L5=~~~~for i := 0 to self.ControlCount - 1 do
L6=~~~~begin
L7=~~~~~~~~startItem:=(i mod columns);
L8=~~~~~~~~//if not((colIndex = 0) and (i = 0) ) then
L9=~~~~~~~~~~~~//startItem:=1;
L10=
L11=~~~~~~~~~if startItem = colIndex then
L12=~~~~~~~~~begin
L13=~~~~~~~~~~~~~~if result < self.Controls[i].Width then
L14=~~~~~~~~~~~~~~~~~result := self.Controls[i].Width;
L15=~~~~~~~~~end;
L16=
L17=~~~~end;
L18=end;
L19=
[maxWidthOfColumnHELP$]
Lines=0
[GenerateImageInclude:]
Descr=
DefaultCode=0
Keywords=
Kind=1
Header=GenerateImageInclude: string
S=0
Ov=0
Mode=2
WinMessage=
[GenerateImageInclude:CODE$]
Lines=0
[GenerateImageInclude:HELP$]
Lines=0
[Wx_StretchFactor]
Descr=
DefaultCode=6
Keywords=
IN=0
RO=0
PropType=Integer
PropDefault=0
Quote=0
RM=0
WM=0
VIRT=0
Hide=0
SP=0
DefEdit=1
All=0
EC=
EU=
Link=
[Wx_StretchFactorCODE$]
Lines=0
[Wx_StretchFactorHELP$]
Lines=0
[GetStretchFactor:Integer;]
Descr=
DefaultCode=0
Keywords=
Kind=1
Header=GetStretchFactor:Integer;
S=0
Ov=0
Mode=2
WinMessage=
[GetStretchFactor:Integer;CODE$]
Lines=0
[GetStretchFactor:Integer;HELP$]
Lines=0
[SetStretchFactor]
Descr=
DefaultCode=0
Keywords=
Kind=0
Header=SetStretchFactor(intValue:Integer);
S=0
Ov=0
Mode=2
WinMessage=
[SetStretchFactorCODE$]
Lines=0
[SetStretchFactorHELP$]
Lines=0
