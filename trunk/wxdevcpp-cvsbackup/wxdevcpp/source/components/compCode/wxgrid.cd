[MAININFO$]
CCVer=4.0
Compatible20=0
Compatible21=0
Compatible22=0
Compatible25=0
Compatible30=0
Compatible40=1
Lang=Pasc
UnitName=WxGrid
LimitName=1
NewClassName=TWxGrid
ParentClassName=TStringGrid
VCLAncestorName=TStringGrid
DefaultPalette=wxWidgets
CopyrightLine=Copyright © 2004 by Guru Kathiresan
TargetDir=e:\backup\delphi\demo\wxdevcpp\source\components\
FormMode=0
FormFile=
[UNITS$]
Lines=9
L1=WinTypes
L2=WinProcs
L3=Messages
L4=SysUtils
L5=Classes
L6=Controls
L7=Forms
L8=Graphics
L9=Grids
[ITEMLIST$]
Create=Method
Destroy=Method
FWx_EventList=Variable
FWx_PropertyList=Variable
Loaded=Method
OnClick=ExistingEvent
OnDblClick=ExistingEvent
OnDragDrop=ExistingEvent
OnDrawCell=ExistingEvent
OnEnter=ExistingEvent
OnExit=ExistingEvent
OnKeyDown=ExistingEvent
OnKeyPress=ExistingEvent
OnKeyUp=ExistingEvent
OnMouseDown=ExistingEvent
OnMouseMove=ExistingEvent
OnMouseUp=ExistingEvent
Paint=Method
[GLOBAL$]
Descr=
DefaultCode=1
Keywords=
[CODE$]
Lines=0
[HELP$]
Lines=0
[IMPGLOBAL$]
Descr=
DefaultCode=1
Keywords=
[IMPGLOBAL$CODE$]
Lines=0
[IMPGLOBAL$HELP$]
Lines=0
[Create]
Descr=
DefaultCode=2
Keywords=
Kind=2
Header=Create(AOwner: TComponent)
S=0
Ov=1
Mode=2
WinMessage=
[CreateCODE$]
Lines=14
L1=begin
L2=~~~~~{ Call the Create method of the parent class }
L3=~~~~~inherited Create(AOwner);
L4=
L5=~~~~~{ AutoInitialize sets the initial values of variables and      }
L6=~~~~~{ properties; also, it creates objects for properties of       }
L7=~~~~~{ standard Delphi object types (e.g., TFont, TTimer,           }
L8=~~~~~{ TPicture) and for any variables marked as objects.           }
L9=~~~~~{ AutoInitialize method is generated by Component Create.      }
L10=~~~~~AutoInitialize;
L11=
L12=~~~~~{ Code to perform other tasks when the component is created }
L13=
L14=end;
[CreateHELP$]
Lines=0
[Destroy]
Descr=
DefaultCode=4
Keywords=
Kind=3
Header=Destroy
S=0
Ov=1
Mode=2
WinMessage=
[DestroyCODE$]
Lines=13
L1=begin
L2=~~~~~{ AutoDestroy, which is generated by Component Create, frees any   }
L3=~~~~~{ objects created by AutoInitialize.                               }
L4=~~~~~AutoDestroy;
L5=
L6=~~~~~{ Here, free any other dynamic objects that the component methods  }
L7=~~~~~{ created but have not yet freed.  Also perform any other clean-up }
L8=~~~~~{ operations needed before the component is destroyed.             }
L9=
L10=~~~~~{ Last, free the component by calling the Destroy method of the    }
L11=~~~~~{ parent class.                                                    }
L12=~~~~~inherited Destroy;
L13=end;
[DestroyHELP$]
Lines=0
[FWx_EventList]
Descr=
DefaultCode=17
Keywords=
DataType=TStringList
Default=
Quote=0
Sc=10
IsObject=1
IsSubComponent=0
[FWx_EventListCODE$]
Lines=0
[FWx_EventListHELP$]
Lines=0
[FWx_PropertyList]
Descr=
DefaultCode=17
Keywords=
DataType=TStringList
Default=
Quote=0
Sc=10
IsObject=1
IsSubComponent=0
[FWx_PropertyListCODE$]
Lines=0
[FWx_PropertyListHELP$]
Lines=0
[Loaded]
Descr=
DefaultCode=20
Keywords=
Kind=0
Header=Loaded
S=1
Ov=1
Mode=2
WinMessage=
[LoadedCODE$]
Lines=7
L1=begin
L2=~~~~~inherited Loaded;
L3=
L4=~~~~~{ Perform any component setup that depends on the property
L5=~~~~~~~values having been set }
L6=
L7=end;
[LoadedHELP$]
Lines=0
[OnClick]
Descr=
DefaultCode=7
Keywords=
Ov=1
P=1
HandlerDecl=Click
[OnClickCODE$]
Lines=11
L1=begin
L2=~~~~~{ Code to execute before activating click
L3=~~~~~~~behavior of component's parent class }
L4=
L5=~~~~~{ Activate click behavior of parent }
L6=~~~~~inherited Click;
L7=
L8=~~~~~{ Code to execute after click behavior
L9=~~~~~~~of parent }
L10=
L11=end;
[OnClickHELP$]
Lines=0
[OnDblClick]
Descr=
DefaultCode=8
Keywords=
Ov=0
P=1
HandlerDecl=DblClick
[OnDblClickCODE$]
Lines=0
[OnDblClickHELP$]
Lines=0
[OnDragDrop]
Descr=
DefaultCode=13
Keywords=
Ov=0
P=1
HandlerDecl=DragDrop(DragObject: TObject; X, Y: Integer)
[OnDragDropCODE$]
Lines=0
[OnDragDropHELP$]
Lines=0
[OnDrawCell]
Descr=
DefaultCode=18
Keywords=
Ov=0
P=1
HandlerDecl=DrawCell(ACol, ARow: Longint; ARect: TRect; AState: TGridDrawState)
[OnDrawCellCODE$]
Lines=0
[OnDrawCellHELP$]
Lines=0
[OnEnter]
Descr=
DefaultCode=13
Keywords=
Ov=0
P=1
HandlerDecl=DoEnter
[OnEnterCODE$]
Lines=0
[OnEnterHELP$]
Lines=0
[OnExit]
Descr=
DefaultCode=13
Keywords=
Ov=0
P=1
HandlerDecl=DoExit
[OnExitCODE$]
Lines=0
[OnExitHELP$]
Lines=0
[OnKeyDown]
Descr=
DefaultCode=10
Keywords=
Ov=0
P=1
HandlerDecl=KeyDown(var Key: Word; Shift: TShiftState)
[OnKeyDownCODE$]
Lines=0
[OnKeyDownHELP$]
Lines=0
[OnKeyPress]
Descr=
DefaultCode=9
Keywords=
Ov=1
P=1
HandlerDecl=KeyPress(var Key : Char)
[OnKeyPressCODE$]
Lines=16
L1=const
L2=~~~~~TabKey = Char(VK_TAB);
L3=~~~~~EnterKey = Char(VK_RETURN);
L4=begin
L5=~~~~~{ Key contains the character produced by the keypress.
L6=~~~~~~~It can be tested or assigned a new value before the
L7=~~~~~~~call to the inherited KeyPress method.  Setting Key 
L8=~~~~~~~to #0 before call to the inherited KeyPress method 
L9=~~~~~~~terminates any further processing of the character. }
L10=
L11=~~~~~{ Activate KeyPress behavior of parent }
L12=~~~~~inherited KeyPress(Key);
L13=
L14=~~~~~{ Code to execute after KeyPress behavior of parent }
L15=
L16=end;
[OnKeyPressHELP$]
Lines=0
[OnKeyUp]
Descr=
DefaultCode=13
Keywords=
Ov=0
P=1
HandlerDecl=KeyUp(var Key: Word; Shift: TShiftState)
[OnKeyUpCODE$]
Lines=0
[OnKeyUpHELP$]
Lines=0
[OnMouseDown]
Descr=
DefaultCode=13
Keywords=
Ov=0
P=1
HandlerDecl=MouseDown(Button: TMouseButton; Shift: TShiftState; X, Y: Integer)
[OnMouseDownCODE$]
Lines=0
[OnMouseDownHELP$]
Lines=0
[OnMouseMove]
Descr=
DefaultCode=13
Keywords=
Ov=0
P=1
HandlerDecl=MouseMove(Shift: TShiftState; X, Y: Integer)
[OnMouseMoveCODE$]
Lines=0
[OnMouseMoveHELP$]
Lines=0
[OnMouseUp]
Descr=
DefaultCode=13
Keywords=
Ov=0
P=1
HandlerDecl=MouseUp(Button: TMouseButton; Shift: TShiftState; X, Y: Integer)
[OnMouseUpCODE$]
Lines=0
[OnMouseUpHELP$]
Lines=0
[Paint]
Descr=
DefaultCode=5
Keywords=
Kind=0
Header=Paint
S=1
Ov=1
Mode=2
WinMessage=
[PaintCODE$]
Lines=11
L1=begin
L2=~~~~~{ Make this component look like its parent component by calling
L3=~~~~~~~its parent's Paint method. }
L4=~~~~~inherited Paint;
L5=
L6=~~~~~{ To change the appearance of the component, use the methods 
L7=~~~~~~~supplied by the component's Canvas property (which is of 
L8=~~~~~~~type TCanvas).  For example, }
L9=
L10=~~~~~{ Canvas.Rectangle(0, 0, Width, Height); }
L11=end;
[PaintHELP$]
Lines=0
