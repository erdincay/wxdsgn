[MAININFO$]
CCVer=4.0
Compatible20=0
Compatible21=0
Compatible22=0
Compatible25=0
Compatible30=0
Compatible40=1
Lang=Pasc
UnitName=WxStaticLine
LimitName=0
NewClassName=TWxStaticLine
ParentClassName=TBevel,IWxComponentInterface
VCLAncestorName=TBevel
DefaultPalette=Additional
CopyrightLine=Copyright © 2003 by ...
TargetDir=e:\backup\delphi\demo\wxdevcpp\source\components\
FormMode=0
FormFile=
[UNITS$]
Lines=11
L1=WinTypes
L2=WinProcs
L3=Messages
L4=SysUtils
L5=Classes
L6=Controls
L7=Forms
L8=Graphics
L9=Extctrls
L10=Wxutils
L11=WxSizerPanel
[ITEMLIST$]
Create=Method
Destroy=Method
FWx_PropertyList=Variable
GenerateControlIDs:String=Method
GenerateEventTableEntries=Method
GenerateGUIControlCreation:String=Method
GenerateGUIControlDeclaration:String=Method
GenerateHeaderInclude:String=Method
GenerateImageInclude:=Method
GetEventList:TStringlist=Method
GetIDName:String=Method
GetIDValue:LongInt=Method
GetParameterFromEventName=Method
GetPropertyList:TStringList=Method
GetTypeFromEventName=Method
GetWxClassName:String=Method
Loaded=Method
OnClick=ExistingEvent
OnDblClick=ExistingEvent
OnDragDrop=ExistingEvent
OnMouseDown=ExistingEvent
OnMouseMove=ExistingEvent
OnMouseUp=ExistingEvent
Paint=Method
SaveControlOrientation=Method
SetIDName=Method
SetIDValue=Method
SetWxClassName=Method
WMSizeX=Method
Wx_BGColor=Property
Wx_Border=Property
Wx_Class=Property
Wx_ControlOrientation=Property
Wx_Enabled=Property
Wx_FGColor=Property
Wx_GeneralStyle=Property
Wx_HelpText=Property
Wx_Hidden=Property
Wx_HorizontalAlignment=Property
Wx_IDName=Property
Wx_IDValue=Property
Wx_StrechFactor=Property
Wx_ToolTip=Property
Wx_VerticalAlignment=Property
Wx_ProxyBGColorString=Property
Wx_ProxyFGColorString=Property
Wx_StretchFactor=Property
GetStretchFactor:Integer;=Method
SetStretchFactor=Method
[GLOBAL$]
Descr=
DefaultCode=1
Keywords=
[CODE$]
Lines=9
L1={
L2=*************IMPORTANT*************
L3=If you want to change any of the wxwidgets components,  you have to use comp screate by David Price.
L4=You can download a copy from
L5=
L6=http://torry.net/tools/components/compcreation/cc.zip
L7=
L8=***IF YOU FOLLOW THIS YOUR UPDATES WONT BE INCLUDED IN THE DISTRIBUTION****
L9=}
[HELP$]
Lines=0
[IMPGLOBAL$]
Descr=
DefaultCode=1
Keywords=
[IMPGLOBAL$CODE$]
Lines=0
[IMPGLOBAL$HELP$]
Lines=0
[Create]
Descr=
DefaultCode=2
Keywords=
Kind=2
Header=Create(AOwner: TComponent)
S=0
Ov=1
Mode=2
WinMessage=
[CreateCODE$]
Lines=53
L1=begin
L2=~~~~~{ Call the Create method of the parent class }
L3=~~~~~inherited Create(AOwner);
L4=
L5=~~~~~{ AutoInitialize sets the initial values of variables and      }
L6=~~~~~{ properties; also, it creates objects for properties of       }
L7=~~~~~{ standard Delphi object types (e.g., TFont, TTimer,           }
L8=~~~~~{ TPicture) and for any variables marked as objects.           }
L9=~~~~~{ AutoInitialize method is generated by Component Create.      }
L10=~~~~~AutoInitialize;
L11=
L12=~~~~~{ Code to perform other tasks when the component is created }
L13=~~~~~FWx_PropertyList.add('Wx_Hidden :Hidden');
L14=~~~~~FWx_PropertyList.add('Wx_Border : Border ');
L15=~~~~~FWx_PropertyList.add('Wx_Default :WxDefault ');
L16=~~~~~FWx_PropertyList.add('Wx_HelpText :HelpText ');
L17=~~~~~FWx_PropertyList.add('Wx_IDName : IDName ');
L18=~~~~~FWx_PropertyList.add('Wx_IDValue : IDValue ');
L19=~~~~~FWx_PropertyList.add('Wx_ToolTip :ToolTip ');
L20=~~~~~FWx_PropertyList.add('Text:Text');
L21=~~~~~FWx_PropertyList.add('Name:Name');
L22=~~~~~FWx_PropertyList.add('Wx_Class:Base Class');
L23=~~~~~FWx_PropertyList.add('Wx_Enabled:Enabled');
L24=~~~~~FWx_PropertyList.add('Left:Left');
L25=~~~~~FWx_PropertyList.add('Top:Top');
L26=~~~~~FWx_PropertyList.add('Width:Width');
L27=~~~~~FWx_PropertyList.add('Height:Height');
L28=
L29=~~~~~FWx_PropertyList.add('Wx_BGColor:Background Color');
L30=~~~~~FWx_PropertyList.add('Wx_FGColor:Foreground Color');
L31=
L32=~~~~~FWx_PropertyList.add('Wx_GeneralStyle : General Styles');
L33=~~~~~FWx_PropertyList.Add('wxSIMPLE_BORDER:wxSIMPLE_BORDER');
L34=~~~~~FWx_PropertyList.Add('wxDOUBLE_BORDER:wxDOUBLE_BORDER');
L35=~~~~~FWx_PropertyList.Add('wxSUNKEN_BORDER:wxSUNKEN_BORDER');
L36=~~~~~FWx_PropertyList.Add('wxRAISED_BORDER:wxRAISED_BORDER');
L37=~~~~~FWx_PropertyList.Add('wxSTATIC_BORDER:wxSTATIC_BORDER');
L38=~~~~~FWx_PropertyList.Add('wxTRANSPARENT_WINDOW:wxTRANSPARENT_WINDOW');
L39=~~~~~FWx_PropertyList.Add('wxNO_3D:wxNO_3D');
L40=~~~~~FWx_PropertyList.Add('wxTAB_TRAVERSAL:wxTAB_TRAVERSAL');
L41=~~~~~FWx_PropertyList.Add('wxWANTS_CHARS:wxWANTS_CHARS');
L42=~~~~~FWx_PropertyList.Add('wxNO_FULL_REPAINT_ON_RESIZE:wxNO_FULL_REPAINT_ON_RESIZE');
L43=~~~~~FWx_PropertyList.Add('wxVSCROLL:wxVSCROLL');
L44=~~~~~FWx_PropertyList.Add('wxHSCROLL:wxHSCROLL');
L45=~~~~~FWx_PropertyList.Add('wxCLIP_CHILDREN:wxCLIP_CHILDREN');
L46=
L47=~~~~~FWx_PropertyList.add('Wx_HorizontalAlignment : HorizontalAlignment');
L48=~~~~~FWx_PropertyList.add('Wx_VerticalAlignment   : VerticalAlignment');
L49=
L50=
L51=~~~~~FWx_PropertyList.add('Font : Font');
L52=
L53=end;
[CreateHELP$]
Lines=0
[Destroy]
Descr=
DefaultCode=4
Keywords=
Kind=3
Header=Destroy
S=0
Ov=1
Mode=2
WinMessage=
[DestroyCODE$]
Lines=13
L1=begin
L2=~~~~~{ AutoDestroy, which is generated by Component Create, frees any   }
L3=~~~~~{ objects created by AutoInitialize.                               }
L4=~~~~~AutoDestroy;
L5=
L6=~~~~~{ Here, free any other dynamic objects that the component methods  }
L7=~~~~~{ created but have not yet freed.  Also perform any other clean-up }
L8=~~~~~{ operations needed before the component is destroyed.             }
L9=
L10=~~~~~{ Last, free the component by calling the Destroy method of the    }
L11=~~~~~{ parent class.                                                    }
L12=~~~~~inherited Destroy;
L13=end;
[DestroyHELP$]
Lines=0
[FWx_PropertyList]
Descr=
DefaultCode=17
Keywords=
DataType=TStringList
Default=
Quote=0
Sc=10
IsObject=1
IsSubComponent=0
[FWx_PropertyListCODE$]
Lines=0
[FWx_PropertyListHELP$]
Lines=0
[GenerateControlIDs:String]
Descr=
DefaultCode=0
Keywords=
Kind=1
Header=GenerateControlIDs:String
S=0
Ov=0
Mode=2
WinMessage=
[GenerateControlIDs:StringCODE$]
Lines=10
L1=~~~~~{ Internal declarations for method }
L2=~~~~~{ type }
L3=~~~~~{ . . . }
L4=~~~~~{ var }
L5=~~~~~{ . . . }
L6=begin
L7=~~~~~Result:='';
L8=~~~~~if (Wx_IDValue > 0) and (trim(Wx_IDName) <> '') then
L9=~~~~~~~~Result:=Format('#define %s %d ',[Wx_IDName,Wx_IDValue]);
L10=end;
[GenerateControlIDs:StringHELP$]
Lines=0
[GenerateEventTableEntries]
Descr=
DefaultCode=0
Keywords=
Kind=1
Header=GenerateEventTableEntries(CurrClassName:String):String
S=0
Ov=0
Mode=2
WinMessage=
[GenerateEventTableEntriesCODE$]
Lines=8
L1=~~~~~{ Internal declarations for method }
L2=~~~~~{ type }
L3=~~~~~{ . . . }
L4=~~~~~{ var }
L5=~~~~~{ . . . }
L6=begin
L7=~~~~~Result:='';
L8=end;
[GenerateEventTableEntriesHELP$]
Lines=0
[GenerateGUIControlCreation:String]
Descr=
DefaultCode=0
Keywords=
Kind=1
Header=GenerateGUIControlCreation:String
S=0
Ov=0
Mode=2
WinMessage=
[GenerateGUIControlCreation:StringCODE$]
Lines=43
L1=~~~~~{ Internal declarations for method }
L2=~~~~~{ type }
L3=~~~~~{ . . . }
L4=~~~~~var
L5=~~~~~strStyle,parentName,strAlignment:String;
L6=begin
L7=~~~~~Result:='';
L8=~~~~if (self.Parent is TForm) or (self.Parent is TWxSizerPanel) then
L9=~~~~~~~parentName:='this'
L10=~~~~else
L11=~~~~~~~parentName:=self.Parent.name;
L12=
L13=~~~~strStyle:=GetStdStyleString(self.Wx_GeneralStyle);
L14=~~~~if trim(strStyle) <> '' then
L15=~~~~~~~strStyle:=',' +strStyle;
L16=~~~~Result:=Format('%s =  new %s(%s, %s, wxPoint(%d,%d),wxSize(%d,%d) %s);',[self.Name,self.wx_Class,parentName,GetWxIDString(self.Wx_IDName,self.Wx_IDValue),self.Left,self.Top,self.width,self.Height,strStyle] );
L17=
L18=~~~~if trim(self.Wx_ToolTip) <> '' then
L19=~~~~~~~~Result:=Result + #13+Format('%s->SetToolTip(wxT("%s"));',[self.Name,self.Wx_ToolTip]);
L20=
L21=~~~~if self.Wx_Hidden then
L22=~~~~~~~~Result:=Result + #13+Format('%s->Show(false);',[self.Name]);
L23=
L24=~~~~if not Wx_Enabled then
L25=~~~~~~~~Result:=Result + #13+Format('%s->Enable(false);',[self.Name]);
L26=
L27=~~~~if trim(self.Wx_HelpText) <> '' then
L28=~~~~~~~~Result:=Result +#13+Format('%s->SetHelpText(_("%s"));',[self.Name,self.Wx_HelpText]);
L29=
L30=~~~~if(self.Parent is TWxSizerPanel) then
L31=~~~~begin
L32=~~~~~~~~strAlignment:=SizerAlignmentToStr(Wx_HorizontalAlignment) + ' | '+ SizerAlignmentToStr(Wx_VerticalAlignment) +' | wxALL';
L33=~~~~~~~~if wx_ControlOrientation = wxControlVertical then
L34=~~~~~~~~~~~~strAlignment:=SizerAlignmentToStr(Wx_HorizontalAlignment)+ ' | wxALL';
L35=
L36=~~~~~~~~~if wx_ControlOrientation = wxControlHorizontal then
L37=~~~~~~~~~~~~~strAlignment:=SizerAlignmentToStr(Wx_VerticalAlignment)+ ' | wxALL';
L38=
L39=
L40=~~~~~~~~~Result:=Result +#13+Format('%s->Add(%s,%d,%s,%d);',[self.Parent.Name,self.Name,self.Wx_StrechFactor,strAlignment,self.Wx_Border]);
L41=~~~~end;
L42=
L43=end;
[GenerateGUIControlCreation:StringHELP$]
Lines=0
[GenerateGUIControlDeclaration:String]
Descr=
DefaultCode=0
Keywords=
Kind=1
Header=GenerateGUIControlDeclaration:String
S=0
Ov=0
Mode=2
WinMessage=
[GenerateGUIControlDeclaration:StringCODE$]
Lines=9
L1=~~~~~{ Internal declarations for method }
L2=~~~~~{ type }
L3=~~~~~{ . . . }
L4=~~~~~{ var }
L5=~~~~~{ . . . }
L6=begin
L7=~~~~~Result:='';
L8=~~~~~Result:=Format('%s *%s;',[Self.wx_Class,Self.Name]);
L9=end;
[GenerateGUIControlDeclaration:StringHELP$]
Lines=0
[GenerateHeaderInclude:String]
Descr=
DefaultCode=0
Keywords=
Kind=1
Header=GenerateHeaderInclude:String
S=0
Ov=0
Mode=2
WinMessage=
[GenerateHeaderInclude:StringCODE$]
Lines=9
L1=~~~~~{ Internal declarations for method }
L2=~~~~~{ type }
L3=~~~~~{ . . . }
L4=~~~~~{ var }
L5=~~~~~{ . . . }
L6=begin
L7=~~~~~Result:='';
L8=~~~~~Result:='#include <wx/statline.h>';
L9=end;
[GenerateHeaderInclude:StringHELP$]
Lines=0
[GenerateImageInclude:]
Descr=
DefaultCode=0
Keywords=
Kind=1
Header=GenerateImageInclude: string
S=0
Ov=0
Mode=2
WinMessage=
[GenerateImageInclude:CODE$]
Lines=8
L1=~~~~~{ Internal declarations for method }
L2=~~~~~{ type }
L3=~~~~~{ . . . }
L4=~~~~~{ var }
L5=~~~~~{ . . . }
L6=begin
L7=
L8=end;
[GenerateImageInclude:HELP$]
Lines=0
[GetEventList:TStringlist]
Descr=
DefaultCode=0
Keywords=
Kind=1
Header=GetEventList:TStringlist
S=0
Ov=0
Mode=2
WinMessage=
[GetEventList:TStringlistCODE$]
Lines=8
L1=~~~~~{ Internal declarations for method }
L2=~~~~~{ type }
L3=~~~~~{ . . . }
L4=~~~~~{ var }
L5=~~~~~{ . . . }
L6=begin
L7=Result:=nil;
L8=end;
[GetEventList:TStringlistHELP$]
Lines=0
[GetIDName:String]
Descr=
DefaultCode=0
Keywords=
Kind=1
Header=GetIDName:String
S=0
Ov=0
Mode=2
WinMessage=
[GetIDName:StringCODE$]
Lines=8
L1=~~~~~{ Internal declarations for method }
L2=~~~~~{ type }
L3=~~~~~{ . . . }
L4=~~~~~{ var }
L5=~~~~~{ . . . }
L6=begin
L7=~~~~~Result:=wx_IDName;
L8=end;
[GetIDName:StringHELP$]
Lines=0
[GetIDValue:LongInt]
Descr=
DefaultCode=0
Keywords=
Kind=1
Header=GetIDValue:LongInt
S=0
Ov=0
Mode=2
WinMessage=
[GetIDValue:LongIntCODE$]
Lines=8
L1=~~~~~{ Internal declarations for method }
L2=~~~~~{ type }
L3=~~~~~{ . . . }
L4=~~~~~{ var }
L5=~~~~~{ . . . }
L6=begin
L7=~~~~~Result:=wx_IDValue;
L8=end;
[GetIDValue:LongIntHELP$]
Lines=0
[GetParameterFromEventName]
Descr=
DefaultCode=0
Keywords=
Kind=1
Header=GetParameterFromEventName(EventName: string):String
S=0
Ov=0
Mode=2
WinMessage=
[GetParameterFromEventNameCODE$]
Lines=8
L1=~~~~~{ Internal declarations for method }
L2=~~~~~{ type }
L3=~~~~~{ . . . }
L4=~~~~~{ var }
L5=~~~~~{ . . . }
L6=begin
L7=
L8=end;
[GetParameterFromEventNameHELP$]
Lines=0
[GetPropertyList:TStringList]
Descr=
DefaultCode=0
Keywords=
Kind=1
Header=GetPropertyList:TStringList
S=0
Ov=0
Mode=2
WinMessage=
[GetPropertyList:TStringListCODE$]
Lines=8
L1=~~~~~{ Internal declarations for method }
L2=~~~~~{ type }
L3=~~~~~{ . . . }
L4=~~~~~{ var }
L5=~~~~~{ . . . }
L6=begin
L7=~~~~~Result:=FWx_PropertyList;
L8=end;
[GetPropertyList:TStringListHELP$]
Lines=0
[GetTypeFromEventName]
Descr=
DefaultCode=0
Keywords=
Kind=1
Header=GetTypeFromEventName(EventName: string):string
S=0
Ov=0
Mode=2
WinMessage=
[GetTypeFromEventNameCODE$]
Lines=8
L1=~~~~~{ Internal declarations for method }
L2=~~~~~{ type }
L3=~~~~~{ . . . }
L4=~~~~~{ var }
L5=~~~~~{ . . . }
L6=begin
L7=
L8=end;
[GetTypeFromEventNameHELP$]
Lines=0
[GetWxClassName:String]
Descr=
DefaultCode=0
Keywords=
Kind=1
Header=GetWxClassName:String
S=0
Ov=0
Mode=2
WinMessage=
[GetWxClassName:StringCODE$]
Lines=10
L1=~~~~~{ Internal declarations for method }
L2=~~~~~{ type }
L3=~~~~~{ . . . }
L4=~~~~~{ var }
L5=~~~~~{ . . . }
L6=begin
L7=~~~~~if wx_Class = '' then
L8=~~~~~~~~wx_Class:='wxStaticLine';
L9=~~~~~Result:=wx_Class;
L10=end;
[GetWxClassName:StringHELP$]
Lines=0
[Loaded]
Descr=
DefaultCode=20
Keywords=
Kind=0
Header=Loaded
S=1
Ov=1
Mode=2
WinMessage=
[LoadedCODE$]
Lines=7
L1=begin
L2=~~~~~inherited Loaded;
L3=
L4=~~~~~{ Perform any component setup that depends on the property
L5=~~~~~~~values having been set }
L6=
L7=end;
[LoadedHELP$]
Lines=0
[OnClick]
Descr=
DefaultCode=7
Keywords=
Ov=1
P=1
HandlerDecl=Click
[OnClickCODE$]
Lines=11
L1=begin
L2=~~~~~{ Code to execute before activating click
L3=~~~~~~~behavior of component's parent class }
L4=
L5=~~~~~{ Activate click behavior of parent }
L6=~~~~~inherited Click;
L7=
L8=~~~~~{ Code to execute after click behavior
L9=~~~~~~~of parent }
L10=
L11=end;
[OnClickHELP$]
Lines=0
[OnDblClick]
Descr=
DefaultCode=8
Keywords=
Ov=0
P=1
HandlerDecl=DblClick
[OnDblClickCODE$]
Lines=0
[OnDblClickHELP$]
Lines=0
[OnDragDrop]
Descr=
DefaultCode=13
Keywords=
Ov=0
P=1
HandlerDecl=DragDrop(DragObject: TObject; X, Y: Integer)
[OnDragDropCODE$]
Lines=0
[OnDragDropHELP$]
Lines=0
[OnMouseDown]
Descr=
DefaultCode=13
Keywords=
Ov=0
P=1
HandlerDecl=MouseDown(Button: TMouseButton; Shift: TShiftState; X, Y: Integer)
[OnMouseDownCODE$]
Lines=0
[OnMouseDownHELP$]
Lines=0
[OnMouseMove]
Descr=
DefaultCode=13
Keywords=
Ov=0
P=1
HandlerDecl=MouseMove(Shift: TShiftState; X, Y: Integer)
[OnMouseMoveCODE$]
Lines=0
[OnMouseMoveHELP$]
Lines=0
[OnMouseUp]
Descr=
DefaultCode=13
Keywords=
Ov=0
P=1
HandlerDecl=MouseUp(Button: TMouseButton; Shift: TShiftState; X, Y: Integer)
[OnMouseUpCODE$]
Lines=0
[OnMouseUpHELP$]
Lines=0
[Paint]
Descr=
DefaultCode=5
Keywords=
Kind=0
Header=Paint
S=1
Ov=1
Mode=2
WinMessage=
[PaintCODE$]
Lines=11
L1=begin
L2=~~~~~{ Make this component look like its parent component by calling
L3=~~~~~~~its parent's Paint method. }
L4=~~~~~inherited Paint;
L5=
L6=~~~~~{ To change the appearance of the component, use the methods
L7=~~~~~~~supplied by the component's Canvas property (which is of
L8=~~~~~~~type TCanvas).  For example, }
L9=
L10=~~~~~{ Canvas.Rectangle(0, 0, Width, Height); }
L11=end;
[PaintHELP$]
Lines=0
[SaveControlOrientation]
Descr=
DefaultCode=0
Keywords=
Kind=0
Header=SaveControlOrientation(ControlOrientation:TWxControlOrientation)
S=0
Ov=0
Mode=2
WinMessage=
[SaveControlOrientationCODE$]
Lines=8
L1=~~~~~{ Internal declarations for method }
L2=~~~~~{ type }
L3=~~~~~{ . . . }
L4=~~~~~{ var }
L5=~~~~~{ . . . }
L6=begin
L7=~~~~~wx_ControlOrientation:=ControlOrientation;
L8=end;
[SaveControlOrientationHELP$]
Lines=0
[SetIDName]
Descr=
DefaultCode=0
Keywords=
Kind=0
Header=SetIDName(IDName:String)
S=0
Ov=0
Mode=2
WinMessage=
[SetIDNameCODE$]
Lines=8
L1=~~~~~{ Internal declarations for method }
L2=~~~~~{ type }
L3=~~~~~{ . . . }
L4=~~~~~{ var }
L5=~~~~~{ . . . }
L6=begin
L7=~~~~~wx_IDName:=IDName;
L8=end;
[SetIDNameHELP$]
Lines=0
[SetIDValue]
Descr=
DefaultCode=0
Keywords=
Kind=0
Header=SetIDValue(IDValue:longInt)
S=0
Ov=0
Mode=2
WinMessage=
[SetIDValueCODE$]
Lines=8
L1=~~~~~{ Internal declarations for method }
L2=~~~~~{ type }
L3=~~~~~{ . . . }
L4=~~~~~{ var }
L5=~~~~~{ . . . }
L6=begin
L7=~~~~~Wx_IDValue:=IDVAlue;
L8=end;
[SetIDValueHELP$]
Lines=0
[SetWxClassName]
Descr=
DefaultCode=0
Keywords=
Kind=0
Header=SetWxClassName(wxClassName:String)
S=0
Ov=0
Mode=2
WinMessage=
[SetWxClassNameCODE$]
Lines=8
L1=~~~~~{ Internal declarations for method }
L2=~~~~~{ type }
L3=~~~~~{ . . . }
L4=~~~~~{ var }
L5=~~~~~{ . . . }
L6=begin
L7=~~~~~wx_Class:=wxClassName;
L8=end;
[SetWxClassNameHELP$]
Lines=0
[WMSizeX]
Descr=
DefaultCode=12
Keywords=
Kind=0
Header=WMSizeX(var Message: TWMSize)
S=2
Ov=0
Mode=2
WinMessage=WM_PAINT
[WMSizeXCODE$]
Lines=22
L1=var
L2=~~~~~W, H: Integer;
L3=begin
L4=~~~~~inherited;
L5=
L6=~~~~~{ Copy the new width and height of the component
L7=~~~~~~~so we can use SetBounds to change both at once }
L8=~~~~~W := Width;
L9=~~~~~H := Height;
L10=
L11=~~~~~{ Code to check and adjust W and H }
L12=~~~~~H:=2;
L13=~~~~~{ Update the component size if we adjusted W or H }
L14=~~~~~if (W <> Width) or (H <> Height) then
L15=~~~~~~~~inherited SetBounds(Left, Top, W, H);
L16=
L17=~~~~~{ Code to update dimensions of any owned sub-components
L18=~~~~~~~by reading their Height and Width properties and updating
L19=~~~~~~~via their SetBounds methods }
L20=
L21=~~~~~Message.Result := 0;
L22=end;
[WMSizeXHELP$]
Lines=0
[Wx_BGColor]
Descr=
DefaultCode=6
Keywords=
IN=0
RO=0
PropType=TColor
PropDefault=
Quote=0
RM=0
WM=0
VIRT=0
Hide=0
SP=0
DefEdit=1
All=0
EC=
EU=
Link=
[Wx_BGColorCODE$]
Lines=0
[Wx_BGColorHELP$]
Lines=0
[Wx_Border]
Descr=
DefaultCode=6
Keywords=
IN=0
RO=0
PropType=Integer
PropDefault=5
Quote=0
RM=0
WM=0
VIRT=0
Hide=0
SP=0
DefEdit=1
All=0
EC=
EU=
Link=
[Wx_BorderCODE$]
Lines=0
[Wx_BorderHELP$]
Lines=0
[Wx_Class]
Descr=
DefaultCode=6
Keywords=
IN=0
RO=0
PropType=String
PropDefault=
Quote=0
RM=0
WM=0
VIRT=0
Hide=0
SP=0
DefEdit=1
All=0
EC=
EU=
Link=
[Wx_ClassCODE$]
Lines=0
[Wx_ClassHELP$]
Lines=0
[Wx_ControlOrientation]
Descr=
DefaultCode=6
Keywords=
IN=0
RO=0
PropType=TWxControlOrientation
PropDefault=
Quote=0
RM=0
WM=0
VIRT=0
Hide=0
SP=0
DefEdit=1
All=0
EC=
EU=
Link=
[Wx_ControlOrientationCODE$]
Lines=0
[Wx_ControlOrientationHELP$]
Lines=0
[Wx_Enabled]
Descr=
DefaultCode=6
Keywords=
IN=0
RO=0
PropType=Boolean
PropDefault=
Quote=0
RM=0
WM=0
VIRT=0
Hide=0
SP=0
DefEdit=1
All=0
EC=
EU=
Link=
[Wx_EnabledCODE$]
Lines=0
[Wx_EnabledHELP$]
Lines=0
[Wx_FGColor]
Descr=
DefaultCode=6
Keywords=
IN=0
RO=0
PropType=TColor
PropDefault=
Quote=0
RM=0
WM=0
VIRT=0
Hide=0
SP=0
DefEdit=1
All=0
EC=
EU=
Link=
[Wx_FGColorCODE$]
Lines=0
[Wx_FGColorHELP$]
Lines=0
[Wx_GeneralStyle]
Descr=
DefaultCode=6
Keywords=
IN=0
RO=0
PropType=TWxStdStyleSet
PropDefault=
Quote=0
RM=0
WM=0
VIRT=0
Hide=0
SP=0
DefEdit=1
All=0
EC=
EU=
Link=
[Wx_GeneralStyleCODE$]
Lines=0
[Wx_GeneralStyleHELP$]
Lines=0
[Wx_HelpText]
Descr=
DefaultCode=6
Keywords=
IN=0
RO=0
PropType=String
PropDefault=
Quote=0
RM=0
WM=0
VIRT=0
Hide=0
SP=0
DefEdit=1
All=0
EC=
EU=
Link=
[Wx_HelpTextCODE$]
Lines=0
[Wx_HelpTextHELP$]
Lines=0
[Wx_Hidden]
Descr=
DefaultCode=6
Keywords=
IN=0
RO=0
PropType=Boolean
PropDefault=
Quote=0
RM=0
WM=0
VIRT=0
Hide=0
SP=0
DefEdit=1
All=0
EC=
EU=
Link=
[Wx_HiddenCODE$]
Lines=0
[Wx_HiddenHELP$]
Lines=0
[Wx_HorizontalAlignment]
Descr=
DefaultCode=6
Keywords=
IN=0
RO=0
PropType=TWxSizerHorizontalAlignment
PropDefault=wxSZALIGN_CENTER_HORIZONTAL
Quote=0
RM=0
WM=0
VIRT=0
Hide=0
SP=0
DefEdit=1
All=0
EC=
EU=
Link=
[Wx_HorizontalAlignmentCODE$]
Lines=0
[Wx_HorizontalAlignmentHELP$]
Lines=0
[Wx_IDName]
Descr=
DefaultCode=6
Keywords=
IN=0
RO=0
PropType=String
PropDefault=
Quote=0
RM=0
WM=0
VIRT=0
Hide=0
SP=0
DefEdit=1
All=0
EC=
EU=
Link=
[Wx_IDNameCODE$]
Lines=0
[Wx_IDNameHELP$]
Lines=0
[Wx_IDValue]
Descr=
DefaultCode=6
Keywords=
IN=0
RO=0
PropType=Longint
PropDefault=
Quote=0
RM=0
WM=0
VIRT=0
Hide=0
SP=0
DefEdit=1
All=0
EC=
EU=
Link=
[Wx_IDValueCODE$]
Lines=0
[Wx_IDValueHELP$]
Lines=0
[Wx_StrechFactor]
Descr=
DefaultCode=6
Keywords=
IN=0
RO=0
PropType=Integer
PropDefault=
Quote=0
RM=0
WM=0
VIRT=0
Hide=0
SP=0
DefEdit=1
All=0
EC=
EU=
Link=
[Wx_StrechFactorCODE$]
Lines=0
[Wx_StrechFactorHELP$]
Lines=0
[Wx_ToolTip]
Descr=
DefaultCode=6
Keywords=
IN=0
RO=0
PropType=String
PropDefault=
Quote=0
RM=0
WM=0
VIRT=0
Hide=0
SP=0
DefEdit=1
All=0
EC=
EU=
Link=
[Wx_ToolTipCODE$]
Lines=0
[Wx_ToolTipHELP$]
Lines=0
[Wx_VerticalAlignment]
Descr=
DefaultCode=6
Keywords=
IN=0
RO=0
PropType=TWxSizerVerticalAlignment
PropDefault=wxSZALIGN_CENTER_VERTICAL
Quote=0
RM=0
WM=0
VIRT=0
Hide=0
SP=0
DefEdit=1
All=0
EC=
EU=
Link=
[Wx_VerticalAlignmentCODE$]
Lines=0
[Wx_VerticalAlignmentHELP$]
Lines=0
[Wx_ProxyBGColorString]
Descr=
DefaultCode=6
Keywords=
IN=0
RO=0
PropType=TWxColorString
PropDefault=
Quote=0
RM=0
WM=0
VIRT=0
Hide=0
SP=0
DefEdit=1
All=0
EC=
EU=
Link=
[Wx_ProxyBGColorStringCODE$]
Lines=0
[Wx_ProxyBGColorStringHELP$]
Lines=0
[Wx_ProxyFGColorString]
Descr=
DefaultCode=6
Keywords=
IN=0
RO=0
PropType=TWxColorString
PropDefault=
Quote=0
RM=0
WM=0
VIRT=0
Hide=0
SP=0
DefEdit=1
All=0
EC=
EU=
Link=
[Wx_ProxyFGColorStringCODE$]
Lines=0
[Wx_ProxyFGColorStringHELP$]
Lines=0
[Wx_StretchFactor]
Descr=
DefaultCode=6
Keywords=
IN=0
RO=0
PropType=Integer
PropDefault=0
Quote=0
RM=0
WM=0
VIRT=0
Hide=0
SP=0
DefEdit=1
All=0
EC=
EU=
Link=
[Wx_StretchFactorCODE$]
Lines=0
[Wx_StretchFactorHELP$]
Lines=0
[GetStretchFactor:Integer;]
Descr=
DefaultCode=0
Keywords=
Kind=1
Header=GetStretchFactor:Integer;
S=0
Ov=0
Mode=2
WinMessage=
[GetStretchFactor:Integer;CODE$]
Lines=0
[GetStretchFactor:Integer;HELP$]
Lines=0
[SetStretchFactor]
Descr=
DefaultCode=0
Keywords=
Kind=0
Header=SetStretchFactor(intValue:Integer);
S=0
Ov=0
Mode=2
WinMessage=
[SetStretchFactorCODE$]
Lines=0
[SetStretchFactorHELP$]
Lines=0
