// $Id$
//

unit wxPrintDialog;

interface

uses
  Windows, Messages, SysUtils, Classes,wxUtils,WxNonVisibleBaseComponent;

type
  TWxPrintDialog = class(TWxNonVisibleBaseComponent,IWxComponentInterface)
  private
    { Private declarations }
        FWx_Class : String;
        FWx_PropertyList : TStringList;
        FWx_FromPage:Integer;
        FWx_MaxPage:Integer;
        FWx_MinPage:Integer;
        FWx_NumberOfCopies:Integer;
        FWx_PrintToFile:Boolean;
        FWx_Selection:Boolean;
        FWx_ToPage:Integer;

        procedure AutoInitialize;
        procedure AutoDestroy;

  protected

  public
        constructor Create(AOwner: TComponent); override;
        destructor Destroy; override;
        function GenerateControlIDs:String;
        function GenerateEnumControlIDs:String;
        function GenerateEventTableEntries(CurrClassName:String):String;
        function GenerateGUIControlCreation:String;
        function GenerateGUIControlDeclaration:String;
        function GenerateHeaderInclude:String;
        function GenerateImageInclude: string;
        function GetEventList:TStringlist;
        function GetIDName:String;
        function GetIDValue:LongInt;
        function GetParameterFromEventName(EventName: string):String;
        function GetPropertyList:TStringList;
        function GetStretchFactor:Integer;
        function GetTypeFromEventName(EventName: string):string;
        function GetWxClassName:String;
        procedure SaveControlOrientation(ControlOrientation:TWxControlOrientation);
        procedure SetIDName(IDName:String);
        procedure SetIDValue(IDValue:longInt);
        procedure SetStretchFactor(intValue:Integer);
        procedure SetWxClassName(wxClassName:String);
        function GetFGColor:string;
        procedure SetFGColor(strValue:String);
        function GetBGColor:string;
        procedure SetBGColor(strValue:String);
        procedure SetProxyFGColorString(value:String);
        procedure SetProxyBGColorString(value:String);
  published
    { Published declarations }
        property Wx_Class : String read FWx_Class write FWx_Class;
        property Wx_FromPage:Integer read FWx_FromPage write FWx_FromPage;
        property Wx_MaxPage:Integer read FWx_MaxPage write FWx_MaxPage;
        property Wx_MinPage:Integer read  FWx_MinPage write FWx_MinPage;
        property Wx_NumberOfCopies:Integer read  FWx_NumberOfCopies write FWx_NumberOfCopies ;
        property Wx_PrintToFile:Boolean read  FWx_PrintToFile write FWx_PrintToFile;
        property Wx_Selection:Boolean read FWx_Selection write FWx_Selection;
        property Wx_ToPage:Integer read FWx_ToPage write FWx_ToPage;
  end;

procedure Register;

implementation

procedure Register;
begin
  RegisterComponents('wxWidgets', [TWxPrintDialog]);
end;

{ Method to set variable and property values and create objects }
procedure TWxPrintDialog.AutoInitialize;
begin
     FWx_PropertyList := TStringList.Create;
     FWx_Class := 'wxPrintDialog';
     Glyph.Handle:=LoadBitmap(hInstance, 'TWxPrintDialog');
end; { of AutoInitialize }

{ Method to free any objects created by AutoInitialize }
procedure TWxPrintDialog.AutoDestroy;
begin
     FWx_PropertyList.Free;
end; { of AutoDestroy }

constructor TWxPrintDialog.Create(AOwner: TComponent);
begin
     { Call the Create method of the container's parent class       }
     inherited Create(AOwner);

     { AutoInitialize method is generated by Component Create.      }
     AutoInitialize;

     { Code to perform other tasks when the component is created }
     { Code to perform other tasks when the component is created }
     FWx_PropertyList.add('Name:Name');
     FWx_PropertyList.add('Wx_Class:Base Class');
     FWx_PropertyList.add('Wx_FromPage:From Page');
     FWx_PropertyList.add('Wx_MaxPage:Max Page');
     FWx_PropertyList.add('Wx_MinPage:Min Page');
     FWx_PropertyList.add('Wx_NumberOfCopies:NumberOfCopies');
     FWx_PropertyList.add('Wx_PrintToFile:PrintToFile');
     FWx_PropertyList.add('Wx_Selection:Selection');
     FWx_PropertyList.add('Wx_ToPage:To Page');
end;

destructor TWxPrintDialog.Destroy;
begin
     { AutoDestroy, which is generated by Component Create, frees any   }
     { objects created by AutoInitialize.                               }
     AutoDestroy;

     { Here, free any other dynamic objects that the component methods  }
     { created but have not yet freed.  Also perform any other clean-up }
     { operations needed before the component is destroyed.             }

     { Last, free the component by calling the Destroy method of the    }
     { parent class.                                                    }
     inherited Destroy;
end;

function TWxPrintDialog.GenerateControlIDs:String;
begin
     Result:='';
end;

function TWxPrintDialog.GenerateEnumControlIDs:String;
begin
     Result:='';
end;

function TWxPrintDialog.GenerateEventTableEntries(CurrClassName:String):String;
begin
     Result:='';
end;

function TWxPrintDialog.GenerateGUIControlCreation:String;
begin

    Result:='';
    Result:= self.Name+'_Data = new wxPrintDialogData();' ;
    Result:=Result+#13+self.Name+'_Data->SetFromPage('+IntToStr(Wx_FromPage)+');' ;
    Result:=Result+#13+self.Name+'_Data->SetMaxPage('+IntToStr(Wx_MaxPage)+');' ;
    Result:=Result+#13+self.Name+'_Data->SetMinPage('+IntToStr(Wx_MinPage)+');' ;
    Result:=Result+#13+self.Name+'_Data->SetNoCopies('+IntToStr(Wx_NumberOfCopies)+');' ;
    Result:=Result+#13+self.Name+'_Data->SetToPage('+IntToStr(Wx_ToPage)+');' ;

    if Wx_PrintToFile then
        Result:=Result+#13+self.Name+'_Data->SetPrintToFile(true);'
    else
        Result:=Result+#13+self.Name+'_Data->SetPrintToFile(false);';

    if Wx_Selection then
        Result:=Result+#13+self.Name+'_Data->SetSelection(true);'
    else
        Result:=Result+#13+self.Name+'_Data->SetSelection(false);';

     Result:=Result+#13+Format('%s =  new %s(this, %s);',[self.Name,self.wx_Class,self.Name+'_Data'] );

end;

function TWxPrintDialog.GenerateGUIControlDeclaration:String;
begin
     Result:='';
     Result:=Format('%s *%s;',[trim(Self.Wx_Class),trim(Self.Name)]);
     Result:=Result+#13+Format('wxPrintDialogData *%s_Data;',[trim(Self.Name)]);
end;

function TWxPrintDialog.GenerateHeaderInclude:String;
begin
     Result:='';
     Result:='#include <wx/printdlg.h>';
     Result:=Result+#13+'#include <wx/cmndata.h>';     
end;

function TWxPrintDialog.GenerateImageInclude: string;
begin

end;

function TWxPrintDialog.GetEventList:TStringlist;
begin
Result:=nil;
end;

function TWxPrintDialog.GetIDName:String;
begin

end;

function TWxPrintDialog.GetIDValue:LongInt;
begin
    result:=0;
end;

function TWxPrintDialog.GetParameterFromEventName(EventName: string):String;
begin

end;

function TWxPrintDialog.GetStretchFactor:Integer;
begin
//
end;

function TWxPrintDialog.GetPropertyList:TStringList;
begin
     Result:=FWx_PropertyList;
end;

function TWxPrintDialog.GetTypeFromEventName(EventName: string):string;
begin

end;

function TWxPrintDialog.GetWxClassName:String;
begin
     if trim(wx_Class) = '' then
        wx_Class:='wxPrintDialog';
     Result:=wx_Class;
end;

procedure TWxPrintDialog.SaveControlOrientation(ControlOrientation:TWxControlOrientation);
begin
    //
end;

procedure TWxPrintDialog.SetIDName(IDName:String);
begin

end;

procedure TWxPrintDialog.SetIDValue(IDValue:longInt);
begin

end;

procedure TWxPrintDialog.SetStretchFactor(intValue:Integer);
begin
end;

procedure TWxPrintDialog.SetWxClassName(wxClassName:String);
begin
     wx_Class:=wxClassName;
end;

function TWxPrintDialog.GetFGColor:string;
begin

end;

procedure TWxPrintDialog.SetFGColor(strValue:String);
begin
end;
    
function TWxPrintDialog.GetBGColor:string;
begin
end;

procedure TWxPrintDialog.SetBGColor(strValue:String);
begin
end;
procedure TWxPrintDialog.SetProxyFGColorString(value:String);
begin
end;

procedure TWxPrintDialog.SetProxyBGColorString(value:String);
begin
end;

end.
 
