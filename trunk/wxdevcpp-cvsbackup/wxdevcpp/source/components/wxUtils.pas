{ ****************************************************************** }
{                                                                    }
{   VCL component wxUtils                                          }
{                                                                    }
{   Code generated by Component Create for Delphi                    }
{                                                                    }
{   on 26 Oct 2003 at 1:37                                           }
{                                                                    }
{   Copyright © 2003 by Guru Kathiresan                              }
{                                                                    }
{ ****************************************************************** }

{*
  todo:
  1) StaticText needs Style
  2)Scrollbar need to have the vertical and horizontal poperties
  
*}
unit WxUtils;

interface

uses WinTypes, WinProcs, Messages, SysUtils, Classes, Controls,
  Forms, Graphics, Stdctrls, JvInspector, Dialogs, ComCtrls, ExtCtrls,dmListview,UPicEdit;

const
  IID_IWxComponentInterface: TGUID = '{624949E8-E46C-4EF9-BADA-BC85325165B3}';

type

TWxSizerVerticalAlignment = (wxSZALIGN_TOP,wxSZALIGN_BOTTOM,wxSZALIGN_CENTER_VERTICAL,wxSZALIGN_GROW_VERTICAL);
TWxSizerHorizontalAlignment = (wxSZALIGN_LEFT,wxSZALIGN_RIGHT,wxSZALIGN_CENTER_HORIZONTAL,wxSZALIGN_GROW_HORIZONTAL);
TWxControlOrientation = (wxControlVertical,wxControlHorizontal,wxControlNone);

  IWxComponentInterface = interface ['{624949E8-E46C-4EF9-BADA-BC85325165B3}']
    function GenerateControlIDs: string;
    function GenerateEventTableEntries(CurrClassName: string): string;
    function GenerateGUIControlCreation: string;
    function GenerateGUIControlDeclaration: string;
    function GenerateHeaderInclude: string;
    function GenerateImageInclude: string;
    function GetIDName: string;
    function GetIDValue: LongInt;
    function GetPropertyList: TStringList;
    function GetEventList: TStringList;
    function GetWxClassName: string;
    procedure SetIDName(IDName: string);
    procedure SetIDValue(IDValue: longInt);
    procedure SetWxClassName(wxClassName: string);
    function GetParameterFromEventName(EventName: string): string;
    function GetTypeFromEventName(EventName: string): string;
    procedure SaveControlOrientation(ControlOrientation:TWxControlOrientation);

//    function GetVerticalAlignment: TWxSizerVerticalAlignment;
//    function GetHorizonalAlignment: TWxSizerHorizonalAlignment;

  end;

    TWxStdStyleItem = (wxSIMPLE_BORDER, wxDOUBLE_BORDER, wxSUNKEN_BORDER,
                       wxRAISED_BORDER, wxSTATIC_BORDER, wxTRANSPARENT_WINDOW, wxNO_3D,
                       wxTAB_TRAVERSAL, wxWANTS_CHARS, wxNO_FULL_REPAINT_ON_RESIZE, wxVSCROLL,
                       wxHSCROLL, wxCLIP_CHILDREN);
    TWxStdStyleSet = set of TWxStdStyleItem;

    TWxBtnStyleItem = (wxBU_LEFT, wxBU_TOP, wxBU_RIGHT, wxBU_BOTTOM,
                        wxBU_EXACTFIT);
    TWxBtnStyleSet = set of TWxBtnStyleItem;

    TWxLbStyleItem = (wxALIGN_LEFT, wxALIGN_RIGHT, wxALIGN_CENTRE,
                        wxST_NO_AUTORESIZE);
    TWxLbStyleSet = set of TWxLbStyleItem;

    TWxEdtGeneralStyleItem = (wxTE_PROCESS_ENTER, wxTE_PROCESS_TAB, wxTE_PASSWORD,
                            wxTE_READONLY, wxTE_RICH, wxTE_RICH2, wxTE_AUTO_URL, wxTE_NOHIDESEL,
                            wxTE_DONTWRAP, wxTE_LINEWRAP, wxTE_WORDWRAP,wxTE_MULTILINE);
    TWxEdtGeneralStyleSet = set of TWxEdtGeneralStyleItem;

    TWxEdtAlignmentStyleItem = (wxTE_LEFT, wxTE_CENTRE, wxTE_RIGHT);
    TWxEdtAlignmentStyleSet = set of TWxEdtAlignmentStyleItem;

    TWxDlgStyleItem = (wxCAPTION, wxRESIZE_BORDER, wxSYSTEM_MENU, wxTHICK_FRAME,
                        wxSTAY_ON_TOP, wxDIALOG_NO_PARENT, wxDIALOG_EX_CONTEXTHELP, wxMINIMIZE_BOX,
                        wxMAXIMIZE_BOX,wxCLOSE_BOX);
    TWxDlgStyleSet = set of TWxDlgStyleItem;

    //newly Added
    TWxCmbStyleItem = (wxCB_SIMPLE, wxCB_DROPDOWN, wxCB_READONLY, wxCB_SORT);
    TWxCmbStyleSet = set of TWxCmbStyleItem;

    TWxLBxStyleItem = (wxLB_SINGLE, wxLB_MULTIPLE, wxLB_EXTENDED, wxLB_HSCROLL,
                        wxLB_ALWAYS_SB, wxLB_NEEDED_SB, wxLB_SORT);
    TWxLBxStyleSet = set of TWxLBxStyleItem;


    TWxCBxStyleItem = (wxCHK_2STATE ,wxCHK_3STATE ,wxCHK_ALLOW_3RD_STATE_FOR_USER );
    TWxCBxStyleSet = set of TWxCBxStyleItem;

    TWxRBStyleItem = (wxRB_GROUP, wxRB_SINGLE);
    TWxRBStyleSet = set of TWxRBStyleItem;

    TWxgagStyleItem = (wxGA_SMOOTH);
    TWxgagStyleSet = Set of TWxgagStyleItem;


    TWxsbtnStyleItem = (wxSP_ARROW_KEYS , wxSP_WRAP );
    TWxsbtnStyleSet = Set of TWxsbtnStyleItem ;


    TWxsldrStyleItem = (wxSL_AUTOTICKS , wxSL_LABELS , wxSL_LEFT ,wxSL_RIGHT ,wxSL_TOP ,wxSL_SELRANGE );
    TWxsldrStyleSet = Set of TWxsldrStyleItem ;

    //TWxslnStyleSet = Set of TWxslnStyleItem ;
    //TWxsbtmpStyleSet = Set of TWxsbtmpStyleItem ;
    //TWxsbxStyleSet = Set of TWxsbxStyleItem ;
    TWxcalctrlStyleItem = (wxCAL_SUNDAY_FIRST ,wxCAL_MONDAY_FIRST ,wxCAL_SHOW_HOLIDAYS ,
                       wxCAL_NO_YEAR_CHANGE ,wxCAL_NO_MONTH_CHANGE ,wxCAL_SHOW_SURROUNDING_WEEKS,
                       wxCAL_SEQUENTIAL_MONTH_SELECTION);
    TWxcalctrlStyleSet = Set of TWxcalctrlStyleItem ;

    //TWxcklbxStyleSet = Set of TWxcklbxStyleItem ;
    //TWxchStyleSet = Set of TWxchStyleItem ;


    TWxhwndStyleItem = (wxHW_SCROLLBAR_NEVER, wxHW_SCROLLBAR_AUTO ,wxHW_NO_SELECTION);
    TWxhwndStyleSet = Set of TWxhwndStyleItem ;


    TWxnbxStyleItem = (wxNB_LEFT , wxNB_RIGHT ,wxNB_BOTTOM ,wxNB_FIXEDWIDTH ,wxNB_MULTILINE );
    TWxnbxStyleSet = Set of TWxnbxStyleItem ;


    TWxrbxStyleItem = (wxRA_SPECIFY_ROWS ,wxRA_SPECIFY_COLS );
    TWxrbxStyleSet = Set of TWxrbxStyleItem ;


    TWxsbrStyleItem = (wxST_SIZEGRIP );
    TWxsbrStyleSet = Set of TWxsbrStyleItem ;

    TWxtbrStyleItem = (wxTB_FLAT , wxTB_DOCKABLE,wxTB_HORIZONTAL,wxTB_VERTICAL,wxTB_TEXT ,
                    wxTB_NOICONS , wxTB_NODIVIDER, wxTB_NOALIGN ,wxTB_HORZ_LAYOUT,
                  wxTB_HORZ_TEXT );
    TWxtbrStyleSet = Set of TWxtbrStyleItem ;


    TWxLVStyleItem = (wxLC_LIST, wxLC_REPORT, wxLC_VIRTUAL, wxLC_ICON,
                      wxLC_SMALL_ICON, wxLC_ALIGN_TOP, wxLC_ALIGN_LEFT, wxLC_AUTOARRANGE,
                      wxLC_USER_TEXT, wxLC_EDIT_LABELS, wxLC_NO_HEADER, wxLC_SINGLE_SEL,
                      wxLC_SORT_ASCENDING, wxLC_SORT_DESCENDING, wxLC_HRULES, wxLC_VRULES);
    TWxLVStyleSet = set of TWxLVStyleItem;

    TWxTVStyleItem = (wxTR_EDIT_LABELS, wxTR_NO_BUTTONS, wxTR_HAS_BUTTONS,
                        wxTR_TWIST_BUTTONS, wxTR_NO_LINES, wxTR_FULL_ROW_HIGHLIGHT,
                        wxTR_LINES_AT_ROOT, wxTR_HIDE_ROOT, wxTR_ROW_LINES,
                        wxTR_HAS_VARIABLE_ROW_HEIGHT, wxTR_SINGLE, wxTR_MULTIPLE, wxTR_EXTENDED,
                        wxTR_DEFAULT_STYLE);
    TWxTVStyleSet = set of TWxTVStyleItem;

//End of Control Styles
  
  TWxFileDialogType = (wxOPEN, wxSAVE);

  TWxFileDialogStyleItem = (wxHIDE_READONLY, wxOVERWRITE_PROMPT, wxMULTIPLE,
    wxCHANGE_DIR);
  TWxFileDialogStyleSet = set of TWxFileDialogStyleItem;

//Sizer orientation
TWxSizerOrientation = (wxVertical,wxHorizontal);


  TJvInspectorListItemsItem = class(TJvCustomInspectorItem)
  protected
    procedure Edit; override;

    function GetDisplayValue: string; override;
    procedure SetDisplayValue(const Value: string); override;
    procedure SetFlags(const Value: TInspectorItemFlags); override;
  public
    class procedure RegisterAsDefaultItem;
  end;

  TJvInspectorListColumnsItem = class(TJvCustomInspectorItem)
  protected
    procedure Edit; override;

    function GetDisplayValue: string; override;
    procedure SetDisplayValue(const Value: string); override;
    procedure SetFlags(const Value: TInspectorItemFlags); override;
  public
    class procedure RegisterAsDefaultItem;
  end;

  TJvInspectorTreeNodesItem = class(TJvCustomInspectorItem)
  protected
    procedure Edit; override;

    function GetDisplayValue: string; override;
    procedure SetDisplayValue(const Value: string); override;
    procedure SetFlags(const Value: TInspectorItemFlags); override;
  public
    class procedure RegisterAsDefaultItem;
  end;

  TJvInspectorBitmapItem = class(TJvCustomInspectorItem)
  protected
    procedure Edit; override;

    function GetDisplayValue: string; override;
    procedure SetDisplayValue(const Value: string); override;
    procedure SetFlags(const Value: TInspectorItemFlags); override;
  public
    class procedure RegisterAsDefaultItem;
  end;

  TJvInspectorIconItem = class(TJvCustomInspectorItem)
  protected
    procedure Edit; override;

    function GetDisplayValue: string; override;
    procedure SetDisplayValue(const Value: string); override;
    procedure SetFlags(const Value: TInspectorItemFlags); override;
  public
    class procedure RegisterAsDefaultItem;
  end;



function GetStdStyleString(stdStyle: TWxStdStyleSet): string;
function GetComboxBoxStyleString(stdStyle: TWxCmbStyleSet): string;
function GetCheckboxStyleString(stdStyle:TWxcbxStyleSet):String;
function GetTreeviewStyleString(stdStyle:TWxTVStyleSet):String;
function GetRadiobuttonStyleString(stdStyle:TWxrbStyleSet):String;
function GetListboxStyleString(stdStyle:TWxlbxStyleSet):String;
function GetGaugeStyleString(stdStyle:TWxgagStyleSet):String;
function GetScrollbarStyleString(stdStyle:TWxsbrStyleSet):String;
function GetSpinButtonStyleString(stdStyle:TWxsbtnStyleSet):String;
function GetSliderStyleString(stdStyle:TWxsldrStyleSet):String;
//function GetStaticBoxStyleString(stdStyle:TWxsbxStyleSet):String;
//function GetStaticLineStyleString(stdStyle:TWxslnStyleSet):String;
//function GetStaticBitmapStyleString(stdStyle:TWxsbtmpStyleSet):String;
function GetCalendarCtrlStyleString(stdStyle:TWxcalctrlStyleSet):String;
//function GetCheckListBoxStyleString(stdStyle:TWxcklbxStyleSet):String;
//function GetChoiceStyleString(stdStyle:TWxchStyleSet):String;
function GetHtmlWindowStyleString(stdStyle:TWxhwndStyleSet):String;
function GetNotebookStyleString(stdStyle:TWxnbxStyleSet):String;
function GetRadioBoxStyleString(stdStyle:TWxrbxStyleSet):String;
function GetStatusBarStyleString(stdStyle:TWxsbrStyleSet):String;
//function GetToggleButtonStyleString(stdStyle:TWxtbtnStyleSet):String;
function GetToolBarStyleString(stdStyle:TWxtbrStyleSet):String;

//Todo :
function GetCheckboxSpecificStyle(stdstyle: TWxStdStyleSet;cbxstyle:TWxcbxStyleSet):String;
function GetTreeviewSpecificStyle(stdstyle: TWxStdStyleSet;tvstyle:TWxTvStyleSet):String;
function GetRadiobuttonSpecificStyle(stdstyle: TWxStdStyleSet;rbstyle:TWxrbStyleSet):String;
function GetListboxSpecificStyle(stdstyle: TWxStdStyleSet;lbxstyle:TWxlbxStyleSet):String;
function GetGaugeSpecificStyle(stdstyle: TWxStdStyleSet;gagstyle:TWxgagStyleSet):String;
//function GetScrollbarSpecificStyle(stdstyle: TWxStdStyleSet;scbrstyle:TWxscbrStyleSet):String;
function GetSpinButtonSpecificStyle(stdstyle: TWxStdStyleSet;sbtnstyle:TWxsbtnStyleSet):String;
function GetSliderSpecificStyle(stdstyle: TWxStdStyleSet;sldrstyle:TWxsldrStyleSet):String;
//function GetStaticBoxSpecificStyle(stdstyle: TWxStdStyleSet;sbxstyle:TWxsbxStyleSet):String;
//function GetStaticLineSpecificStyle(stdstyle: TWxStdStyleSet;slnstyle:TWxslnStyleSet):String;
//function GetStaticBitmapSpecificStyle(stdstyle: TWxStdStyleSet;sbtmpstyle:TWxsbtmpStyleSet):String;
function GetCalendarCtrlSpecificStyle(stdstyle: TWxStdStyleSet;calctrlstyle:TWxcalctrlStyleSet):String;
//function GetCheckListBoxSpecificStyle(stdstyle: TWxStdStyleSet;cklbxstyle:TWxcklbxStyleSet):String;
//function GetChoiceSpecificStyle(stdstyle: TWxStdStyleSet;chstyle:TWxchStyleSet):String;
function GetHtmlWindowSpecificStyle(stdstyle: TWxStdStyleSet;hwndstyle:TWxhwndStyleSet):String;
function GetNotebookSpecificStyle(stdstyle: TWxStdStyleSet;nbxstyle:TWxnbxStyleSet):String;
function GetRadioBoxSpecificStyle(stdstyle: TWxStdStyleSet;rbxstyle:TWxrbxStyleSet):String;
function GetStatusBarSpecificStyle(stdstyle: TWxStdStyleSet;sbrstyle:TWxsbrStyleSet):String;
//function GetToggleButtonSpecificStyle(stdstyle: TWxStdStyleSet;tbtnstyle:TWxtbtnStyleSet):String;
function GetToolBarSpecificStyle(stdstyle: TWxStdStyleSet;tbrstyle:TWxtbrStyleSet):String;
/////////////////////////////

function GetListViewSpecificStyle(stdstyle: TWxStdStyleSet; lstvwstyle:TWxLVStyleSet): string;
function GetEditSpecificStyle(stdstyle: TWxStdStyleSet; dlgstyle:TWxEdtGeneralStyleSet): string;
function GetButtonSpecificStyle(stdstyle: TWxStdStyleSet; dlgstyle:TWxBtnStyleSet): string;
function GetLabelSpecificStyle(stdstyle: TWxStdStyleSet; dlgstyle:  TWxLbStyleSet): string;
function GetcomboBoxSpecificStyle(stdstyle: TWxStdStyleSet; cmbstyle:TWxCmbStyleSet): string;
function GetDialogSpecificStyle(stdstyle: TWxStdStyleSet; dlgstyle:TWxDlgStyleSet): string;

function SizerAlignmentToStr(SizerVerticalAlignment:TWxSizerVerticalAlignment):String;overload;
function SizerAlignmentToStr(SizerHorizontalAlignment:TWxSizerHorizontalAlignment):String;overload;


function GetWxIDString(strID: string; intID: LongInt): string;
function IsValidClass(comp: TComponent): boolean;
function GetEventNameFromDisplayName(strDisplayName: string; strlst:TStringList): string;
function AlignmentToStr(taPos: TAlignment): string;
procedure ChangeControlZOrder(Sender: TObject; MoveUp: Boolean = True);
function GetXPMFromTPicture(XPMName:String;delphiBitmap:TBitmap):String;


implementation

uses wxlistCtrl,WxStaticBitmap;

function GetEventNameFromDisplayName(strDisplayName: string; strlst:
  TStringList): string;
var
  I: Integer;
  strEventName, strEventCaption: string;
  intPos: Integer;
begin
  Result := '';
  for i := 0 to strlst.Count - 1 do // Iterate
  begin
    intPos := Pos(':', strlst[i]);
    strEventName := Copy(strlst[i], 0, intPos - 1);
    strEventCaption := Trim(Copy(strlst[i], intPos + 1, Length(strlst[i])));
    if AnsiSameText(strEventCaption, strDisplayName) then
    begin
      Result := strEventName;
    end;
  end; // for
end;

function IsValidClass(comp: TComponent): boolean;
var
  intfObj: IWxComponentInterface;
begin
  Result := comp.GetInterface(IID_IWxComponentInterface, intfObj);
end;

//Here is the start
function GetCheckboxStyleString(stdStyle:TWxcbxStyleSet):String;
var
  I: Integer;
  strLst: TStringList;
begin
  strLst := TStringList.Create;
  if wxCHK_2STATE in stdStyle then
    strLst.add('wxCHK_2STATE ');

  if wxCHK_3STATE in stdStyle then
    strLst.add('wxCHK_3STATE ');

  if wxCHK_ALLOW_3RD_STATE_FOR_USER in stdStyle then
    strLst.add('wxCHK_ALLOW_3RD_STATE_FOR_USER');

//  if wxCB_SORT in stdStyle then
//    strLst.add('wxALIGN_RIGHT ');

  if strLst.Count = 0 then
  begin
    Result := '';
  end
  else
  begin
    for I := 0 to strLst.count - 1 do // Iterate
    begin
      if i <> strLst.count - 1 then
        Result := Result + strLst[i] + ' | '
      else
        Result := Result + ' ' + strLst[i] + ' ';
    end; // for
  end;
  //sendDebug(Result);
  strLst.destroy;
end;

function GetTreeviewStyleString(stdStyle:TWxtvStyleSet):String;
var
  I: Integer;
  strLst: TStringList;
begin
  strLst := TStringList.Create;
  if wxTR_EDIT_LABELS  in stdStyle then
    strLst.add('wxTR_EDIT_LABELS');

  if wxTR_NO_BUTTONS in stdStyle then
    strLst.add('wxTR_NO_BUTTONS');

  if wxTR_HAS_BUTTONS  in stdStyle then
    strLst.add('wxTR_HAS_BUTTONS');

  if wxTR_TWIST_BUTTONS  in stdStyle then
    strLst.add('wxTR_TWIST_BUTTONS');

  if wxTR_NO_LINES  in stdStyle then
    strLst.add('wxTR_NO_LINES');

  if wxTR_FULL_ROW_HIGHLIGHT  in stdStyle then
    strLst.add('wxTR_FULL_ROW_HIGHLIGHT');

  if wxTR_LINES_AT_ROOT  in stdStyle then
    strLst.add('wxTR_LINES_AT_ROOT');

  if wxTR_HIDE_ROOT  in stdStyle then
    strLst.add('wxTR_HIDE_ROOT');

  if wxTR_ROW_LINES  in stdStyle then
    strLst.add('wxTR_ROW_LINES');

  if wxTR_HAS_VARIABLE_ROW_HEIGHT in stdStyle then
    strLst.add('wxTR_HAS_VARIABLE_ROW_HEIGHT');

  if wxTR_SINGLE  in stdStyle then
    strLst.add('wxTR_SINGLE');

  if wxTR_MULTIPLE  in stdStyle then
    strLst.add('wxTR_MULTIPLE');

  if wxTR_EXTENDED   in stdStyle then
    strLst.add('wxTR_EXTENDED');

  if wxTR_DEFAULT_STYLE   in stdStyle then
    strLst.add('wxTR_DEFAULT_STYLE');

  if strLst.Count = 0 then
  begin
    Result := '';
  end
  else
  begin
    for I := 0 to strLst.count - 1 do // Iterate
    begin
      if i <> strLst.count - 1 then
        Result := Result + strLst[i] + ' | '
      else
        Result := Result + ' ' + strLst[i] + ' ';
    end; // for
  end;
  //sendDebug(Result);
  strLst.destroy;
end;

function GetRadiobuttonStyleString(stdStyle:TWxrbStyleSet):String;
var
  I: Integer;
  strLst: TStringList;
begin
  strLst := TStringList.Create;
  if wxRB_GROUP in stdStyle then
    strLst.add('wxRB_GROUP');

  if wxRB_SINGLE in stdStyle then
    strLst.add('wxRB_SINGLE');

  if strLst.Count = 0 then
  begin
    Result := '';
  end
  else
  begin
    for I := 0 to strLst.count - 1 do // Iterate
    begin
      if i <> strLst.count - 1 then
        Result := Result + strLst[i] + ' | '
      else
        Result := Result + ' ' + strLst[i] + ' ';
    end; // for
  end;
  //sendDebug(Result);
  strLst.destroy;
end;

function GetListboxStyleString(stdStyle:TWxlbxStyleSet):String;
var
  I: Integer;
  strLst: TStringList;
begin
  strLst := TStringList.Create;
  if wxLB_SINGLE  in stdStyle then
    strLst.add('wxLB_SINGLE ');

  if wxLB_MULTIPLE  in stdStyle then
    strLst.add('wxLB_MULTIPLE ');

  if wxLB_EXTENDED   in stdStyle then
    strLst.add('wxLB_EXTENDED  ');

  if wxLB_HSCROLL  in stdStyle then
    strLst.add('wxLB_HSCROLL ');

  if wxLB_ALWAYS_SB   in stdStyle then
    strLst.add('wxLB_ALWAYS_SB  ');

  if wxLB_NEEDED_SB   in stdStyle then
    strLst.add('wxLB_NEEDED_SB  ');

  if wxLB_NEEDED_SB   in stdStyle then
    strLst.add('wxLB_SORT   ');

  if strLst.Count = 0 then
  begin
    Result := '';
  end
  else
  begin
    for I := 0 to strLst.count - 1 do // Iterate
    begin
      if i <> strLst.count - 1 then
        Result := Result + strLst[i] + ' | '
      else
        Result := Result + ' ' + strLst[i] + ' ';
    end; // for
  end;
  //sendDebug(Result);
  strLst.destroy;
end;

function GetGaugeStyleString(stdStyle:TWxgagStyleSet):String;
var
  I: Integer;
  strLst: TStringList;
begin
  strLst := TStringList.Create;
  if wxGA_SMOOTH in stdStyle then
    strLst.add('wxGA_SMOOTH');

  if strLst.Count = 0 then
  begin
    Result := '';
  end
  else
  begin
    for I := 0 to strLst.count - 1 do // Iterate
    begin
      if i <> strLst.count - 1 then
        Result := Result + strLst[i] + ' | '
      else
        Result := Result + ' ' + strLst[i] + ' ';
    end; // for
  end;
  //sendDebug(Result);
  strLst.destroy;
end;

function GetScrollbarStyleString(stdStyle:TWxsbrStyleSet):String;
var
  I: Integer;
  strLst: TStringList;
begin
  strLst := TStringList.Create;
  if wxST_SIZEGRIP in stdStyle then
    strLst.add('wxST_SIZEGRIP');

  if strLst.Count = 0 then
  begin
    Result := '';
  end
  else
  begin
    for I := 0 to strLst.count - 1 do // Iterate
    begin
      if i <> strLst.count - 1 then
        Result := Result + strLst[i] + ' | '
      else
        Result := Result + ' ' + strLst[i] + ' ';
    end; // for
  end;
  //sendDebug(Result);
  strLst.destroy;
end;

function GetSpinButtonStyleString(stdStyle:TWxsbtnStyleSet):String;
var
  I: Integer;
  strLst: TStringList;
begin
  strLst := TStringList.Create;
  if wxSP_ARROW_KEYS in stdStyle then
    strLst.add('wxSP_ARROW_KEYS');

  if wxSP_WRAP in stdStyle then
    strLst.add('wxSP_WRAP');

  if strLst.Count = 0 then
  begin
    Result := '';
  end
  else
  begin
    for I := 0 to strLst.count - 1 do // Iterate
    begin
      if i <> strLst.count - 1 then
        Result := Result + strLst[i] + ' | '
      else
        Result := Result + ' ' + strLst[i] + ' ';
    end; // for
  end;
  //sendDebug(Result);
  strLst.destroy;
end;

function GetSliderStyleString(stdStyle:TWxsldrStyleSet):String;
var
  I: Integer;
  strLst: TStringList;
begin
  strLst := TStringList.Create;
  if wxSL_AUTOTICKS in stdStyle then
    strLst.add('wxSL_AUTOTICKS');

  if wxSL_LABELS in stdStyle then
    strLst.add('wxSL_LABELS');

  if wxSL_LEFT in stdStyle then
    strLst.add('wxSL_LEFT');

  if wxSL_RIGHT in stdStyle then
    strLst.add('wxSL_RIGHT');

  if wxSL_TOP in stdStyle then
    strLst.add('wxSL_TOP');

  if wxSL_SELRANGE in stdStyle then
    strLst.add('wxSL_SELRANGE');


        
  if strLst.Count = 0 then
  begin
    Result := '';
  end
  else
  begin
    for I := 0 to strLst.count - 1 do // Iterate
    begin
      if i <> strLst.count - 1 then
        Result := Result + strLst[i] + ' | '
      else
        Result := Result + ' ' + strLst[i] + ' ';
    end; // for
  end;
  //sendDebug(Result);
  strLst.destroy;
end;


function GetCalendarCtrlStyleString(stdStyle:TWxcalctrlStyleSet):String;
var
  I: Integer;
  strLst: TStringList;
begin
  strLst := TStringList.Create;
  if wxCAL_SUNDAY_FIRST in stdStyle then
    strLst.add('wxCAL_SUNDAY_FIRST');

  if wxCAL_MONDAY_FIRST in stdStyle then
    strLst.add('wxCAL_MONDAY_FIRST');

  if wxCAL_SHOW_HOLIDAYS in stdStyle then
    strLst.add('wxCAL_SHOW_HOLIDAYS');

  if wxCAL_NO_YEAR_CHANGE in stdStyle then
    strLst.add('wxCAL_NO_YEAR_CHANGE');

  if wxCAL_NO_MONTH_CHANGE in stdStyle then
    strLst.add('wxCAL_NO_MONTH_CHANGE');

  if wxCAL_SHOW_SURROUNDING_WEEKS in stdStyle then
    strLst.add('wxCAL_SHOW_SURROUNDING_WEEKS');

  if wxCAL_SEQUENTIAL_MONTH_SELECTION in stdStyle then
    strLst.add('wxCAL_SEQUENTIAL_MONTH_SELECTION');


            
  if strLst.Count = 0 then
  begin
    Result := '';
  end
  else
  begin
    for I := 0 to strLst.count - 1 do // Iterate
    begin
      if i <> strLst.count - 1 then
        Result := Result + strLst[i] + ' | '
      else
        Result := Result + ' ' + strLst[i] + ' ';
    end; // for
  end;
  //sendDebug(Result);
  strLst.destroy;
end;


function GetHtmlWindowStyleString(stdStyle:TWxhwndStyleSet):String;
var
  I: Integer;
  strLst: TStringList;
begin
  strLst := TStringList.Create;
  if wxHW_SCROLLBAR_NEVER in stdStyle then
    strLst.add('wxHW_SCROLLBAR_NEVER');

  if wxHW_SCROLLBAR_AUTO in stdStyle then
    strLst.add('wxHW_SCROLLBAR_AUTO');

  if wxHW_NO_SELECTION in stdStyle then
    strLst.add('wxHW_NO_SELECTION');

  if strLst.Count = 0 then
  begin
    Result := '';
  end
  else
  begin
    for I := 0 to strLst.count - 1 do // Iterate
    begin
      if i <> strLst.count - 1 then
        Result := Result + strLst[i] + ' | '
      else
        Result := Result + ' ' + strLst[i] + ' ';
    end; // for
  end;
  //sendDebug(Result);
  strLst.destroy;
end;

function GetNotebookStyleString(stdStyle:TWxnbxStyleSet):String;
var
  I: Integer;
  strLst: TStringList;
begin
  strLst := TStringList.Create;
  if wxNB_LEFT in stdStyle then
    strLst.add('wxNB_LEFT');

  if wxNB_RIGHT in stdStyle then
    strLst.add('wxNB_RIGHT');

  if wxNB_BOTTOM in stdStyle then
    strLst.add('wxNB_BOTTOM');

  if wxNB_FIXEDWIDTH in stdStyle then
    strLst.add('wxNB_FIXEDWIDTH');

  if wxNB_MULTILINE in stdStyle then
    strLst.add('wxNB_MULTILINE');
    
  if strLst.Count = 0 then
  begin
    Result := '';
  end
  else
  begin
    for I := 0 to strLst.count - 1 do // Iterate
    begin
      if i <> strLst.count - 1 then
        Result := Result + strLst[i] + ' | '
      else
        Result := Result + ' ' + strLst[i] + ' ';
    end; // for
  end;
  //sendDebug(Result);
  strLst.destroy;
end;

function GetRadioBoxStyleString(stdStyle:TWxrbxStyleSet):String;
var
  I: Integer;
  strLst: TStringList;
begin
  strLst := TStringList.Create;
  if wxRA_SPECIFY_ROWS in stdStyle then
    strLst.add('wxRA_SPECIFY_ROWS');

  if wxRA_SPECIFY_COLS in stdStyle then
    strLst.add('wxRA_SPECIFY_COLS');

  if strLst.Count = 0 then
  begin
    Result := '';
  end
  else
  begin
    for I := 0 to strLst.count - 1 do // Iterate
    begin
      if i <> strLst.count - 1 then
        Result := Result + strLst[i] + ' | '
      else
        Result := Result + ' ' + strLst[i] + ' ';
    end; // for
  end;
  //sendDebug(Result);
  strLst.destroy;
end;

function GetStatusBarStyleString(stdStyle:TWxsbrStyleSet):String;
var
  I: Integer;
  strLst: TStringList;
begin
  strLst := TStringList.Create;
  if wxST_SIZEGRIP in stdStyle then
    strLst.add('wxST_SIZEGRIP');

  if strLst.Count = 0 then
  begin
    Result := '';
  end
  else
  begin
    for I := 0 to strLst.count - 1 do // Iterate
    begin
      if i <> strLst.count - 1 then
        Result := Result + strLst[i] + ' | '
      else
        Result := Result + ' ' + strLst[i] + ' ';
    end; // for
  end;
  //sendDebug(Result);
  strLst.destroy;
end;


function GetToolBarStyleString(stdStyle:TWxtbrStyleSet):String;
var
  I: Integer;
  strLst: TStringList;
begin
  strLst := TStringList.Create;
  
  if wxTB_FLAT in stdStyle then
    strLst.add('wxTB_FLAT');

  if wxTB_DOCKABLE in stdStyle then
    strLst.add('wxTB_DOCKABLE');

  if wxTB_HORIZONTAL in stdStyle then
    strLst.add('wxTB_HORIZONTAL');

  if wxTB_VERTICAL in stdStyle then
    strLst.add('wxTB_VERTICAL');

  if wxTB_TEXT in stdStyle then
    strLst.add('wxTB_TEXT');

  if wxTB_NOICONS in stdStyle then
    strLst.add('wxTB_NOICONS');

  if wxTB_NODIVIDER in stdStyle then
    strLst.add('wxTB_NODIVIDER');

  if wxTB_NOALIGN in stdStyle then
    strLst.add('wxTB_NOALIGN');

  if wxTB_HORZ_LAYOUT in stdStyle then
    strLst.add('wxTB_HORZ_LAYOUT');

  if wxTB_HORZ_TEXT in stdStyle then
    strLst.add('wxTB_HORZ_TEXT');
        
  if strLst.Count = 0 then
  begin
    Result := '';
  end
  else
  begin
    for I := 0 to strLst.count - 1 do // Iterate
    begin
      if i <> strLst.count - 1 then
        Result := Result + strLst[i] + ' | '
      else
        Result := Result + ' ' + strLst[i] + ' ';
    end; // for
  end;
  //sendDebug(Result);
  strLst.destroy;
end;

//Here is the end;

function GetComboxBoxStyleString(stdStyle: TWxCmbStyleSet): string;
var
  I: Integer;
  strLst: TStringList;
begin
  strLst := TStringList.Create;
  if wxCB_SIMPLE in stdStyle then
    strLst.add('wxCB_SIMPLE');

  if wxCB_DROPDOWN in stdStyle then
    strLst.add('wxCB_DROPDOWN');

  if wxCB_READONLY in stdStyle then
    strLst.add('wxCB_READONLY');

  if wxCB_SORT in stdStyle then
    strLst.add('wxCB_SORT');

  if strLst.Count = 0 then
  begin
    Result := '';
  end
  else
  begin
    for I := 0 to strLst.count - 1 do // Iterate
    begin
      if i <> strLst.count - 1 then
        Result := Result + strLst[i] + ' | '
      else
        Result := Result + ' ' + strLst[i] + ' ';
    end; // for
  end;
  //sendDebug(Result);
  strLst.destroy;
end;

function GetDlgStyleString(stdStyle: TWxDlgStyleSet): string;
var
  I: Integer;
  strLst: TStringList;
begin
  strLst := TStringList.Create;
  if wxCAPTION in stdStyle then
    strLst.add('wxCAPTION');

  if wxRESIZE_BORDER in stdStyle then
    strLst.add('wxRESIZE_BORDER');

  if wxSYSTEM_MENU in stdStyle then
    strLst.add('wxSYSTEM_MENU');

  if wxTHICK_FRAME in stdStyle then
    strLst.add('wxTHICK_FRAME');

  if wxSTAY_ON_TOP in stdStyle then
    strLst.add('wxSTAY_ON_TOP');

  if wxDIALOG_NO_PARENT in stdStyle then
    strLst.add('wxDIALOG_NO_PARENT');

  if wxDIALOG_EX_CONTEXTHELP in stdStyle then
    strLst.add('wxDIALOG_EX_CONTEXTHELP');

  if wxMINIMIZE_BOX in stdStyle then
    strLst.add('wxMINIMIZE_BOX');

  if wxMAXIMIZE_BOX in stdStyle then
    strLst.add('wxMAXIMIZE_BOX');

  if wxCLOSE_BOX  in stdStyle then
    strLst.add('wxCLOSE_BOX');

  if strLst.Count = 0 then
  begin
    Result := '';
  end
  else
  begin
    for I := 0 to strLst.count - 1 do // Iterate
    begin
      if i <> strLst.count - 1 then
        Result := Result + strLst[i] + ' | '
      else
        Result := Result + ' ' + strLst[i] + ' ';
    end; // for
  end;
  //sendDebug(Result);
  strLst.destroy;
end;

function GetButtonStyleString(stdStyle: TWxBtnStyleSet): string;
var
  I: Integer;
  strLst: TStringList;
begin

  strLst := TStringList.Create;
  if wxBU_LEFT in stdStyle then
    strLst.add('wxBU_LEFT');

  if wxBU_TOP in stdStyle then
    strLst.add('wxBU_TOP');

  if wxBU_RIGHT in stdStyle then
    strLst.add('wxBU_RIGHT');

  if wxBU_EXACTFIT in stdStyle then
    strLst.add('wxBU_EXACTFIT');

  if wxBU_BOTTOM in stdStyle then
    strLst.add('wxBU_BOTTOM');

  if strLst.Count = 0 then
  begin
    Result := '';
  end
  else
  begin
    for I := 0 to strLst.count - 1 do // Iterate
    begin
      if i <> strLst.count - 1 then
        Result := Result + strLst[i] + ' | '
      else
        Result := Result + ' ' + strLst[i] + ' ';
    end; // for
  end;
  //sendDebug(Result);
  strLst.destroy;
end;

function GetLbStyleString(stdStyle: TWxLbStyleSet): string;
var
  I: Integer;
  strLst: TStringList;
begin

  strLst := TStringList.Create;
  if wxALIGN_LEFT in stdStyle then
    strLst.add('wxALIGN_LEFT');

  if wxALIGN_RIGHT in stdStyle then
    strLst.add('wxALIGN_RIGHT');

  if wxST_NO_AUTORESIZE in stdStyle then
    strLst.add('wxST_NO_AUTORESIZE');

  if wxST_NO_AUTORESIZE in stdStyle then
    strLst.add('wxST_NO_AUTORESIZE');

  if strLst.Count = 0 then
  begin
    Result := '';
  end
  else
  begin
    for I := 0 to strLst.count - 1 do // Iterate
    begin
      if i <> strLst.count - 1 then
        Result := Result + strLst[i] + ' | '
      else
        Result := Result + ' ' + strLst[i] + ' ';
    end; // for
  end;
  //sendDebug(Result);
  strLst.destroy;
end;

function GetEdtStyleString(edtdStyle: TWxEdtGeneralStyleSet): string;
var
  I: Integer;
  strLst: TStringList;
begin
  strLst := TStringList.Create;
  if wxTE_PROCESS_ENTER in edtdStyle then
    strLst.add('wxTE_PROCESS_ENTER');

  if wxTE_PROCESS_TAB in edtdStyle then
    strLst.add('wxTE_PROCESS_TAB');

  if wxTE_PASSWORD in edtdStyle then
    strLst.add('wxTE_PASSWORD');

  if wxTE_READONLY in edtdStyle then
    strLst.add('wxTE_READONLY');

  if wxTE_RICH in edtdStyle then
    strLst.add('wxTE_RICH');

  if wxTE_RICH2 in edtdStyle then
    strLst.add('wxTE_RICH2');

  if wxTE_AUTO_URL in edtdStyle then
    strLst.add('wxTE_AUTO_URL');

  if wxTE_NOHIDESEL in edtdStyle then
    strLst.add('wxTE_NOHIDESEL');

  //    if wxTE_LEFT in edtdStyle then
  //        strLst.add('wxTE_LEFT');
  //
  //    if wxTE_CENTRE in edtdStyle then
  //        strLst.add('wxTE_CENTRE');
  //
  //    if wxTE_RIGHT in edtdStyle then
  //        strLst.add('wxTE_RIGHT');

  if wxTE_DONTWRAP in edtdStyle then
    strLst.add('wxTE_DONTWRAP');

  if wxTE_LINEWRAP in edtdStyle then
    strLst.add('wxTE_LINEWRAP');

  if wxTE_WORDWRAP in edtdStyle then
    strLst.add('wxTE_WORDWRAP');

  if wxTE_MULTILINE in edtdStyle then
    strLst.add('wxTE_MULTILINE');


  if strLst.Count = 0 then
  begin
    Result := '';
  end
  else
  begin
    for I := 0 to strLst.count - 1 do // Iterate
    begin
      if i <> strLst.count - 1 then
        Result := Result + strLst[i] + ' | '
      else
        Result := Result + ' ' + strLst[i] + ' ';
    end; // for
  end;
  //sendDebug(Result);
  strLst.destroy;
end;

function GetEditSpecificStyle(stdstyle: TWxStdStyleSet; dlgstyle:
  TWxEdtGeneralStyleSet): string;
var
  strA: string;
begin
  Result := GetStdStyleString(stdstyle);
  strA := trim(GetEdtStyleString(dlgstyle));
  if strA <> '' then
  begin
    if trim(Result) = '' then
      Result := strA
    else
      Result := Result + ' | ' + strA
  end;

  if trim(Result) <> '' then
    Result := ' , ' + Result;
end;

function GetcomboBoxSpecificStyle(stdstyle: TWxStdStyleSet; cmbstyle:TWxCmbStyleSet): string;
var
  strA: string;
begin
  Result := GetStdStyleString(stdstyle);
  strA := trim(GetComboxBoxStyleString(cmbstyle));
  if strA <> '' then
  begin
    if trim(Result) = '' then
      Result := strA
    else
      Result := Result + ' | ' + strA
  end;

  if trim(Result) <> '' then
    Result := ' , ' + Result;
end;


function GetListViewStyleString(lstvwstyle: TWxLVStyleSet): string;
var
  I: Integer;
  strLst: TStringList;
begin
  strLst := TStringList.Create;
  if wxLC_LIST in lstvwstyle then
    strLst.add('wxLC_LIST');

  if wxLC_REPORT in lstvwstyle then
    strLst.add('wxLC_REPORT ');

  if wxLC_VIRTUAL in lstvwstyle then
    strLst.add('wxLC_VIRTUAL');

  if wxLC_ICON in lstvwstyle then
    strLst.add('wxLC_ICON');

  if wxLC_SMALL_ICON in lstvwstyle then
    strLst.add('wxLC_SMALL_ICON ');

  if wxLC_ALIGN_TOP in lstvwstyle then
    strLst.add('wxLC_ALIGN_TOP ');

  if wxLC_ALIGN_LEFT in lstvwstyle then
    strLst.add('wxLC_ALIGN_LEFT ');

  if wxLC_AUTOARRANGE in lstvwstyle then
    strLst.add('wxLC_AUTOARRANGE');

  if wxLC_USER_TEXT in lstvwstyle then
    strLst.add('wxLC_USER_TEXT');

  if wxLC_EDIT_LABELS in lstvwstyle then
    strLst.add('wxLC_EDIT_LABELS');

  if wxLC_NO_HEADER in lstvwstyle then
    strLst.add('wxLC_NO_HEADER');

  if wxLC_SINGLE_SEL in lstvwstyle then
    strLst.add('wxLC_SINGLE_SEL');

  if wxLC_SORT_ASCENDING in lstvwstyle then
    strLst.add('wxLC_SORT_ASCENDING');

  if wxLC_SORT_DESCENDING in lstvwstyle then
    strLst.add('wxLC_SORT_DESCENDING');

  if wxLC_HRULES in lstvwstyle then
    strLst.add('wxLC_HRULES');

  if wxLC_VRULES in lstvwstyle then
    strLst.add('wxLC_VRULES');

  if strLst.Count = 0 then
  begin
    Result := '';
  end
  else
  begin
    for I := 0 to strLst.count - 1 do // Iterate
    begin
      if i <> strLst.count - 1 then
        Result := Result + strLst[i] + ' | '
      else
        Result := Result + ' ' + strLst[i] + ' ';
    end; // for
  end;
  //sendDebug(Result);
  strLst.destroy;
end;

function GetListViewSpecificStyle(stdstyle: TWxStdStyleSet; lstvwstyle:
  TWxLVStyleSet): string;
var
  strA: string;
begin
  Result := GetStdStyleString(stdstyle);
  strA := trim(GetListViewStyleString(lstvwstyle));
  if strA <> '' then
  begin
    if trim(Result) = '' then
      Result := strA
    else
      Result := Result + ' | ' + strA
  end;

  if trim(Result) <> '' then
    Result := ' , ' + Result;
end;

//Start here
function GetCheckboxSpecificStyle(stdstyle: TWxStdStyleSet;cbxstyle:TWxcbxStyleSet):String;
var
  strA: string;
begin
  Result := GetStdStyleString(stdstyle);
  strA := trim(GetCheckBoxStyleString(cbxstyle));
  if strA <> '' then
  begin
    if trim(Result) = '' then
      Result := strA
    else
      Result := Result + ' | ' + strA
  end;

  if trim(Result) <> '' then
    Result := ' , ' + Result;
end;

function GetTreeviewSpecificStyle(stdstyle: TWxStdStyleSet;tvstyle:TWxTVStyleSet):String;
var
  strA: string;
begin
  Result := GetStdStyleString(stdstyle);
  strA := trim(GetTreeViewStyleString(tvstyle));
  if strA <> '' then
  begin
    if trim(Result) = '' then
      Result := strA
    else
      Result := Result + ' | ' + strA
  end;

  if trim(Result) <> '' then
    Result := ' , ' + Result;
end;

function GetRadiobuttonSpecificStyle(stdstyle: TWxStdStyleSet;rbstyle:TWxrbStyleSet):String;
var
  strA: string;
begin
  Result := GetStdStyleString(stdstyle);
  strA := trim(GetRadioButtonStyleString(rbstyle));
  if strA <> '' then
  begin
    if trim(Result) = '' then
      Result := strA
    else
      Result := Result + ' | ' + strA
  end;

  if trim(Result) <> '' then
    Result := ' , ' + Result;
end;

function GetListboxSpecificStyle(stdstyle: TWxStdStyleSet;lbxstyle:TWxlbxStyleSet):String;
var
  strA: string;
begin
  Result := GetStdStyleString(stdstyle);
  strA := trim(GetListBoxStyleString(lbxstyle));
  if strA <> '' then
  begin
    if trim(Result) = '' then
      Result := strA
    else
      Result := Result + ' | ' + strA
  end;

  if trim(Result) <> '' then
    Result := ' , ' + Result;
end;

function GetGaugeSpecificStyle(stdstyle: TWxStdStyleSet;gagstyle:TWxgagStyleSet):String;
var
  strA: string;
begin
  Result := GetStdStyleString(stdstyle);
  strA := trim(GetGaugeStyleString(gagstyle));
  if strA <> '' then
  begin
    if trim(Result) = '' then
      Result := strA
    else
      Result := Result + ' | ' + strA
  end;

  if trim(Result) <> '' then
    Result := ' , ' + Result;
end;

//function GetScrollbarSpecificStyle(stdstyle: TWxStdStyleSet;scbrstyle:TWxscbrStyleSet):String;
//var
//  strA: string;
//begin
//  Result := GetStdStyleString(stdstyle);
//  strA := trim(GetScrollbarStyleString(scbrstyle));
//  if strA <> '' then
//  begin
//    if trim(Result) = '' then
//      Result := strA
//    else
//      Result := Result + ' | ' + strA
//  end;
//
//  if trim(Result) <> '' then
//    Result := ' , ' + Result;
//end;

function GetSpinButtonSpecificStyle(stdstyle: TWxStdStyleSet;sbtnstyle:TWxsbtnStyleSet):String;
var
  strA: string;
begin
  Result := GetStdStyleString(stdstyle);
  strA := trim(GetSpinButtonStyleString(sbtnstyle));
  if strA <> '' then
  begin
    if trim(Result) = '' then
      Result := strA
    else
      Result := Result + ' | ' + strA
  end;

  if trim(Result) <> '' then
    Result := ' , ' + Result;
end;

function GetSliderSpecificStyle(stdstyle: TWxStdStyleSet;sldrstyle:TWxsldrStyleSet):String;
var
  strA: string;
begin
  Result := GetStdStyleString(stdstyle);
  strA := trim(GetSliderStyleString(sldrstyle));
  if strA <> '' then
  begin
    if trim(Result) = '' then
      Result := strA
    else
      Result := Result + ' | ' + strA
  end;

  if trim(Result) <> '' then
    Result := ' , ' + Result;
end;



//function GetStaticBitmapSpecificStyle(stdstyle: TWxStdStyleSet;sbtmpstyle:TWxsbtmpStyleSet):String;
//var
//  strA: string;
//begin
//  Result := GetStdStyleString(stdstyle);
//  strA := trim(GetStaticBitmapStyleString(sbtmpstyle));
//  if strA <> '' then
//  begin
//    if trim(Result) = '' then
//      Result := strA
//    else
//      Result := Result + ' | ' + strA
//  end;
//
//  if trim(Result) <> '' then
//    Result := ' , ' + Result;
//end;

function GetCalendarCtrlSpecificStyle(stdstyle: TWxStdStyleSet;calctrlstyle:TWxcalctrlStyleSet):String;
var
  strA: string;
begin
  Result := GetStdStyleString(stdstyle);
  strA := trim(GetCalendarCtrlStyleString(calctrlstyle));
  if strA <> '' then
  begin
    if trim(Result) = '' then
      Result := strA
    else
      Result := Result + ' | ' + strA
  end;

  if trim(Result) <> '' then
    Result := ' , ' + Result;
end;

//function GetChoiceSpecificStyle(stdstyle: TWxStdStyleSet;chstyle:TWxchStyleSet):String;
//var
//  strA: string;
//begin
//  Result := GetStdStyleString(stdstyle);
//  strA := trim(GetChoiceStyleString(chstyle));
//  if strA <> '' then
//  begin
//    if trim(Result) = '' then
//      Result := strA
//    else
//      Result := Result + ' | ' + strA
//  end;
//
//  if trim(Result) <> '' then
//    Result := ' , ' + Result;
//end;

function GetHtmlWindowSpecificStyle(stdstyle: TWxStdStyleSet;hwndstyle:TWxhwndStyleSet):String;
var
  strA: string;
begin
  Result := GetStdStyleString(stdstyle);
  strA := trim(GetHtmlWindowStyleString(hwndstyle));
  if strA <> '' then
  begin
    if trim(Result) = '' then
      Result := strA
    else
      Result := Result + ' | ' + strA
  end;

  if trim(Result) <> '' then
    Result := ' , ' + Result;
end;

function GetNotebookSpecificStyle(stdstyle: TWxStdStyleSet;nbxstyle:TWxnbxStyleSet):String;
var
  strA: string;
begin
  Result := GetStdStyleString(stdstyle);
  strA := trim(GetNotebookStyleString(nbxstyle));
  if strA <> '' then
  begin
    if trim(Result) = '' then
      Result := strA
    else
      Result := Result + ' | ' + strA
  end;

  if trim(Result) <> '' then
    Result := ' , ' + Result;
end;

function GetRadioBoxSpecificStyle(stdstyle: TWxStdStyleSet;rbxstyle:TWxrbxStyleSet):String;
var
  strA: string;
begin
  Result := GetStdStyleString(stdstyle);
  strA := trim(GetRadioBoxStyleString(rbxstyle));
  if strA <> '' then
  begin
    if trim(Result) = '' then
      Result := strA
    else
      Result := Result + ' | ' + strA
  end;

  if trim(Result) <> '' then
    Result := ' , ' + Result;
end;

function GetStatusBarSpecificStyle(stdstyle: TWxStdStyleSet;sbrstyle:TWxsbrStyleSet):String;
var
  strA: string;
begin
  Result := GetStdStyleString(stdstyle);
  strA := trim(GetStatusBarStyleString(sbrstyle));
  if strA <> '' then
  begin
    if trim(Result) = '' then
      Result := strA
    else
      Result := Result + ' | ' + strA
  end;

  if trim(Result) <> '' then
    Result := ' , ' + Result;
end;

//function GetToggleButtonSpecificStyle(stdstyle: TWxStdStyleSet;tbtnstyle:TWxtbtnStyleSet):String;
//var
//  strA: string;
//begin
//  Result := GetStdStyleString(stdstyle);
//  strA := trim(GetToggleButtonStyleString(tbtnstyle));
//  if strA <> '' then
//  begin
//    if trim(Result) = '' then
//      Result := strA
//    else
//      Result := Result + ' | ' + strA
//  end;
//
//  if trim(Result) <> '' then
//    Result := ' , ' + Result;
//end;

function GetToolBarSpecificStyle(stdstyle: TWxStdStyleSet;tbrstyle:TWxtbrStyleSet):String;
var
  strA: string;
begin
  Result := GetStdStyleString(stdstyle);
  strA := trim(GetToolBarStyleString(tbrstyle));
  if strA <> '' then
  begin
    if trim(Result) = '' then
      Result := strA
    else
      Result := Result + ' | ' + strA
  end;

  if trim(Result) <> '' then
    Result := ' , ' + Result;
end;

//End here

function SizerAlignmentToStr(SizerVerticalAlignment:TWxSizerVerticalAlignment):String;
begin
    Result:='';
    if SizerVerticalAlignment = wxSZALIGN_TOP then
    begin
        Result:= 'wxALIGN_TOP';
        exit;
    end;
    if SizerVerticalAlignment = wxSZALIGN_BOTTOM then
    begin
        Result:= 'wxALIGN_BOTTOM';
        exit;
    end;

    if SizerVerticalAlignment = wxSZALIGN_CENTER_VERTICAL then
    begin
        Result:= 'wxALIGN_CENTER_VERTICAL';
        exit;
    end;

    if SizerVerticalAlignment = wxSZALIGN_GROW_VERTICAL then
    begin
        Result:= 'wxGROW';
        exit;
    end;

end;

function SizerAlignmentToStr(SizerHorizontalAlignment:TWxSizerHorizontalAlignment):String;
begin
    Result:='';
    if SizerHorizontalAlignment = wxSZALIGN_LEFT then
    begin
        Result:= 'wxALIGN_LEFT';
        exit;
    end;
    if SizerHorizontalAlignment = wxSZALIGN_RIGHT then
    begin
        Result:= 'wxALIGN_RIGHT';
        exit;
    end;

    if SizerHorizontalAlignment = wxSZALIGN_CENTER_HORIZONTAL then
    begin
        Result:= 'wxALIGN_CENTER_HORIZONTAL';
        exit;
    end;

    if SizerHorizontalAlignment = wxSZALIGN_GROW_HORIZONTAL then
    begin
        Result:= 'wxGROW';
        exit;
    end;

end;

function GetStdStyleString(stdStyle: TWxStdStyleSet): string;
var
  I: Integer;
  strLst: TStringList;
begin
  strLst := TStringList.Create;
  if wxSIMPLE_BORDER in stdStyle then
    strLst.add('wxSIMPLE_BORDER');

  if wxDOUBLE_BORDER in stdStyle then
    strLst.add('wxDOUBLE_BORDER');

  if wxSUNKEN_BORDER in stdStyle then
    strLst.add('wxSUNKEN_BORDER');

  if wxRAISED_BORDER in stdStyle then
    strLst.add('wxRAISED_BORDER');

  if wxSTATIC_BORDER in stdStyle then
    strLst.add('wxSTATIC_BORDER');

  if wxTRANSPARENT_WINDOW in stdStyle then
    strLst.add('wxTRANSPARENT_WINDOW');

  if wxNO_3D in stdStyle then
    strLst.add('wxNO_3D');

  if wxTAB_TRAVERSAL in stdStyle then
    strLst.add('wxTAB_TRAVERSAL');

  if wxWANTS_CHARS in stdStyle then
    strLst.add('wxWANTS_CHARS');

  if wxNO_FULL_REPAINT_ON_RESIZE in stdStyle then
    strLst.add('wxNO_FULL_REPAINT_ON_RESIZE');

  if wxVSCROLL in stdStyle then
    strLst.add('wxVSCROLL');

  if wxHSCROLL in stdStyle then
    strLst.add('wxHSCROLL');

  if wxCLIP_CHILDREN in stdStyle then
    strLst.add('wxCLIP_CHILDREN');

  if strLst.Count = 0 then
  begin
    Result := '';
  end
  else
  begin
    for I := 0 to strLst.count - 1 do // Iterate
    begin
      if i <> strLst.count - 1 then
        Result := Result + strLst[i] + ' | '
      else
        Result := Result + ' ' + strLst[i] + ' ';
    end; // for
  end;
  //sendDebug(Result);
  strLst.destroy;
end;

function GetButtonSpecificStyle(stdstyle: TWxStdStyleSet; dlgstyle:
  TWxBtnStyleSet): string;
var
  strA: string;
begin
  Result := GetStdStyleString(stdstyle);
  strA := trim(GetButtonStyleString(dlgstyle));
  if strA <> '' then
  begin
    if trim(Result) = '' then
      Result := strA
    else
      Result := Result + ' | ' + strA
  end;

  if trim(Result) <> '' then
    Result := ' , ' + Result;
end;


function GetLabelSpecificStyle(stdstyle: TWxStdStyleSet; dlgstyle:
  TWxLbStyleSet): string;
var
  strA: string;
begin
  Result := GetStdStyleString(stdstyle);
  strA := trim(GetLbStyleString(dlgstyle));
  if strA <> '' then
  begin
    if trim(Result) = '' then
      Result := strA
    else
      Result := Result + ' | ' + strA
  end;

  if trim(Result) <> '' then
    Result := ' , ' + Result;
end;

function GetDialogSpecificStyle(stdstyle: TWxStdStyleSet; dlgstyle:
  TWxDlgStyleSet): string;
var
  strA: string;
begin
  Result := GetStdStyleString(stdstyle);
  strA := trim(GetDlgStyleString(dlgstyle));
  if strA <> '' then
  begin
    if trim(Result) = '' then
      Result := strA
    else
      Result := Result + ' | ' + strA
  end;
end;

function GetWxIDString(strID: string; intID: LongInt): string;
begin
  if intID > 0 then
  begin
    if trim(strID) = '' then
      Result := '-1'
    else
      Result := strID;
  end
  else
    Result := '-1';
end;

function AlignmentToStr(taPos: TAlignment): string;
begin
  Result := '';
  case taPos of //
    taLeftJustify: Result := 'wxLIST_FORMAT_LEFT';
    taRightJustify: Result := 'wxLIST_FORMAT_RIGHT';
    taCenter: Result := 'wxLIST_FORMAT_CENTER';
  end; // case
end;

procedure ChangeControlZOrder(Sender: TObject; MoveUp: Boolean = True);
var
  I, Curr: Integer;
  Control: TControl;
  List: TList;
begin
  if Sender is TControl then
  begin
    // only components of type TControl and descendends
    // work
    Control := Sender as TControl;
    // has no parent, cannot move ;-)
    if Control.Parent = nil then
      // quit
      Exit;
    // determine position in z-order
    Curr := -1;
    for I := 0 to Pred(Control.Parent.ControlCount) do
      if Control.Parent.Controls[I] = Sender then
      begin
        Curr := I;
        Break;
      end;
    if Curr < 0 then
      // position not found, quit
      Exit;
    List := TList.Create;
    try
      if MoveUp then
      begin
        for I := Curr + 2 to Pred(Control.Parent.ControlCount) do
          // load other controls in group
          List.Add(Control.Parent.Controls[I]);
        Control.BringToFront;
        for I := 0 to Pred(List.Count) do
          // move other controls to front, too
          TControl(List[I]).BringToFront;
      end else begin
        for I := 0 to Curr - 2 do
          // load other controls in group
          List.Add(Control.Parent.Controls[I]);
        Control.SendToBack;
        for I := Pred(List.Count) downto 0 do
          // move other controls to back, too
          TControl(List[I]).SendToBack;
      end;
    finally
      List.Free;
    end;
  end;
end;

function GetXPMFromTPicture(XPMName:String;delphiBitmap:TBitmap):String;
var
   iWidth: Integer;
   iHeight: Integer;
   xpos, ypos, palindex, cindex, cpp: Integer;
   cp: PChar;
   pixc: Integer;
   outline: array[0..800] of Char;
   usechrs: array[0..64] of Char;
   rval: Real;
   ccol, tcol: TColor;
   lcol: ^TColor;
   image: ^Integer;
   cpos: ^Integer;
   pal: TList;
   found: Boolean;
   label Finish1;
function pow(base: Integer; index: Integer): Integer;
var
   retval: Integer;
   ittr: Integer;
begin
retval:=1;
for ittr:=1 to index do retval:=retval*base;
pow:=retval;
end;

begin

    Result:='';
begin
//   Form1.Enabled:=False;
//   Form2.Gauge1.Progress:=0;
//   Form2.Show;
   StrPCopy(usechrs,' 0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&#');
   pal:=TList.Create;                    { Create TList to form our palette }
   iWidth:=delphiBitmap.Width;
   iHeight:=delphiBitmap.Height;
   if iWidth>180 then iWidth:=180;
   if iHeight>180 then iHeight:=180;
   GetMem(image,SizeOf(Integer)*iWidth*iHeight); { Allocate space for image }
                        { Note: Maximum of 65,528 bytes - 2 bytes per pixel }
   cpos:=@image^;     { This will be a pointer to current position in image }
   for ypos:=0 to iHeight-1 do begin
      for xpos:=0 to iWidth-1 do begin
         ccol:=delphiBitmap.Canvas.Pixels[xpos,ypos];
         found:=False;
         for palindex:=0 to pal.Count-1 do begin { Search palette for color }
            tcol:=TColor(pal.Items[palindex]^);
            if tcol=ccol then begin                             { Found it! }
               found:=True;
               cindex:=palindex;        { Remember it's position in palette }
               break;
            end;
         end;
         if not found then begin             { Add new color to our palette }
            New(lcol);
            lcol^:=ccol;
            pal.Add(lcol);
            cindex:=pal.Count-1;
         end;
         cpos^:=cindex;                { Store palette index for this pixel }
         Inc(cpos);                                 { Move on to next pixel }
      end;

//      Form2.Gauge1.Progress:=((ypos+1)*100) div iHeight;
//      Application.ProcessMessages;
//      If Form2.Cancelled then goto Finish1;     { We have been cancelled! }

   end;

   //AssignFile(F,SaveDialog1.Filename);
   //Rewrite(F);
   rval:=ln(pal.Count)/ln(64);
   cpp:=trunc(rval);
   if(cpp<>rval) then Inc(cpp);
   //Writeln(F,'/* XPM */');
   Result:=Result+'/* '+XPMName+' XPM */'+#13;
   StrFmt(outline,'static char *%s',[XPMName]);
   cp:=StrScan(outline,'.');
   if cp<>nil then cp[0]:=#0;
   StrCat(outline,'_XPM[]={');
   //Writeln(F,outline);
   Result:=Result+outline+#13;
   StrFmt(outline,'"%d %d %d %d",',[iWidth,iHeight,pal.Count,cpp]);
   //Writeln(F,outline);
   Result:=Result+outline+#13;
   for palindex:=0 to pal.Count-1 do begin
      ccol:=TColor(pal.Items[palindex]^);
      ccol:=ccol mod (256*256*256);
      StrFmt(outline,'"      c #%s%s%s",',[IntToHex(ccol mod 256,2),
      IntToHex((ccol div 256) mod 256,2),IntToHex(ccol div (256*256),2)]);
      cindex:=palindex;
      for pixc:=1 to cpp do begin
         outline[pixc]:=usechrs[cindex div pow(64,cpp-pixc)];
         cindex:=cindex mod pow(64,cpp-pixc);
      end;
      //Writeln(F,outline);
      Result:=Result+outline+#13;
   end;
   cpos:=@image^;
   for ypos:=0 to iHeight-1 do begin
      StrPCopy(outline,'"');
      for xpos:=0 to iWidth-1 do begin
         cindex:=cpos^;
         for pixc:=1 to cpp do begin
            outline[xpos*cpp+pixc]:=usechrs[cindex div pow(64,cpp-pixc)];
            cindex:=cindex mod pow(64,cpp-pixc);
         end;
         Inc(cpos);
      end;
      outline[cpp*(xpos+1)+1]:=#0;
      if ypos<iHeight-1 then StrCat(outline,'",') else StrCat(outline,'"};');
      //Writeln(F,outline);
      Result:=Result+outline+#13;
   end;
   //Finish2:
   //CloseFile(F);

   Finish1:
   FreeMem(image,SizeOf(Integer)*iWidth*iHeight);
   for palindex:=0 to pal.Count-1 do Dispose(pal.Items[palindex]);
   pal.Free;
//   Form2.Hide;
//   Form1.Enabled:=True;
end;
end;

function IcoToBmp(Icon : TIcon):TBitmap;
begin
   Result := TBitmap.Create;
   Result.Width := Icon.Width;
   Result.Height := Icon.Height;
   Result.Canvas.Draw(0, 0, Icon ) ;
end;

//-------------------------------------------------------------------------------

procedure TJvInspectorListItemsItem.Edit;
begin

end;

function TJvInspectorListItemsItem.GetDisplayValue: string;
begin
  //
end;

procedure TJvInspectorListItemsItem.SetDisplayValue(const Value: string);
begin
  //
end;

procedure TJvInspectorListItemsItem.SetFlags(const Value: TInspectorItemFlags);
var
  NewValue: TInspectorItemFlags;
begin
  NewValue := Value + [iifEditButton];
  inherited SetFlags(NewValue);
end;

class procedure TJvInspectorListItemsItem.RegisterAsDefaultItem;
begin
  with TJvCustomInspectorData.ItemRegister do
  begin
    if IndexOf(Self) = -1 then
      Add(TJvInspectorTypeInfoRegItem.Create(Self, TypeInfo(TListItems)));
  end;
end;
//-------------------------------------------------------------------------------

procedure TJvInspectorListColumnsItem.Edit;
var
  ListviewForm: TListviewForm;
  i: Integer;
  lstColumn: TListColumn;
begin

  ListviewForm := TListviewForm.Create(GetParentForm(Inspector));
  try
    ListviewForm.LstViewObj.Columns.Clear;
    for i := 0 to
      TListView(TJvInspectorPropData(Self.GetData()).Instance).Columns.Count - 1
      do
    begin
      lstColumn := ListviewForm.LstViewObj.Columns.Add;
      lstColumn.Caption :=
        TListView(TJvInspectorPropData(Self.GetData()).Instance).Columns[i].Caption;
      lstColumn.Width :=
        TListView(TJvInspectorPropData(Self.GetData()).Instance).Columns[i].Width;
      lstColumn.Alignment :=
        TListView(TJvInspectorPropData(Self.GetData()).Instance).Columns[i].Alignment;
    end;
    ListviewForm.fillListInfo;

    if ListviewForm.ShowModal <> mrOK then
    begin
      Exit;
    end
    else
    begin
      TListView(TJvInspectorPropData(Self.GetData()).Instance).Columns.Clear;
      for i := 0 to ListviewForm.LstViewObj.Columns.Count - 1 do
      begin
        lstColumn :=
          TListView(TJvInspectorPropData(Self.GetData()).Instance).Columns.Add;
        lstColumn.Caption := ListviewForm.LstViewObj.Columns[i].Caption;
        lstColumn.Width := ListviewForm.LstViewObj.Columns[i].Width;
        lstColumn.Alignment := ListviewForm.LstViewObj.Columns[i].Alignment;
      end;
    end;

  finally
    ListviewForm.Destroy;
  end;

end;

function TJvInspectorListColumnsItem.GetDisplayValue: string;
begin
  Result := 'Edit Columns';
end;

procedure TJvInspectorListColumnsItem.SetDisplayValue(const Value: string);
begin
  //
end;

procedure TJvInspectorListColumnsItem.SetFlags(const Value:
  TInspectorItemFlags);
var
  NewValue: TInspectorItemFlags;
begin
  NewValue := Value + [iifEditButton];
  inherited SetFlags(NewValue);
end;

class procedure TJvInspectorListColumnsItem.RegisterAsDefaultItem;
begin
  with TJvCustomInspectorData.ItemRegister do
  begin
    if IndexOf(Self) = -1 then
      Add(TJvInspectorTypeInfoRegItem.Create(Self, TypeInfo(TListColumns)));
  end;
end;
//-------------------------------------------------------------------------------

procedure TJvInspectorTreeNodesItem.Edit;
begin
  ShowMessage('TJvInspectorTreeNodesItem.Edit');
end;

function TJvInspectorTreeNodesItem.GetDisplayValue: string;
begin
  //
end;

procedure TJvInspectorTreeNodesItem.SetDisplayValue(const Value: string);
begin
  //
end;

procedure TJvInspectorTreeNodesItem.SetFlags(const Value: TInspectorItemFlags);
var
  NewValue: TInspectorItemFlags;
begin
  NewValue := Value + [iifEditButton];
  inherited SetFlags(NewValue);
end;

class procedure TJvInspectorTreeNodesItem.RegisterAsDefaultItem;
begin
  with TJvCustomInspectorData.ItemRegister do
  begin
    if IndexOf(Self) = -1 then
      Add(TJvInspectorTypeInfoRegItem.Create(Self, TypeInfo(TTreeNodes)));
  end;
end;
//-------------------------------------------------------------------------------

procedure TJvInspectorBitmapItem.Edit;
var
  PictureEdit: TPictureEdit;
  picObj:Tpicture;
begin

  PictureEdit := TPictureEdit.Create(GetParentForm(Inspector));
  PictureEdit.Image1.Picture.Assign(TWxStaticBitmap(TJvInspectorPropData(Self.GetData()).Instance).picture);
  try

    if PictureEdit.ShowModal <> mrOK then
      Exit
    else
    begin
        picObj:=TPicture.Create;
        //PictureEdit.Image1.Picture.
        picObj.Assign(PictureEdit.Image1.Picture);
        TWxStaticBitmap(TJvInspectorPropData(Self.GetData()).Instance).picture:=picObj;
    end;

  finally
    PictureEdit.Destroy;
  end;
end;

function TJvInspectorBitmapItem.GetDisplayValue: string;
begin
  //
end;

procedure TJvInspectorBitmapItem.SetDisplayValue(const Value: string);
begin
  //
end;

procedure TJvInspectorBitmapItem.SetFlags(const Value: TInspectorItemFlags);
var
  NewValue: TInspectorItemFlags;
begin
  NewValue := Value + [iifEditButton];
  inherited SetFlags(NewValue);
end;

class procedure TJvInspectorBitmapItem.RegisterAsDefaultItem;
begin
  with TJvCustomInspectorData.ItemRegister do
  begin
    if IndexOf(Self) = -1 then
      Add(TJvInspectorTypeInfoRegItem.Create(Self, TypeInfo(TPicture)));
  end;
end;
//------------------------------------------------------------------------------
procedure TJvInspectorIconItem.Edit;
var
  PictureEdit: TPictureEdit;
begin

  PictureEdit := TPictureEdit.Create(GetParentForm(Inspector));
  //PictureEdit.Image1.Picture.Assign(TfrmNewForm(TJvInspectorPropData(Self.GetData()).Instance)..picture);
  try

    if PictureEdit.ShowModal <> mrOK then
      Exit
//    else
//        TWxStaticBitmap(TJvInspectorPropData(Self.GetData()).Instance).picture.Assign(PictureEdit.Image1.Picture);

  finally
    PictureEdit.Destroy;
  end;
end;

function TJvInspectorIconItem.GetDisplayValue: string;
begin
  //
end;

procedure TJvInspectorIconItem.SetDisplayValue(const Value: string);
begin
  //
end;

procedure TJvInspectorIconItem.SetFlags(const Value: TInspectorItemFlags);
var
  NewValue: TInspectorItemFlags;
begin
  NewValue := Value + [iifEditButton];
  inherited SetFlags(NewValue);
end;

class procedure TJvInspectorIconItem.RegisterAsDefaultItem;
begin
  with TJvCustomInspectorData.ItemRegister do
  begin
    if IndexOf(Self) = -1 then
      Add(TJvInspectorTypeInfoRegItem.Create(Self, TypeInfo(TIcon)));
  end;
end;

end.
