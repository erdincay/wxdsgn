{
Todo:
Deffered:
wxSingleChoiceDialog,TWxTextEntryDialog
}
     
{ ****************************************************************** }
{                                                                    }
{   VCL component wxUtils                                          }
{                                                                    }
{   Code generated by Component Create for Delphi                    }
{                                                                    }
{   on 26 Oct 2003 at 1:37                                           }
{                                                                    }
{   Copyright © 2003 by Guru Kathiresan                              }
{                                                                    }
{ ****************************************************************** }

{*
  todo:
  1) StaticText needs Style
  2)Scrollbar need to have the vertical and horizontal poperties
  
*}
unit WxUtils;

interface

uses WinTypes, WinProcs, Messages, SysUtils, StrUtils,Classes, Controls,
  Forms, Graphics, Stdctrls, Dialogs, ComCtrls, ExtCtrls,dmListview,
  UPicEdit,xprocs,DbugIntf,TypInfo,Menus,UStatusbar,JvInspector;

const
  IID_IWxComponentInterface: TGUID = '{624949E8-E46C-4EF9-BADA-BC85325165B3}';
  IID_IWxDialogNonInsertableInterface: TGUID = '{AED02C7A-E2E5-4BFD-AF42-080D4D07027C}';
  IID_IWxToolBarInsertableInterface: TGUID =  '{5B1BDAFE-76E9-4C84-A694-0D99C6D17BC4}';
  IID_IWxToolBarNonInsertableInterface: TGUID =  '{6A81CF27-1269-4BD6-9C5D-16F88293B66B}';
  IID_IWxWindowInterface: TGUID =  '{3164E818-E7FA-423B-B342-C89D8AF23617}';
  IID_IWxContainerAndSizerInterface: TGUID =  '{2C8662AE-7C13-4C96-81F6-32B195ABE1C9}';
  IDD_IWxContainerInterface: TGUID =  '{1149F8B7-04D7-466F-96FA-74C7383F2EFD}';
  IID_IWxToolBarInterface: TGUID =  '{518BF32C-F961-4148-B506-F60A9D21AD15}';
  IDD_IWxStatusBarInterface: TGUID =  '{4E9800A3-D948-4F48-A109-7F81B69ECAD3}';
  IDD_IWxCollectionInterface: TGUID =  '{DC147ECD-47A2-4334-A113-CD9B794CBCE1}';
type

  TWxPoint = class(TComponent)
  private
        FX:Integer;
        FY:Integer;
   published
        property X:Integer read FX write FX default 0;
        property Y:Integer read FY write FY default 0;
  end;

TWxSizerVerticalAlignment = (wxSZALIGN_TOP,wxSZALIGN_BOTTOM,wxSZALIGN_CENTER_VERTICAL,wxSZALIGN_GROW_VERTICAL);
TWxSizerHorizontalAlignment = (wxSZALIGN_LEFT,wxSZALIGN_RIGHT,wxSZALIGN_CENTER_HORIZONTAL,wxSZALIGN_GROW_HORIZONTAL);
TWxControlOrientation = (wxControlVertical,wxControlHorizontal,wxControlNone);
TWxGridSelection = (wxGridSelectCells,wxGridSelectColumns,wxGridSelectRows);
TWxDesignerType = (dtWxDialog,dtWxFrame,dtWxWizard);

  IWxComponentInterface = interface ['{624949E8-E46C-4EF9-BADA-BC85325165B3}']
    function GenerateEnumControlIDs: string;  
    function GenerateControlIDs: string;
    function GenerateEventTableEntries(CurrClassName: string): string;
    function GenerateGUIControlCreation: string;
    function GenerateGUIControlDeclaration: string;
    function GenerateHeaderInclude: string;
    function GenerateImageInclude: string;
    function GetIDName: string;
    function GetIDValue: LongInt;
    function GetPropertyList: TStringList;
    function GetEventList: TStringList;
    function GetWxClassName: string;
    procedure SetIDName(IDName: string);
    procedure SetIDValue(IDValue: longInt);
    procedure SetWxClassName(wxClassName: string);
    function GetParameterFromEventName(EventName: string): string;
    function GetTypeFromEventName(EventName: string): string;
    procedure SaveControlOrientation(ControlOrientation:TWxControlOrientation);
    function GetStretchFactor:Integer;
    procedure SetStretchFactor(intValue:Integer);

    function GetFGColor:string;
    procedure SetFGColor(strValue:String);

    function GetBGColor:string;
    procedure SetBGColor(strValue:String);

//    function GetVerticalAlignment: TWxSizerVerticalAlignment;
//    function GetHorizonalAlignment: TWxSizerHorizonalAlignment;

  end;

  IWxDialogNonInsertableInterface = interface ['{AED02C7A-E2E5-4BFD-AF42-080D4D07027C}']
    //procedure DummySizerNonInsertableInterfaceProcedure;
  end;

  IWxToolBarInsertableInterface = interface  ['{5B1BDAFE-76E9-4C84-A694-0D99C6D17BC4}']
    //procedure DummyToolBarInsertableInterfaceProcedure;
  end;

    IWxToolBarNonInsertableInterface = interface ['{6A81CF27-1269-4BD6-9C5D-16F88293B66B}']
        //procedure DummyToolBarNonInsertableInterfaceProcedure;
    end;

    IWxWindowInterface = interface ['{3164E818-E7FA-423B-B342-C89D8AF23617}']
        //
    end;

    IWxContainerAndSizerInterface = interface ['{2C8662AE-7C13-4C96-81F6-32B195ABE1C9}']
        function GenerateLastCreationCode:String;
    end;

    IWxContainerInterface = interface ['{1149F8B7-04D7-466F-96FA-74C7383F2EFD}']
    end;

    IWxToolBarInterface= interface ['{518BF32C-F961-4148-B506-F60A9D21AD15}']
    end;

    IWxStatusBarInterface= interface ['{4E9800A3-D948-4F48-A109-7F81B69ECAD3}']
    end;

    IWxCollectionInterface= interface ['{DC147ECD-47A2-4334-A113-CD9B794CBCE1}']
        function GetMaxID:Integer;
    end;



    TWxStdStyleItem = (wxSIMPLE_BORDER, wxDOUBLE_BORDER, wxSUNKEN_BORDER,
                       wxRAISED_BORDER, wxSTATIC_BORDER, wxTRANSPARENT_WINDOW, wxNO_3D,
                       wxTAB_TRAVERSAL, wxWANTS_CHARS, wxNO_FULL_REPAINT_ON_RESIZE, wxVSCROLL,
                       wxHSCROLL, wxCLIP_CHILDREN);
    TWxStdStyleSet = set of TWxStdStyleItem;

    TWxBtnStyleItem = (wxBU_LEFT, wxBU_TOP, wxBU_RIGHT, wxBU_BOTTOM,
                        wxBU_EXACTFIT);
    TWxBtnStyleSet = set of TWxBtnStyleItem;

    TWxLbStyleItem = (wxALIGN_LEFT, wxALIGN_RIGHT, wxALIGN_CENTRE,
                        wxST_NO_AUTORESIZE);
    TWxLbStyleSet = set of TWxLbStyleItem;

    TWxEdtGeneralStyleItem = (wxTE_PROCESS_ENTER, wxTE_PROCESS_TAB, wxTE_PASSWORD,
                            wxTE_READONLY, wxTE_RICH, wxTE_RICH2, wxTE_AUTO_URL, wxTE_NOHIDESEL,
                            wxTE_DONTWRAP, wxTE_LINEWRAP, wxTE_WORDWRAP,wxTE_MULTILINE);
    TWxEdtGeneralStyleSet = set of TWxEdtGeneralStyleItem;

    TWxEdtAlignmentStyleItem = (wxTE_LEFT, wxTE_CENTRE, wxTE_RIGHT);
    TWxEdtAlignmentStyleSet = set of TWxEdtAlignmentStyleItem;

    TWxDlgStyleItem = (wxCAPTION, wxRESIZE_BORDER, wxSYSTEM_MENU, wxTHICK_FRAME,
                        wxSTAY_ON_TOP, wxDIALOG_NO_PARENT, wxDIALOG_EX_CONTEXTHELP, wxMINIMIZE_BOX,
                        wxMAXIMIZE_BOX,wxCLOSE_BOX);
    TWxDlgStyleSet = set of TWxDlgStyleItem;

    //newly Added
    TWxCmbStyleItem = (wxCB_SIMPLE, wxCB_DROPDOWN, wxCB_READONLY, wxCB_SORT);
    TWxCmbStyleSet = set of TWxCmbStyleItem;

    TWxLBxStyleItem = (wxLB_SINGLE, wxLB_MULTIPLE, wxLB_EXTENDED, wxLB_HSCROLL,
                        wxLB_ALWAYS_SB, wxLB_NEEDED_SB, wxLB_SORT);
    TWxLBxStyleSet = set of TWxLBxStyleItem;


    TWxCBxStyleItem = (wxCHK_2STATE ,wxCHK_3STATE ,wxCHK_ALLOW_3RD_STATE_FOR_USER );
    TWxCBxStyleSet = set of TWxCBxStyleItem;

    TWxRBStyleItem = (wxRB_GROUP, wxRB_SINGLE);
    TWxRBStyleSet = set of TWxRBStyleItem;

    TWxgagStyleItem = (wxGA_SMOOTH);
    TWxgagStyleSet = Set of TWxgagStyleItem;


    TWxsbtnStyleItem = (wxSP_ARROW_KEYS , wxSP_WRAP,wxSP_HORIZONTAL,wxSP_VERTICAL );
    TWxsbtnStyleSet = Set of TWxsbtnStyleItem ;


    TWxsldrStyleItem = (wxSL_HORIZONTAL,wxSL_VERTICAL, wxSL_AUTOTICKS , wxSL_LABELS , wxSL_LEFT ,wxSL_RIGHT ,wxSL_TOP ,wxSL_SELRANGE );
    TWxsldrStyleSet = Set of TWxsldrStyleItem ;

    //TWxslnStyleSet = Set of TWxslnStyleItem ;
    //TWxsbtmpStyleSet = Set of TWxsbtmpStyleItem ;
    //TWxsbxStyleSet = Set of TWxsbxStyleItem ;
    TWxcalctrlStyleItem = (wxCAL_SUNDAY_FIRST ,wxCAL_MONDAY_FIRST ,wxCAL_SHOW_HOLIDAYS ,
                       wxCAL_NO_YEAR_CHANGE ,wxCAL_NO_MONTH_CHANGE ,wxCAL_SHOW_SURROUNDING_WEEKS,
                       wxCAL_SEQUENTIAL_MONTH_SELECTION);
    TWxcalctrlStyleSet = Set of TWxcalctrlStyleItem ;



    TWxnbxStyleItem = (wxNB_LEFT , wxNB_RIGHT ,wxNB_BOTTOM ,wxNB_FIXEDWIDTH ,wxNB_MULTILINE );
    TWxnbxStyleSet = Set of TWxnbxStyleItem ;


    TWxrbxStyleItem = (wxRA_SPECIFY_ROWS ,wxRA_SPECIFY_COLS );
    TWxrbxStyleSet = Set of TWxrbxStyleItem ;


    TWxsbrStyleItem = (wxST_SIZEGRIP );
    TWxsbrStyleSet = Set of TWxsbrStyleItem ;

    TWxtbrStyleItem = (wxTB_FLAT , wxTB_DOCKABLE,wxTB_HORIZONTAL,wxTB_VERTICAL,wxTB_TEXT ,
                    wxTB_NOICONS , wxTB_NODIVIDER, wxTB_NOALIGN ,wxTB_HORZ_LAYOUT,
                  wxTB_HORZ_TEXT );
    TWxtbrStyleSet = Set of TWxtbrStyleItem ;


    TWxLVStyleItem = (wxLC_LIST, wxLC_REPORT, wxLC_VIRTUAL, wxLC_ICON,
                      wxLC_SMALL_ICON, wxLC_ALIGN_TOP, wxLC_ALIGN_LEFT, wxLC_AUTOARRANGE,
                      wxLC_USER_TEXT, wxLC_EDIT_LABELS, wxLC_NO_HEADER, wxLC_SINGLE_SEL,
                      wxLC_SORT_ASCENDING, wxLC_SORT_DESCENDING, wxLC_HRULES, wxLC_VRULES);
    TWxLVStyleSet = set of TWxLVStyleItem;

    TWxTVStyleItem = (wxTR_EDIT_LABELS, wxTR_NO_BUTTONS, wxTR_HAS_BUTTONS,
                        wxTR_TWIST_BUTTONS, wxTR_NO_LINES, wxTR_FULL_ROW_HIGHLIGHT,
                        wxTR_LINES_AT_ROOT, wxTR_HIDE_ROOT, wxTR_ROW_LINES,
                        wxTR_HAS_VARIABLE_ROW_HEIGHT, wxTR_SINGLE, wxTR_MULTIPLE, wxTR_EXTENDED,
                        wxTR_DEFAULT_STYLE);
    TWxTVStyleSet = set of TWxTVStyleItem;

    TWxScrWinStyleItem = (wxRETAINED);
    TWxScrWinStyleSet = Set of TWxScrWinStyleItem ;

    TWxHtmlWinStyleItem = (wxHW_SCROLLBAR_NEVER,wxHW_SCROLLBAR_AUTO,wxHW_NO_SELECTION);
    TWxHtmlWinStyleSet = Set of TWxHtmlWinStyleItem ;

    TWxSplitterWinStyleItem = (wxSP_3D,wxSP_3DSASH ,wxSP_3DBORDER,wxSP_BORDER,wxSP_NOBORDER,wxSP_NO_XP_THEME,wxSP_PERMIT_UNSPLIT,wxSP_LIVE_UPDATE);
    TWxSplitterWinStyleSet = Set of TWxSplitterWinStyleItem ;

    TWxMenuItemStyleItem = (wxMnuItm_Normal,wxMnuItm_Separator,wxMnuItm_Radio,wxMnuItm_Check);

    TWxToolbottonItemStyleItem = (wxITEM_NORMAL,wxITEM_RADIO,wxITEM_CHECK);

    TWxFindReplaceFlagItem = (wxFR_DOWN,wxFR_WHOLEWORD, wxFR_MATCHCASE);
    TWxFindReplaceFlagSet = Set of TWxFindReplaceFlagItem;

    TwxFindReplaceDialogStyleItem = (wxFR_REPLACEDIALOG ,wxFR_NOUPDOWN, wxFR_NOMATCHCASE,wxFR_NOWHOLEWORD);
    TwxFindReplaceDialogStyleSet = Set of TwxFindReplaceDialogStyleItem;



//End of Control Styles

  TWxFileDialogType = (wxOPEN, wxSAVE);

  TWxFileDialogStyleItem = (wxHIDE_READONLY, wxOVERWRITE_PROMPT, wxMULTIPLE,
    wxCHANGE_DIR);
  TWxFileDialogStyleSet = set of TWxFileDialogStyleItem;

  TWxDirDialogStyleItem = (wxDD_NEW_DIR_BUTTON);
  TWxDirDialogStyleSet = set of TWxDirDialogStyleItem;

  TWxProgressDialogStyleItem = (wxPD_APP_MODAL,wxPD_AUTO_HIDE,wxPD_CAN_ABORT,wxPD_ELAPSED_TIME,wxPD_ESTIMATED_TIME,wxPD_REMAINING_TIME);
  TWxProgressDialogStyleSet = set of TWxProgressDialogStyleItem ;

  TWxMessageDialogStyleItem = (wxOK,wxCANCEL,wxYES_NO ,wxYES_DEFAULT,wxNO_DEFAULT,wxICON_EXCLAMATION,wxICON_HAND,wxICON_ERROR ,wxICON_QUESTION , wxICON_INFORMATION );
  TWxMessageDialogStyleSet = set of TWxMessageDialogStyleItem ;

  TWxPaperSizeItem = (wxPAPER_NONE,wxPAPER_LETTER,wxPAPER_LEGAL,wxPAPER_A4,wxPAPER_CSHEET, wxPAPER_DSHEET,wxPAPER_ESHEET,
                    wxPAPER_LETTERSMALL, wxPAPER_TABLOID,wxPAPER_LEDGER, wxPAPER_STATEMENT, wxPAPER_EXECUTIVE, wxPAPER_A3,
                    wxPAPER_A4SMALL, wxPAPER_A5, wxPAPER_B4, wxPAPER_B5, wxPAPER_FOLIO, wxPAPER_QUARTO, wxPAPER_10X14, wxPAPER_11X17,
                    wxPAPER_NOTE, wxPAPER_ENV_9, wxPAPER_ENV_10, wxPAPER_ENV_11, wxPAPER_ENV_12, wxPAPER_ENV_14, wxPAPER_ENV_DL,wxPAPER_ENV_C5,
                    wxPAPER_ENV_C3,wxPAPER_ENV_C4,wxPAPER_ENV_C6,wxPAPER_ENV_C65,wxPAPER_ENV_B4,wxPAPER_ENV_B5, wxPAPER_ENV_B6, wxPAPER_ENV_ITALY,
                    wxPAPER_ENV_MONARCH, wxPAPER_ENV_PERSONAL, wxPAPER_FANFOLD_US, wxPAPER_FANFOLD_STD_GERMAN, wxPAPER_FANFOLD_LGL_GERMAN);


//Sizer orientation
TWxSizerOrientation = (wxVertical,wxHorizontal);

TWxColorString = class
    public
        FstrColorValue:String;
    published
        property strColorValue:String read FstrColorValue write FstrColorValue;
end;

  TWxJvInspectorTStringsItem = class(TJvCustomInspectorItem)
  protected
    procedure ContentsChanged(Sender: TObject);
    function GetDisplayValue: string; override;
    procedure Edit; override;
    procedure SetDisplayValue(const Value: string); override;
    procedure SetFlags(const Value: TInspectorItemFlags); override;
  public
    constructor Create(const AParent: TJvCustomInspectorItem;
      const AData: TJvCustomInspectorData); override;
  public
    class procedure RegisterAsDefaultItem;
  end;

  TJvInspectorColorEditItem = class(TJvCustomInspectorItem)
  protected
    procedure Edit; override;

    function GetDisplayValue: string; override;
    procedure SetDisplayValue(const Value: string); override;
    procedure SetFlags(const Value: TInspectorItemFlags); override;
  public
    class procedure RegisterAsDefaultItem;
  end;


  TJvInspectorListItemsItem = class(TJvCustomInspectorItem)
  protected
    procedure Edit; override;

    function GetDisplayValue: string; override;
    procedure SetDisplayValue(const Value: string); override;
    procedure SetFlags(const Value: TInspectorItemFlags); override;
  public
    class procedure RegisterAsDefaultItem;
  end;

  TJvInspectorListColumnsItem = class(TJvCustomInspectorItem)
  protected
    procedure Edit; override;

    function GetDisplayValue: string; override;
    procedure SetDisplayValue(const Value: string); override;
    procedure SetFlags(const Value: TInspectorItemFlags); override;
  public
    class procedure RegisterAsDefaultItem;
  end;

  TJvInspectorStatusBarItem = class(TJvCustomInspectorItem)
  protected
    procedure Edit; override;

    function GetDisplayValue: string; override;
    procedure SetDisplayValue(const Value: string); override;
    procedure SetFlags(const Value: TInspectorItemFlags); override;
  public
    class procedure RegisterAsDefaultItem;
  end;

  TJvInspectorTreeNodesItem = class(TJvCustomInspectorItem)
  protected
    procedure Edit; override;

    function GetDisplayValue: string; override;
    procedure SetDisplayValue(const Value: string); override;
    procedure SetFlags(const Value: TInspectorItemFlags); override;
  public
    class procedure RegisterAsDefaultItem;
  end;

  TJvInspectorBitmapItem = class(TJvCustomInspectorItem)
  protected
    procedure Edit; override;

    function GetDisplayValue: string; override;
    procedure SetDisplayValue(const Value: string); override;
    procedure SetFlags(const Value: TInspectorItemFlags); override;
  public
    class procedure RegisterAsDefaultItem;
  end;

  TJvInspectorMyFontItem = class(TJvCustomInspectorItem)
  protected
    procedure Edit; override;

    function GetDisplayValue: string; override;
    procedure SetDisplayValue(const Value: string); override;
    procedure SetFlags(const Value: TInspectorItemFlags); override;
  public
    class procedure RegisterAsDefaultItem;
  end;

  TJvInspectorMenuItem = class(TJvCustomInspectorItem)
  protected
    procedure Edit; override;

    function GetDisplayValue: string; override;
    procedure SetDisplayValue(const Value: string); override;
    procedure SetFlags(const Value: TInspectorItemFlags); override;
  public
    class procedure RegisterAsDefaultItem;
  end;


function GetGridSelectionToString(grdsel:TWxGridSelection):String;
function GetStdStyleString(stdStyle: TWxStdStyleSet): string;
function GetComboxBoxStyleString(stdStyle: TWxCmbStyleSet): string;
function GetCheckboxStyleString(stdStyle:TWxcbxStyleSet):String;
function GetTreeviewStyleString(stdStyle:TWxTVStyleSet):String;
function GetRadiobuttonStyleString(stdStyle:TWxrbStyleSet):String;
function GetListboxStyleString(stdStyle:TWxlbxStyleSet):String;
function GetGaugeStyleString(stdStyle:TWxgagStyleSet):String;
function GetScrollbarStyleString(stdStyle:TWxsbrStyleSet):String;
function GetSpinButtonStyleString(stdStyle:TWxsbtnStyleSet):String;
function GetSliderStyleString(stdStyle:TWxsldrStyleSet):String;
//function GetStaticBoxStyleString(stdStyle:TWxsbxStyleSet):String;
//function GetStaticLineStyleString(stdStyle:TWxslnStyleSet):String;
//function GetStaticBitmapStyleString(stdStyle:TWxsbtmpStyleSet):String;
function GetCalendarCtrlStyleString(stdStyle:TWxcalctrlStyleSet):String;
//function GetCheckListBoxStyleString(stdStyle:TWxcklbxStyleSet):String;
//function GetChoiceStyleString(stdStyle:TWxchStyleSet):String;
function GetNotebookStyleString(stdStyle:TWxnbxStyleSet):String;
function GetRadioBoxStyleString(stdStyle:TWxrbxStyleSet):String;
function GetStatusBarStyleString(stdStyle:TWxsbrStyleSet):String;
//function GetToggleButtonStyleString(stdStyle:TWxtbtnStyleSet):String;
function GetToolBarStyleString(stdStyle:TWxtbrStyleSet):String;
function GetScrolledWindowStyleString(stdStyle:TWxScrWinStyleSet):String;
function GetHtmlWindowStyleString(stdStyle:TWxHtmlWinStyleSet):String;
function GetSplitterWindowStyleString(stdStyle:TWxSplitterWinStyleSet):String;
function GetFileDialogStyleString(stdStyle:TWxFileDialogStyleSet):String;
function GetDirDialogStyleString(stdStyle:TWxDirDialogStyleSet):String;
function GetProgressDialogStyleString(stdStyle:TWxProgressDialogStyleSet):String;
function GetMessageDialogStyleString(stdStyle:TWxMessageDialogStyleSet):String;
function GetFindReplaceFlagString(stdstyle: TWxFindReplaceFlagSet):String;
function GetFindReplaceDialogStyleString(stdstyle: TWxFindReplaceDialogStyleSet):String;


//Todo :
function GetCheckboxSpecificStyle(stdstyle: TWxStdStyleSet;cbxstyle:TWxcbxStyleSet):String;
function GetTreeviewSpecificStyle(stdstyle: TWxStdStyleSet;tvstyle:TWxTvStyleSet):String;
function GetRadiobuttonSpecificStyle(stdstyle: TWxStdStyleSet;rbstyle:TWxrbStyleSet):String;
function GetListboxSpecificStyle(stdstyle: TWxStdStyleSet;lbxstyle:TWxlbxStyleSet):String;
function GetGaugeSpecificStyle(stdstyle: TWxStdStyleSet;gagstyle:TWxgagStyleSet):String;
function GetScrollbarSpecificStyle(stdstyle: TWxStdStyleSet;scbrstyle:TWxsbrStyleSet):String;
function GetSpinButtonSpecificStyle(stdstyle: TWxStdStyleSet;sbtnstyle:TWxsbtnStyleSet):String;
function GetSliderSpecificStyle(stdstyle: TWxStdStyleSet;sldrstyle:TWxsldrStyleSet):String;
//function GetStaticBoxSpecificStyle(stdstyle: TWxStdStyleSet;sbxstyle:TWxsbxStyleSet):String;
//function GetStaticLineSpecificStyle(stdstyle: TWxStdStyleSet;slnstyle:TWxslnStyleSet):String;
//function GetStaticBitmapSpecificStyle(stdstyle: TWxStdStyleSet;sbtmpstyle:TWxsbtmpStyleSet):String;
function GetCalendarCtrlSpecificStyle(stdstyle: TWxStdStyleSet;calctrlstyle:TWxcalctrlStyleSet):String;
//function GetCheckListBoxSpecificStyle(stdstyle: TWxStdStyleSet;cklbxstyle:TWxcklbxStyleSet):String;
//function GetChoiceSpecificStyle(stdstyle: TWxStdStyleSet;chstyle:TWxchStyleSet):String;
function GetNotebookSpecificStyle(stdstyle: TWxStdStyleSet;nbxstyle:TWxnbxStyleSet):String;
function GetRadioBoxSpecificStyle(stdstyle: TWxStdStyleSet;rbxstyle:TWxrbxStyleSet):String;
function GetStatusBarSpecificStyle(stdstyle: TWxStdStyleSet;sbrstyle:TWxsbrStyleSet):String;
//function GetToggleButtonSpecificStyle(stdstyle: TWxStdStyleSet;tbtnstyle:TWxtbtnStyleSet):String;
function GetToolBarSpecificStyle(stdstyle: TWxStdStyleSet;tbrstyle:TWxtbrStyleSet):String;
function GetScrolledWindowSpecificStyle(stdstyle: TWxStdStyleSet;scrWinStyle:TWxScrWinStyleSet):String;
function GetHtmlWindowSpecificStyle(stdstyle: TWxStdStyleSet;htmlWinStyle:TWxHtmlWinStyleSet):String;
function GetSplitterWindowSpecificStyle(stdstyle: TWxStdStyleSet;splitterWinStyle:TWxSplitterWinStyleSet):String;

/////////////////////////////

function GetListViewSpecificStyle(stdstyle: TWxStdStyleSet; lstvwstyle:TWxLVStyleSet): string;
function GetEditSpecificStyle(stdstyle: TWxStdStyleSet; dlgstyle:TWxEdtGeneralStyleSet): string;
function GetButtonSpecificStyle(stdstyle: TWxStdStyleSet; dlgstyle:TWxBtnStyleSet): string;
function GetLabelSpecificStyle(stdstyle: TWxStdStyleSet; dlgstyle:  TWxLbStyleSet): string;
function GetcomboBoxSpecificStyle(stdstyle: TWxStdStyleSet; cmbstyle:TWxCmbStyleSet): string;
function GetDialogSpecificStyle(stdstyle: TWxStdStyleSet; dlgstyle:TWxDlgStyleSet): string;

function SizerAlignmentToStr(SizerVerticalAlignment:TWxSizerVerticalAlignment):String;overload;
function SizerAlignmentToStr(SizerHorizontalAlignment:TWxSizerHorizontalAlignment):String;overload;
function RGBFormatStrToColor(strColorValue:String):TColor;
function GetColorFromString(strColorValue:String):TColor;
function GetGeneralColorFromString(strColorValue:String):TColor;
function IsDefaultColorStr(strvalue:String):boolean;
function GetwxColorFromString(strValue:String):String;
function PaperIDToString(sizeitem:TWxPaperSizeItem):String;

function IsControlWxSizer(ctrl:TControl):Boolean;
function IsControlWxContainer(ctrl:TControl):Boolean;
function IsControlWxWindow(ctrl:TControl):Boolean;
function IsControlWxToolBar(ctrl:TControl):Boolean;
function IsControlWxStatusBar(ctrl:TControl):Boolean;
function IsControlWxNonVisible(ctrl:TControl):Boolean;
function GetNonVisualComponentCount(frmMainObj:TForm):Integer;

function GetWxIDString(strID: string; intID: LongInt): string;
function IsValidClass(comp: TComponent): boolean;
function GetEventNameFromDisplayName(strDisplayName: string; strlst:TStringList): string;
function AlignmentToStr(taPos: TAlignment): string;
procedure ChangeControlZOrder(Sender: TObject; MoveUp: Boolean = True);
function GetXPMFromTPicture(XPMName:String;delphiBitmap:TBitmap):String;
function GetXPMFromTPictureXXX(XPMName:String;delphiBitmap:TBitmap):String;
function GenerateXPMDirectly(bmp:TBitmap;strCompName:String;strFileName:String):boolean;
function OpenXPMImage(InpImage:TBitmap;strFname:String):boolean;
function GetCppString(str:String):string;

function GetWxFontDeclaration(fnt:TFont):String;

function GetWxWidgetParent(cntrl:TControl):String;
function GetWxWindowControls(wnCtrl:TWinControl):Integer;
function GetAvailableControlCount(ParentControl:TWinControl;ControlToCheck:TComponent):Integer;overload;
function GetAvailableControlCount(ParentControl:TWinControl;ControlToCheck:String):Integer;overload;
function GetMaxIDofWxForm(ParentControl:TWinControl):integer;
function GetMenuKindAsText(menuStyle:TWxMenuItemStyleItem):String;
function GetToolButtonKindAsText(toolStyle:TWxToolbottonItemStyleItem):String;

function GetTotalHtOfAllToolBarAndStatusBar(ParentControl:TWinControl):Integer;

function GetPredefinedwxIds:TStringList;
function IsIDPredefined(str:String;strlst:TStringList):Boolean;

implementation

uses DesignerFrm,wxlistCtrl,WxStaticBitmap,WxBitmapButton,WxSizerPanel,WxToolButton,
     UColorEdit,UMenuitem,WxCustomMenuItem,WxPopupMenu,WxMenuBar,WxNonVisibleBaseComponent;

function GetTotalHtOfAllToolBarAndStatusBar(ParentControl:TWinControl):Integer;
var
  I: Integer;
begin
    Result:=0;
    for I := 0 to ParentControl.ControlCount - 1 do    // Iterate
    begin
        if not( IsControlWxToolBar(ParentControl.Controls[i]) or IsControlWxStatusBar(ParentControl.Controls[i]) ) then
            continue;
        Result:=Result+ParentControl.Controls[i].Height;
    end;    // for
end;
function IsIDPredefined(str:String;strlst:TStringList):Boolean;
begin
    if strlst.IndexOf(str) <> -1 then
        Result:=true
    else
        Result:=false;
end;

function GetPredefinedwxIds:TStringList;
begin
  Result:=TStringList.Create;
  Result.add('wxID_OPEN');
  Result.add('wxID_CLOSE');
  Result.add('wxID_NEW');
  Result.add('wxID_SAVE');
  Result.add('wxID_SAVEAS');
  Result.add('wxID_REVERT');
  Result.add('wxID_EXIT');
  Result.add('wxID_UNDO');
  Result.add('wxID_REDO');
  Result.add('wxID_HELP');
  Result.add('wxID_PRINT');
  Result.add('wxID_PRINT_SETUP');
  Result.add('wxID_PREVIEW');
  Result.add('wxID_ABOUT');
  Result.add('wxID_HELP_CONTENTS');
  Result.add('wxID_HELP_COMMANDS');
  Result.add('wxID_HELP_PROCEDURES');
  Result.add('wxID_HELP_CONTEXT');
  Result.add('wxID_CLOSE_ALL');
  Result.add('wxID_PREFERENCES');
  Result.add('wxID_CUT');
  Result.add('wxID_COPY');
  Result.add('wxID_PASTE');
  Result.add('wxID_CLEAR');
  Result.add('wxID_FIND');
  Result.add('wxID_DUPLICATE');
  Result.add('wxID_SELECTALL');
  Result.add('wxID_DELETE');
  Result.add('wxID_REPLACE');
  Result.add('wxID_REPLACE_ALL');
  Result.add('wxID_PROPERTIES');
  Result.add('wxID_VIEW_DETAILS');
  Result.add('wxID_VIEW_LARGEICONS');
  Result.add('wxID_VIEW_SMALLICONS');
  Result.add('wxID_VIEW_LIST');
  Result.add('wxID_VIEW_SORTDATE');
  Result.add('wxID_VIEW_SORTNAME');
  Result.add('wxID_VIEW_SORTSIZE');
  Result.add('wxID_VIEW_SORTTYPE');
  Result.add('wxID_FILE1');
  Result.add('wxID_FILE2');
  Result.add('wxID_FILE3');
  Result.add('wxID_FILE4');
  Result.add('wxID_FILE5');
  Result.add('wxID_FILE6');
  Result.add('wxID_FILE7');
  Result.add('wxID_FILE8');
  Result.add('wxID_FILE9');
  Result.add('wxID_OK');
  Result.add('wxID_CANCEL');
  Result.add('wxID_APPLY');
  Result.add('wxID_YES');
  Result.add('wxID_NO');
  Result.add('wxID_STATIC');
  Result.add('wxID_FORWARD');
  Result.add('wxID_BACKWARD');
  Result.add('wxID_DEFAULT');
  Result.add('wxID_MORE');
  Result.add('wxID_SETUP');
  Result.add('wxID_RESET');
  Result.add('wxID_CONTEXT_HELP');
  Result.add('wxID_YESTOALL');
  Result.add('wxID_NOTOALL');
  Result.add('wxID_ABORT');
  Result.add('wxID_RETRY');
  Result.add('wxID_IGNORE');
  Result.add('wxID_ADD');
  Result.add('wxID_REMOVE');
  Result.add('wxID_UP');
  Result.add('wxID_DOWN');
  Result.add('wxID_HOME');
  Result.add('wxID_REFRESH');
  Result.add('wxID_STOP');
  Result.add('wxID_INDEX');
  Result.add('wxID_BOLD');
  Result.add('wxID_ITALIC');
  Result.add('wxID_JUSTIFY_CENTER');
  Result.add('wxID_JUSTIFY_FILL');
  Result.add('wxID_JUSTIFY_RIGHT');
  Result.add('wxID_JUSTIFY_LEFT');
  Result.add('wxID_UNDERLINE');
  Result.add('wxID_INDENT');
  Result.add('wxID_UNINDENT');
  Result.add('wxID_ZOOM_100');
  Result.add('wxID_ZOOM_FIT');
  Result.add('wxID_ZOOM_IN');
  Result.add('wxID_ZOOM_OUT');
  Result.add('wxID_UNDELETE');
  Result.add('wxID_REVERT_TO_SAVED');
  Result.add('wxID_SYSTEM_MENU');
  Result.add('wxID_CLOSE_FRAME');
  Result.add('wxID_MOVE_FRAME');
  Result.add('wxID_RESIZE_FRAME');
  Result.add('wxID_MAXIMIZE_FRAME');
  Result.add('wxID_ICONIZE_FRAME');
  Result.add('wxID_RESTORE_FRAME');
  Result.add('wxID_FILEDLGG');
end;
function GetGridSelectionToString(grdsel:TWxGridSelection):String;
begin
    Result:='wxGridSelectCells';
    if grdsel = wxGridSelectCells then
    begin
        Result:='wxGridSelectCells';
    end;
    if grdsel = wxGridSelectColumns then
    begin
        Result:='wxGridSelectColumns';
    end;
    if grdsel = wxGridSelectCells then
    begin
        Result:='wxGridSelectCells';
    end;          
    //
end;

function GetWxFontDeclaration(fnt:TFont):String;
var
    strStyle,strWeight,strUnderline:String;
    fntDefault:TFont;
    defaultFontName:String;
begin
    fntDefault:=TFont.Create;
    defaultFontName:=fntDefault.Name;

    Result:='';
    try
    if fnt.Style = fntDefault.Style then
    begin
        if fnt.Name = fntDefault.Name then
        begin
            if fnt.Size = fntDefault.Size then
            begin
                Result:='';
                exit;
            end;
        end;
    end;
    finally
        fntDefault.destroy;
    end;

    if fsItalic in fnt.Style then
        strStyle:='wxITALIC'
    else
        strStyle:='wxNORMAL';

    if fsBold in fnt.Style then
        strWeight:='wxBOLD'
    else
        strWeight:='wxNORMAL';

    if fsUnderline in fnt.Style then
        strUnderline:='TRUE'
    else
        strUnderline:='FALSE';

    if fnt.Name <> defaultFontName then
        Result:=Result+'wxFont('+ IntToStr(fnt.size)+', wxSWISS ,'+strStyle+',' + strWeight +',' + strUnderline+',_T("'+ fnt.Name +'"))'
    else
        Result:=Result+'wxFont('+ IntToStr(fnt.size)+', wxSWISS ,'+strStyle+',' + strWeight +',' + strUnderline+')'
end;

function GetWxWidgetParent(cntrl:TControl):String;
Var
    TestCtrl:TControl;
begin
    Result:='';
    if cntrl = nil then
        exit;

    if cntrl.Parent = nil then
        exit;

    if cntrl.Parent is TForm then
    begin
        Result:='this';
        exit;
    end;

    if not (cntrl.Parent is TwxSizerPanel) then
    begin
        Result:=cntrl.Parent.Name;
        exit;
    end;

    if (cntrl.Parent is TWxSizerPanel) then
    begin
        TestCtrl:=cntrl.Parent;
        Result:=TestCtrl.Name;
        while ((TestCtrl is TWxSizerPanel)) do 
        begin
            if (TestCtrl is TWxSizerPanel) then
                TestCtrl:=TestCtrl.Parent;

            if TestCtrl = nil then
            begin
                Result:='this';
                break;
            end;
            if (TestCtrl is TForm) then
                Result:='this'
            else
                Result:=TestCtrl.Name;
        end;
    end; 
end;

function GetWxWindowControls(wnCtrl:TWinControl):Integer;
var
  I: Integer;
  wndInterface:IWxWindowInterface;
begin
    Result:=0;
    for I := 0 to wnCtrl.ComponentCount - 1 do    // Iterate
    begin
        if wnCtrl.Components[i].GetInterface(IID_IWxWindowInterface,wndInterface) then
            Inc(Result);
    end;    // for
end;

function GetMaxIDofWxForm(ParentControl:TWinControl):integer;
var
    wxcompInterface:IWxComponentInterface;
    i:Integer;
    maxval:Integer;
begin
  Result:=0;
  for I := 0 to ParentControl.ComponentCount - 1 do // Iterate
  begin
    if ParentControl.Components[i].GetInterface(IID_IWxComponentInterface, wxcompInterface) then
    begin
      maxval:=wxcompInterface.GetIDValue;
      //sendDeBug(IntToStr(maxval));
      if wxcompInterface.GetIDValue > Result then
      begin
        Result := wxcompInterface.GetIDValue;
      end;
    end;
  end; // for

  if Result = 0 then
    Result:=1000;

end;

function GetMenuKindAsText(menuStyle:TWxMenuItemStyleItem):String;
begin
    Result:='wxITEM_NORMAL';
    if menuStyle = wxMnuItm_Normal then
    begin
        Result:='wxITEM_NORMAL';
        exit;
    end;

    if menuStyle = wxMnuItm_Separator then
    begin
        Result:='wxITEM_SEPARATOR';
        exit;
    end;
    if menuStyle = wxMnuItm_Radio then
    begin
        Result:='wxITEM_RADIO';
        exit;
    end;
    if menuStyle = wxMnuItm_Check then
    begin
        Result:='wxITEM_CHECK';
        exit;
    end;

end;

function GetToolButtonKindAsText(toolStyle:TWxToolbottonItemStyleItem):String;
begin
    Result:='wxITEM_NORMAL';
    if toolStyle = wxITEM_NORMAL then
    begin
        Result:='wxITEM_NORMAL';
        exit;
    end;

    if toolStyle = wxITEM_RADIO then
    begin
        Result:='wxITEM_RADIO';
        exit;
    end;
    
    if toolStyle = wxITEM_CHECK then
    begin
        Result:='wxITEM_CHECK';
        exit;
    end;

end;

function GetAvailableControlCount(ParentControl:TWinControl;ControlToCheck:String):Integer;overload;
var
  I: Integer;
begin
    Result:=0;
    for I := 0 to ParentControl.ComponentCount - 1 do    // Iterate
    begin
        if strContainsU(ParentControl.Components[i].ClassName,ControlToCheck) then
            inc(Result);
    end;    // for
end;

function GetAvailableControlCount(ParentControl:TWinControl;ControlToCheck:TComponent):Integer;overload;
var
  I: Integer;
begin
    Result:=0;
    for I := 0 to ParentControl.ComponentCount - 1 do    // Iterate
    begin
        if strContainsU(ParentControl.Components[i].ClassName,ControlToCheck.ClassName) then
            inc(Result);
    end;    // for
end;
function GetEventNameFromDisplayName(strDisplayName: string; strlst:
  TStringList): string;
var
  I: Integer;
  strEventName, strEventCaption: string;
  intPos: Integer;
begin
  Result := '';
  for i := 0 to strlst.Count - 1 do // Iterate
  begin
    intPos := Pos(':', strlst[i]);
    strEventName := Copy(strlst[i], 0, intPos - 1);
    strEventCaption := Trim(Copy(strlst[i], intPos + 1, Length(strlst[i])));
    if AnsiSameText(strEventCaption, strDisplayName) then
    begin
      Result := strEventName;
    end;
  end; // for
end;

function IsValidClass(comp: TComponent): boolean;
var
  intfObj: IWxComponentInterface;
begin
  Result := comp.GetInterface(IID_IWxComponentInterface, intfObj);
end;

//Here is the start
function GetCheckboxStyleString(stdStyle:TWxcbxStyleSet):String;
var
  I: Integer;
  strLst: TStringList;
begin
  strLst := TStringList.Create;
  if wxCHK_2STATE in stdStyle then
    strLst.add('wxCHK_2STATE ');

  if wxCHK_3STATE in stdStyle then
    strLst.add('wxCHK_3STATE ');

  if wxCHK_ALLOW_3RD_STATE_FOR_USER in stdStyle then
    strLst.add('wxCHK_ALLOW_3RD_STATE_FOR_USER');

//  if wxCB_SORT in stdStyle then
//    strLst.add('wxALIGN_RIGHT ');

  if strLst.Count = 0 then
  begin
    Result := '';
  end
  else
  begin
    for I := 0 to strLst.count - 1 do // Iterate
    begin
      if i <> strLst.count - 1 then
        Result := Result + strLst[i] + ' | '
      else
        Result := Result + ' ' + strLst[i] + ' ';
    end; // for
  end;
  //sendDebug(Result);
  strLst.destroy;
end;

function GetTreeviewStyleString(stdStyle:TWxtvStyleSet):String;
var
  I: Integer;
  strLst: TStringList;
begin
  strLst := TStringList.Create;
  if wxTR_EDIT_LABELS  in stdStyle then
    strLst.add('wxTR_EDIT_LABELS');

  if wxTR_NO_BUTTONS in stdStyle then
    strLst.add('wxTR_NO_BUTTONS');

  if wxTR_HAS_BUTTONS  in stdStyle then
    strLst.add('wxTR_HAS_BUTTONS');

  if wxTR_TWIST_BUTTONS  in stdStyle then
    strLst.add('wxTR_TWIST_BUTTONS');

  if wxTR_NO_LINES  in stdStyle then
    strLst.add('wxTR_NO_LINES');

  if wxTR_FULL_ROW_HIGHLIGHT  in stdStyle then
    strLst.add('wxTR_FULL_ROW_HIGHLIGHT');

  if wxTR_LINES_AT_ROOT  in stdStyle then
    strLst.add('wxTR_LINES_AT_ROOT');

  if wxTR_HIDE_ROOT  in stdStyle then
    strLst.add('wxTR_HIDE_ROOT');

  if wxTR_ROW_LINES  in stdStyle then
    strLst.add('wxTR_ROW_LINES');

  if wxTR_HAS_VARIABLE_ROW_HEIGHT in stdStyle then
    strLst.add('wxTR_HAS_VARIABLE_ROW_HEIGHT');

  if wxTR_SINGLE  in stdStyle then
    strLst.add('wxTR_SINGLE');

  if wxTR_MULTIPLE  in stdStyle then
    strLst.add('wxTR_MULTIPLE');

  if wxTR_EXTENDED   in stdStyle then
    strLst.add('wxTR_EXTENDED');

  if wxTR_DEFAULT_STYLE   in stdStyle then
    strLst.add('wxTR_DEFAULT_STYLE');

  if strLst.Count = 0 then
  begin
    Result := '';
  end
  else
  begin
    for I := 0 to strLst.count - 1 do // Iterate
    begin
      if i <> strLst.count - 1 then
        Result := Result + strLst[i] + ' | '
      else
        Result := Result + ' ' + strLst[i] + ' ';
    end; // for
  end;
  //sendDebug(Result);
  strLst.destroy;
end;

function GetRadiobuttonStyleString(stdStyle:TWxrbStyleSet):String;
var
  I: Integer;
  strLst: TStringList;
begin
  strLst := TStringList.Create;
  if wxRB_GROUP in stdStyle then
    strLst.add('wxRB_GROUP');

  if wxRB_SINGLE in stdStyle then
    strLst.add('wxRB_SINGLE');

  if strLst.Count = 0 then
  begin
    Result := '';
  end
  else
  begin
    for I := 0 to strLst.count - 1 do // Iterate
    begin
      if i <> strLst.count - 1 then
        Result := Result + strLst[i] + ' | '
      else
        Result := Result + ' ' + strLst[i] + ' ';
    end; // for
  end;
  //sendDebug(Result);
  strLst.destroy;
end;

function GetListboxStyleString(stdStyle:TWxlbxStyleSet):String;
var
  I: Integer;
  strLst: TStringList;
begin
  strLst := TStringList.Create;
  if wxLB_SINGLE  in stdStyle then
    strLst.add('wxLB_SINGLE ');

  if wxLB_MULTIPLE  in stdStyle then
    strLst.add('wxLB_MULTIPLE ');

  if wxLB_EXTENDED   in stdStyle then
    strLst.add('wxLB_EXTENDED  ');

  if wxLB_HSCROLL  in stdStyle then
    strLst.add('wxLB_HSCROLL ');

  if wxLB_ALWAYS_SB   in stdStyle then
    strLst.add('wxLB_ALWAYS_SB  ');

  if wxLB_NEEDED_SB   in stdStyle then
    strLst.add('wxLB_NEEDED_SB  ');

  if wxLB_NEEDED_SB   in stdStyle then
    strLst.add('wxLB_SORT   ');

  if strLst.Count = 0 then
  begin
    Result := '';
  end
  else
  begin
    for I := 0 to strLst.count - 1 do // Iterate
    begin
      if i <> strLst.count - 1 then
        Result := Result + strLst[i] + ' | '
      else
        Result := Result + ' ' + strLst[i] + ' ';
    end; // for
  end;
  //sendDebug(Result);
  strLst.destroy;
end;

function GetGaugeStyleString(stdStyle:TWxgagStyleSet):String;
var
  I: Integer;
  strLst: TStringList;
begin
  strLst := TStringList.Create;
  if wxGA_SMOOTH in stdStyle then
    strLst.add('wxGA_SMOOTH');

  if strLst.Count = 0 then
  begin
    Result := '';
  end
  else
  begin
    for I := 0 to strLst.count - 1 do // Iterate
    begin
      if i <> strLst.count - 1 then
        Result := Result + strLst[i] + ' | '
      else
        Result := Result + ' ' + strLst[i] + ' ';
    end; // for
  end;
  //sendDebug(Result);
  strLst.destroy;
end;

function GetScrollbarStyleString(stdStyle:TWxsbrStyleSet):String;
var
  I: Integer;
  strLst: TStringList;
begin
  strLst := TStringList.Create;
  if wxST_SIZEGRIP in stdStyle then
    strLst.add('wxST_SIZEGRIP');

  if strLst.Count = 0 then
  begin
    Result := '';
  end
  else
  begin
    for I := 0 to strLst.count - 1 do // Iterate
    begin
      if i <> strLst.count - 1 then
        Result := Result + strLst[i] + ' | '
      else
        Result := Result + ' ' + strLst[i] + ' ';
    end; // for
  end;
  //sendDebug(Result);
  strLst.destroy;
end;

function GetSpinButtonStyleString(stdStyle:TWxsbtnStyleSet):String;
var
  I: Integer;
  strLst: TStringList;
begin
  strLst := TStringList.Create;
  if wxSP_ARROW_KEYS in stdStyle then
    strLst.add('wxSP_ARROW_KEYS');

  if wxSP_WRAP in stdStyle then
    strLst.add('wxSP_WRAP');

  if wxSP_HORIZONTAL in stdStyle then
    strLst.add('wxSP_HORIZONTAL');

  if wxSP_VERTICAL in stdStyle then
    strLst.add('wxSP_VERTICAL');

  if strLst.Count = 0 then
  begin
    Result := '';
  end
  else
  begin
    for I := 0 to strLst.count - 1 do // Iterate
    begin
      if i <> strLst.count - 1 then
        Result := Result + strLst[i] + ' | '
      else
        Result := Result + ' ' + strLst[i] + ' ';
    end; // for
  end;
  //sendDebug(Result);
  strLst.destroy;
end;

function GetSliderStyleString(stdStyle:TWxsldrStyleSet):String;
var
  I: Integer;
  strLst: TStringList;
begin
  strLst := TStringList.Create;
  if wxSL_AUTOTICKS in stdStyle then
    strLst.add('wxSL_AUTOTICKS');

  if wxSL_LABELS in stdStyle then
    strLst.add('wxSL_LABELS');

  if wxSL_LEFT in stdStyle then
    strLst.add('wxSL_LEFT');

  if wxSL_RIGHT in stdStyle then
    strLst.add('wxSL_RIGHT');

  if wxSL_TOP in stdStyle then
    strLst.add('wxSL_TOP');

  if wxSL_SELRANGE in stdStyle then
    strLst.add('wxSL_SELRANGE');

  if wxSL_HORIZONTAL in stdStyle then
    strLst.add('wxSL_HORIZONTAL');

  if wxSL_VERTICAL in stdStyle then
    strLst.add('wxSL_VERTICAL');


        
  if strLst.Count = 0 then
  begin
    Result := '';
  end
  else
  begin
    for I := 0 to strLst.count - 1 do // Iterate
    begin
      if i <> strLst.count - 1 then
        Result := Result + strLst[i] + ' | '
      else
        Result := Result + ' ' + strLst[i] + ' ';
    end; // for
  end;
  //sendDebug(Result);
  strLst.destroy;
end;


function GetCalendarCtrlStyleString(stdStyle:TWxcalctrlStyleSet):String;
var
  I: Integer;
  strLst: TStringList;
begin
  strLst := TStringList.Create;
  if wxCAL_SUNDAY_FIRST in stdStyle then
    strLst.add('wxCAL_SUNDAY_FIRST');

  if wxCAL_MONDAY_FIRST in stdStyle then
    strLst.add('wxCAL_MONDAY_FIRST');

  if wxCAL_SHOW_HOLIDAYS in stdStyle then
    strLst.add('wxCAL_SHOW_HOLIDAYS');

  if wxCAL_NO_YEAR_CHANGE in stdStyle then
    strLst.add('wxCAL_NO_YEAR_CHANGE');

  if wxCAL_NO_MONTH_CHANGE in stdStyle then
    strLst.add('wxCAL_NO_MONTH_CHANGE');

  if wxCAL_SHOW_SURROUNDING_WEEKS in stdStyle then
    strLst.add('wxCAL_SHOW_SURROUNDING_WEEKS');

  if wxCAL_SEQUENTIAL_MONTH_SELECTION in stdStyle then
    strLst.add('wxCAL_SEQUENTIAL_MONTH_SELECTION');


            
  if strLst.Count = 0 then
  begin
    Result := '';
  end
  else
  begin
    for I := 0 to strLst.count - 1 do // Iterate
    begin
      if i <> strLst.count - 1 then
        Result := Result + strLst[i] + ' | '
      else
        Result := Result + ' ' + strLst[i] + ' ';
    end; // for
  end;
  //sendDebug(Result);
  strLst.destroy;
end;


function GetNotebookStyleString(stdStyle:TWxnbxStyleSet):String;
var
  I: Integer;
  strLst: TStringList;
begin
  strLst := TStringList.Create;
  if wxNB_LEFT in stdStyle then
    strLst.add('wxNB_LEFT');

  if wxNB_RIGHT in stdStyle then
    strLst.add('wxNB_RIGHT');

  if wxNB_BOTTOM in stdStyle then
    strLst.add('wxNB_BOTTOM');

  if wxNB_FIXEDWIDTH in stdStyle then
    strLst.add('wxNB_FIXEDWIDTH');

  if wxNB_MULTILINE in stdStyle then
    strLst.add('wxNB_MULTILINE');
    
  if strLst.Count = 0 then
  begin
    Result := '';
  end
  else
  begin
    for I := 0 to strLst.count - 1 do // Iterate
    begin
      if i <> strLst.count - 1 then
        Result := Result + strLst[i] + ' | '
      else
        Result := Result + ' ' + strLst[i] + ' ';
    end; // for
  end;
  //sendDebug(Result);
  strLst.destroy;
end;

function GetRadioBoxStyleString(stdStyle:TWxrbxStyleSet):String;
var
  I: Integer;
  strLst: TStringList;
begin
  strLst := TStringList.Create;
  if wxRA_SPECIFY_ROWS in stdStyle then
    strLst.add('wxRA_SPECIFY_ROWS');

  if wxRA_SPECIFY_COLS in stdStyle then
    strLst.add('wxRA_SPECIFY_COLS');

  if strLst.Count = 0 then
  begin
    Result := '';
  end
  else
  begin
    for I := 0 to strLst.count - 1 do // Iterate
    begin
      if i <> strLst.count - 1 then
        Result := Result + strLst[i] + ' | '
      else
        Result := Result + ' ' + strLst[i] + ' ';
    end; // for
  end;
  //sendDebug(Result);
  strLst.destroy;
end;

function GetStatusBarStyleString(stdStyle:TWxsbrStyleSet):String;
var
  I: Integer;
  strLst: TStringList;
begin
  strLst := TStringList.Create;
  if wxST_SIZEGRIP in stdStyle then
    strLst.add('wxST_SIZEGRIP');

  if strLst.Count = 0 then
  begin
    Result := '';
  end
  else
  begin
    for I := 0 to strLst.count - 1 do // Iterate
    begin
      if i <> strLst.count - 1 then
        Result := Result + strLst[i] + ' | '
      else
        Result := Result + ' ' + strLst[i] + ' ';
    end; // for
  end;
  //sendDebug(Result);
  strLst.destroy;
end;


function GetToolBarStyleString(stdStyle:TWxtbrStyleSet):String;
var
  I: Integer;
  strLst: TStringList;
begin
  strLst := TStringList.Create;

  if wxTB_FLAT in stdStyle then
    strLst.add('wxTB_FLAT');

  if wxTB_DOCKABLE in stdStyle then
    strLst.add('wxTB_DOCKABLE');

  if wxTB_HORIZONTAL in stdStyle then
    strLst.add('wxTB_HORIZONTAL');

  if wxTB_VERTICAL in stdStyle then
    strLst.add('wxTB_VERTICAL');

  if wxTB_TEXT in stdStyle then
    strLst.add('wxTB_TEXT');

  if wxTB_NOICONS in stdStyle then
    strLst.add('wxTB_NOICONS');

  if wxTB_NODIVIDER in stdStyle then
    strLst.add('wxTB_NODIVIDER');

  if wxTB_NOALIGN in stdStyle then
    strLst.add('wxTB_NOALIGN');

  if wxTB_HORZ_LAYOUT in stdStyle then
    strLst.add('wxTB_HORZ_LAYOUT');

  if wxTB_HORZ_TEXT in stdStyle then
    strLst.add('wxTB_HORZ_TEXT');

  if strLst.Count = 0 then
  begin
    Result := '';
  end
  else
  begin
    for I := 0 to strLst.count - 1 do // Iterate
    begin
      if i <> strLst.count - 1 then
        Result := Result + strLst[i] + ' | '
      else
        Result := Result + ' ' + strLst[i] + ' ';
    end; // for
  end;
  //sendDebug(Result);
  strLst.destroy;
end;

function GetScrolledWindowStyleString(stdStyle:TWxScrWinStyleSet):String;
var
  I: Integer;
  strLst: TStringList;
begin
  strLst := TStringList.Create;

  if wxRETAINED in stdStyle then
    strLst.add('wxRETAINED');

  if strLst.Count = 0 then
  begin
    Result := '';
  end
  else
  begin
    for I := 0 to strLst.count - 1 do // Iterate
    begin
      if i <> strLst.count - 1 then
        Result := Result + strLst[i] + ' | '
      else
        Result := Result + ' ' + strLst[i] + ' ';
    end; // for
  end;
  //sendDebug(Result);
  strLst.destroy;

end;


function GetHtmlWindowStyleString(stdStyle:TWxHtmlWinStyleSet):String;
var
  I: Integer;
  strLst: TStringList;
begin
  strLst := TStringList.Create;

  if wxHW_SCROLLBAR_NEVER in stdStyle then
    strLst.add('wxHW_SCROLLBAR_NEVER');

  if wxHW_SCROLLBAR_AUTO in stdStyle then
    strLst.add('wxHW_SCROLLBAR_AUTO');

  if wxHW_NO_SELECTION  in stdStyle then
    strLst.add('wxHW_NO_SELECTION ');

  if strLst.Count = 0 then
  begin
    Result := '';
  end
  else
  begin
    for I := 0 to strLst.count - 1 do // Iterate
    begin
      if i <> strLst.count - 1 then
        Result := Result + strLst[i] + ' | '
      else
        Result := Result + ' ' + strLst[i] + ' ';
    end; // for
  end;
  //sendDebug(Result);
  strLst.destroy;

end;



function GetSplitterWindowStyleString(stdStyle:TWxSplitterWinStyleSet):String;
var
  I: Integer;
  strLst: TStringList;
begin
  strLst := TStringList.Create;

  if wxSP_3D in stdStyle then
    strLst.add('wxSP_3D');

  if wxSP_3DSASH in stdStyle then
    strLst.add('wxSP_3DSASH');

  if wxSP_3DBORDER  in stdStyle then
    strLst.add('wxSP_3DBORDER ');

  if wxSP_BORDER in stdStyle then
    strLst.add('wxSP_BORDER');

  if wxSP_NOBORDER in stdStyle then
    strLst.add('wxSP_NOBORDER');

  if wxSP_NO_XP_THEME  in stdStyle then
    strLst.add('wxSP_NO_XP_THEME ');

  if wxSP_PERMIT_UNSPLIT in stdStyle then
    strLst.add('wxSP_PERMIT_UNSPLIT');

  if wxSP_LIVE_UPDATE in stdStyle then
    strLst.add('wxSP_LIVE_UPDATE');

  if strLst.Count = 0 then
  begin
    Result := '';
  end
  else
  begin
    for I := 0 to strLst.count - 1 do // Iterate
    begin
      if i <> strLst.count - 1 then
        Result := Result + strLst[i] + ' | '
      else
        Result := Result + ' ' + strLst[i] + ' ';
    end; // for
  end;
  //sendDebug(Result);
  strLst.destroy;

end;


function GetFileDialogStyleString(stdStyle:TWxFileDialogStyleSet):String;
var
  I: Integer;
  strLst: TStringList;
begin
  strLst := TStringList.Create;

  if wxHIDE_READONLY in stdStyle then
    strLst.add('wxHIDE_READONLY');

  if wxOVERWRITE_PROMPT in stdStyle then
    strLst.add('wxOVERWRITE_PROMPT');

  if wxMULTIPLE  in stdStyle then
    strLst.add('wxMULTIPLE ');

  if wxCHANGE_DIR  in stdStyle then
    strLst.add('wxCHANGE_DIR ');

  if strLst.Count = 0 then
  begin
    Result := '';
  end
  else
  begin
    Result := ' | ';
    for I := 0 to strLst.count - 1 do // Iterate
    begin
      if i <> strLst.count - 1 then
        Result := Result + strLst[i] + ' | '
      else
        Result := Result + ' ' + strLst[i] + ' ';
    end; // for
  end;
  //sendDebug(Result);
  strLst.destroy;

end;

function GetDirDialogStyleString(stdStyle:TWxDirDialogStyleSet):String;
var
  I: Integer;
  strLst: TStringList;
begin
  strLst := TStringList.Create;

  if wxDD_NEW_DIR_BUTTON in stdStyle then
    strLst.add('wxDD_NEW_DIR_BUTTON');


  if strLst.Count = 0 then
  begin
    Result := '';
  end
  else
  begin
    Result := ' , ';
    for I := 0 to strLst.count - 1 do // Iterate
    begin
      if i <> strLst.count - 1 then
        Result := Result + strLst[i] + ' | '
      else
        Result := Result + ' ' + strLst[i] + ' ';
    end; // for
  end;
  //sendDebug(Result);
  strLst.destroy;

end;


function GetProgressDialogStyleString(stdStyle:TWxProgressDialogStyleSet):String;
var
  I: Integer;
  strLst: TStringList;
begin
  strLst := TStringList.Create;

  if wxPD_APP_MODAL in stdStyle then
    strLst.add('wxPD_APP_MODAL');

  if wxPD_AUTO_HIDE in stdStyle then
    strLst.add('wxPD_AUTO_HIDE');

  if wxPD_CAN_ABORT  in stdStyle then
    strLst.add('wxPD_CAN_ABORT ');

  if wxPD_ELAPSED_TIME  in stdStyle then
    strLst.add('wxPD_ELAPSED_TIME ');

  if wxPD_ESTIMATED_TIME in stdStyle then
    strLst.add('wxPD_ESTIMATED_TIME');

  if wxPD_REMAINING_TIME  in stdStyle then
    strLst.add('wxPD_REMAINING_TIME ');

  if strLst.Count = 0 then
  begin
    Result := '';
  end
  else
  begin
    Result := ' , ';
    for I := 0 to strLst.count - 1 do // Iterate
    begin
      if i <> strLst.count - 1 then
        Result := Result + strLst[i] + ' | '
      else
        Result := Result + ' ' + strLst[i] + ' ';
    end; // for
  end;
  //sendDebug(Result);
  strLst.destroy;

end;

  
function GetMessageDialogStyleString(stdStyle:TWxMessageDialogStyleSet):String;
var
  I: Integer;
  strLst: TStringList;
begin
  strLst := TStringList.Create;

  if wxOK in stdStyle then
    strLst.add('wxOK');

  if wxCANCEL in stdStyle then
    strLst.add('wxCANCEL');

  if wxYES_NO  in stdStyle then
    strLst.add('wxYES_NO ');

  if wxYES_DEFAULT  in stdStyle then
    strLst.add('wxYES_DEFAULT ');

  if wxNO_DEFAULT in stdStyle then
    strLst.add('wxNO_DEFAULT');

  if wxICON_EXCLAMATION  in stdStyle then
    strLst.add('wxICON_EXCLAMATION ');

  if wxICON_HAND  in stdStyle then
    strLst.add('wxICON_HAND ');

  if wxICON_ERROR  in stdStyle then
    strLst.add('wxICON_ERROR ');

  if wxICON_QUESTION in stdStyle then
    strLst.add('wxICON_QUESTION');

  if wxICON_INFORMATION  in stdStyle then
    strLst.add('wxICON_INFORMATION ');
    
  if strLst.Count = 0 then
  begin
    Result := '';
  end
  else
  begin
    Result := ' , ';
    for I := 0 to strLst.count - 1 do // Iterate
    begin
      if i <> strLst.count - 1 then
        Result := Result + strLst[i] + ' | '
      else
        Result := Result + ' ' + strLst[i] + ' ';
    end; // for
  end;
  //sendDebug(Result);
  strLst.destroy;

end;

function GetFindReplaceFlagString(stdstyle: TWxFindReplaceFlagSet):String;
var
  I: Integer;
  strLst: TStringList;
begin
  strLst := TStringList.Create;

  if wxFR_DOWN in stdStyle then
    strLst.add('wxFR_DOWN');

  if wxFR_WHOLEWORD in stdStyle then
    strLst.add('wxFR_WHOLEWORD');

  if wxFR_MATCHCASE  in stdStyle then
    strLst.add('wxFR_MATCHCASE ');

  if strLst.Count = 0 then
  begin
    Result := '';
  end
  else
  begin
    Result := '';
    for I := 0 to strLst.count - 1 do // Iterate
    begin
      if i <> strLst.count - 1 then
        Result := Result + strLst[i] + ' | '
      else
        Result := Result + ' ' + strLst[i] + ' ';
    end; // for
  end;
  //sendDebug(Result);
  strLst.destroy;

end;


function GetFindReplaceDialogStyleString(stdstyle: TWxFindReplaceDialogStyleSet):String;
var
  I: Integer;
  strLst: TStringList;
begin
  strLst := TStringList.Create;

  if wxFR_REPLACEDIALOG in stdStyle then
    strLst.add('wxFR_REPLACEDIALOG');

  if wxFR_NOUPDOWN  in stdStyle then
    strLst.add('wxFR_NOUPDOWN ');

  if wxFR_NOMATCHCASE  in stdStyle then
    strLst.add('wxFR_NOMATCHCASE ');

  if wxFR_NOWHOLEWORD  in stdStyle then
    strLst.add('wxFR_NOWHOLEWORD ');

  if strLst.Count = 0 then
  begin
    Result := '';
  end
  else
  begin
    Result := ' , ';
    for I := 0 to strLst.count - 1 do // Iterate
    begin
      if i <> strLst.count - 1 then
        Result := Result + strLst[i] + ' | '
      else
        Result := Result + ' ' + strLst[i] + ' ';
    end; // for
  end;
  //sendDebug(Result);
  strLst.destroy;

end;



//Here is the end;
function GetComboxBoxStyleString(stdStyle: TWxCmbStyleSet): string;
var
  I: Integer;
  strLst: TStringList;
begin
  strLst := TStringList.Create;
  if wxCB_SIMPLE in stdStyle then
    strLst.add('wxCB_SIMPLE');

  if wxCB_DROPDOWN in stdStyle then
    strLst.add('wxCB_DROPDOWN');

  if wxCB_READONLY in stdStyle then
    strLst.add('wxCB_READONLY');

  if wxCB_SORT in stdStyle then
    strLst.add('wxCB_SORT');

  if strLst.Count = 0 then
  begin
    Result := '';
  end
  else
  begin
    for I := 0 to strLst.count - 1 do // Iterate
    begin
      if i <> strLst.count - 1 then
        Result := Result + strLst[i] + ' | '
      else
        Result := Result + ' ' + strLst[i] + ' ';
    end; // for
  end;
  //sendDebug(Result);
  strLst.destroy;
end;

function GetDlgStyleString(stdStyle: TWxDlgStyleSet): string;
var
  I: Integer;
  strLst: TStringList;
begin
  strLst := TStringList.Create;
  if wxCAPTION in stdStyle then
    strLst.add('wxCAPTION');

  if wxRESIZE_BORDER in stdStyle then
    strLst.add('wxRESIZE_BORDER');

  if wxSYSTEM_MENU in stdStyle then
    strLst.add('wxSYSTEM_MENU');

  if wxTHICK_FRAME in stdStyle then
    strLst.add('wxTHICK_FRAME');

  if wxSTAY_ON_TOP in stdStyle then
    strLst.add('wxSTAY_ON_TOP');

  if wxDIALOG_NO_PARENT in stdStyle then
    strLst.add('wxDIALOG_NO_PARENT');

  if wxDIALOG_EX_CONTEXTHELP in stdStyle then
    strLst.add('wxDIALOG_EX_CONTEXTHELP');

  if wxMINIMIZE_BOX in stdStyle then
    strLst.add('wxMINIMIZE_BOX');

  if wxMAXIMIZE_BOX in stdStyle then
    strLst.add('wxMAXIMIZE_BOX');

  if wxCLOSE_BOX  in stdStyle then
    strLst.add('wxCLOSE_BOX');

  if strLst.Count = 0 then
  begin
    Result := '';
  end
  else
  begin
    for I := 0 to strLst.count - 1 do // Iterate
    begin
      if i <> strLst.count - 1 then
        Result := Result + strLst[i] + ' | '
      else
        Result := Result + ' ' + strLst[i] + ' ';
    end; // for
  end;
  //sendDebug(Result);
  strLst.destroy;
end;

function GetButtonStyleString(stdStyle: TWxBtnStyleSet): string;
var
  I: Integer;
  strLst: TStringList;
begin

  strLst := TStringList.Create;
  if wxBU_LEFT in stdStyle then
    strLst.add('wxBU_LEFT');

  if wxBU_TOP in stdStyle then
    strLst.add('wxBU_TOP');

  if wxBU_RIGHT in stdStyle then
    strLst.add('wxBU_RIGHT');

  if wxBU_EXACTFIT in stdStyle then
    strLst.add('wxBU_EXACTFIT');

  if wxBU_BOTTOM in stdStyle then
    strLst.add('wxBU_BOTTOM');

  if strLst.Count = 0 then
  begin
    Result := '';
  end
  else
  begin
    for I := 0 to strLst.count - 1 do // Iterate
    begin
      if i <> strLst.count - 1 then
        Result := Result + strLst[i] + ' | '
      else
        Result := Result + ' ' + strLst[i] + ' ';
    end; // for
  end;
  //sendDebug(Result);
  strLst.destroy;
end;

function GetLbStyleString(stdStyle: TWxLbStyleSet): string;
var
  I: Integer;
  strLst: TStringList;
begin

  strLst := TStringList.Create;
  if wxALIGN_LEFT in stdStyle then
    strLst.add('wxALIGN_LEFT');

  if wxALIGN_RIGHT in stdStyle then
    strLst.add('wxALIGN_RIGHT');

  if wxALIGN_CENTRE in stdStyle then
    strLst.add('wxALIGN_CENTRE');

  if wxST_NO_AUTORESIZE in stdStyle then
    strLst.add('wxST_NO_AUTORESIZE');

  if strLst.Count = 0 then
  begin
    Result := '';
  end
  else
  begin
    for I := 0 to strLst.count - 1 do // Iterate
    begin
      if i <> strLst.count - 1 then
        Result := Result + strLst[i] + ' | '
      else
        Result := Result + ' ' + strLst[i] + ' ';
    end; // for
  end;
  //sendDebug(Result);
  strLst.destroy;
end;

function GetEdtStyleString(edtdStyle: TWxEdtGeneralStyleSet): string;
var
  I: Integer;
  strLst: TStringList;
begin
  strLst := TStringList.Create;
  if wxTE_PROCESS_ENTER in edtdStyle then
    strLst.add('wxTE_PROCESS_ENTER');

  if wxTE_PROCESS_TAB in edtdStyle then
    strLst.add('wxTE_PROCESS_TAB');

  if wxTE_PASSWORD in edtdStyle then
    strLst.add('wxTE_PASSWORD');

  if wxTE_READONLY in edtdStyle then
    strLst.add('wxTE_READONLY');

  if wxTE_RICH in edtdStyle then
    strLst.add('wxTE_RICH');

  if wxTE_RICH2 in edtdStyle then
    strLst.add('wxTE_RICH2');

  if wxTE_AUTO_URL in edtdStyle then
    strLst.add('wxTE_AUTO_URL');

  if wxTE_NOHIDESEL in edtdStyle then
    strLst.add('wxTE_NOHIDESEL');

  //    if wxTE_LEFT in edtdStyle then
  //        strLst.add('wxTE_LEFT');
  //
  //    if wxTE_CENTRE in edtdStyle then
  //        strLst.add('wxTE_CENTRE');
  //
  //    if wxTE_RIGHT in edtdStyle then
  //        strLst.add('wxTE_RIGHT');

  if wxTE_DONTWRAP in edtdStyle then
    strLst.add('wxTE_DONTWRAP');

  if wxTE_LINEWRAP in edtdStyle then
    strLst.add('wxTE_LINEWRAP');

  if wxTE_WORDWRAP in edtdStyle then
    strLst.add('wxTE_WORDWRAP');

  if wxTE_MULTILINE in edtdStyle then
    strLst.add('wxTE_MULTILINE');


  if strLst.Count = 0 then
  begin
    Result := '';
  end
  else
  begin
    for I := 0 to strLst.count - 1 do // Iterate
    begin
      if i <> strLst.count - 1 then
        Result := Result + strLst[i] + ' | '
      else
        Result := Result + ' ' + strLst[i] + ' ';
    end; // for
  end;
  //sendDebug(Result);
  strLst.destroy;
end;

function GetEditSpecificStyle(stdstyle: TWxStdStyleSet; dlgstyle:
  TWxEdtGeneralStyleSet): string;
var
  strA: string;
begin
  Result := GetStdStyleString(stdstyle);
  strA := trim(GetEdtStyleString(dlgstyle));
  if strA <> '' then
  begin
    if trim(Result) = '' then
      Result := strA
    else
      Result := Result + ' | ' + strA
  end;

  if trim(Result) <> '' then
    Result := ' , ' + Result;
end;

function GetcomboBoxSpecificStyle(stdstyle: TWxStdStyleSet; cmbstyle:TWxCmbStyleSet): string;
var
  strA: string;
begin
  Result := GetStdStyleString(stdstyle);
  strA := trim(GetComboxBoxStyleString(cmbstyle));
  if strA <> '' then
  begin
    if trim(Result) = '' then
      Result := strA
    else
      Result := Result + ' | ' + strA
  end;

  if trim(Result) <> '' then
    Result := ' , ' + Result;
end;


function GetListViewStyleString(lstvwstyle: TWxLVStyleSet): string;
var
  I: Integer;
  strLst: TStringList;
begin
  strLst := TStringList.Create;
  if wxLC_LIST in lstvwstyle then
    strLst.add('wxLC_LIST');

  if wxLC_REPORT in lstvwstyle then
    strLst.add('wxLC_REPORT ');

  if wxLC_VIRTUAL in lstvwstyle then
    strLst.add('wxLC_VIRTUAL');

  if wxLC_ICON in lstvwstyle then
    strLst.add('wxLC_ICON');

  if wxLC_SMALL_ICON in lstvwstyle then
    strLst.add('wxLC_SMALL_ICON ');

  if wxLC_ALIGN_TOP in lstvwstyle then
    strLst.add('wxLC_ALIGN_TOP ');

  if wxLC_ALIGN_LEFT in lstvwstyle then
    strLst.add('wxLC_ALIGN_LEFT ');

  if wxLC_AUTOARRANGE in lstvwstyle then
    strLst.add('wxLC_AUTOARRANGE');

  if wxLC_USER_TEXT in lstvwstyle then
    strLst.add('wxLC_USER_TEXT');

  if wxLC_EDIT_LABELS in lstvwstyle then
    strLst.add('wxLC_EDIT_LABELS');

  if wxLC_NO_HEADER in lstvwstyle then
    strLst.add('wxLC_NO_HEADER');

  if wxLC_SINGLE_SEL in lstvwstyle then
    strLst.add('wxLC_SINGLE_SEL');

  if wxLC_SORT_ASCENDING in lstvwstyle then
    strLst.add('wxLC_SORT_ASCENDING');

  if wxLC_SORT_DESCENDING in lstvwstyle then
    strLst.add('wxLC_SORT_DESCENDING');

  if wxLC_HRULES in lstvwstyle then
    strLst.add('wxLC_HRULES');

  if wxLC_VRULES in lstvwstyle then
    strLst.add('wxLC_VRULES');

  if strLst.Count = 0 then
  begin
    Result := '';
  end
  else
  begin
    for I := 0 to strLst.count - 1 do // Iterate
    begin
      if i <> strLst.count - 1 then
        Result := Result + strLst[i] + ' | '
      else
        Result := Result + ' ' + strLst[i] + ' ';
    end; // for
  end;
  //sendDebug(Result);
  strLst.destroy;
end;

function GetListViewSpecificStyle(stdstyle: TWxStdStyleSet; lstvwstyle:
  TWxLVStyleSet): string;
var
  strA: string;
begin
  Result := GetStdStyleString(stdstyle);
  strA := trim(GetListViewStyleString(lstvwstyle));
  if strA <> '' then
  begin
    if trim(Result) = '' then
      Result := strA
    else
      Result := Result + ' | ' + strA
  end;

  if trim(Result) <> '' then
    Result := ' , ' + Result;
end;

//Start here
function GetCheckboxSpecificStyle(stdstyle: TWxStdStyleSet;cbxstyle:TWxcbxStyleSet):String;
var
  strA: string;
begin
  Result := GetStdStyleString(stdstyle);
  strA := trim(GetCheckBoxStyleString(cbxstyle));
  if strA <> '' then
  begin
    if trim(Result) = '' then
      Result := strA
    else
      Result := Result + ' | ' + strA
  end;

  if trim(Result) <> '' then
    Result := ' , ' + Result;
end;

function GetTreeviewSpecificStyle(stdstyle: TWxStdStyleSet;tvstyle:TWxTVStyleSet):String;
var
  strA: string;
begin
  Result := GetStdStyleString(stdstyle);
  strA := trim(GetTreeViewStyleString(tvstyle));
  if strA <> '' then
  begin
    if trim(Result) = '' then
      Result := strA
    else
      Result := Result + ' | ' + strA
  end;

  if trim(Result) <> '' then
    Result := ' , ' + Result;
end;

function GetRadiobuttonSpecificStyle(stdstyle: TWxStdStyleSet;rbstyle:TWxrbStyleSet):String;
var
  strA: string;
begin
  Result := GetStdStyleString(stdstyle);
  strA := trim(GetRadioButtonStyleString(rbstyle));
  if strA <> '' then
  begin
    if trim(Result) = '' then
      Result := strA
    else
      Result := Result + ' | ' + strA
  end;

  if trim(Result) <> '' then
    Result := ' , ' + Result;
end;

function GetListboxSpecificStyle(stdstyle: TWxStdStyleSet;lbxstyle:TWxlbxStyleSet):String;
var
  strA: string;
begin
  Result := GetStdStyleString(stdstyle);
  strA := trim(GetListBoxStyleString(lbxstyle));
  if strA <> '' then
  begin
    if trim(Result) = '' then
      Result := strA
    else
      Result := Result + ' | ' + strA
  end;

  if trim(Result) <> '' then
    Result := ' , ' + Result;
end;

function GetGaugeSpecificStyle(stdstyle: TWxStdStyleSet;gagstyle:TWxgagStyleSet):String;
var
  strA: string;
begin
  Result := GetStdStyleString(stdstyle);
  strA := trim(GetGaugeStyleString(gagstyle));
  if strA <> '' then
  begin
    if trim(Result) = '' then
      Result := strA
    else
      Result := Result + ' | ' + strA
  end;

  if trim(Result) <> '' then
    Result := ' , ' + Result;
end;

function GetScrollbarSpecificStyle(stdstyle: TWxStdStyleSet;scbrstyle:TWxsbrStyleSet):String;
var
  strA: string;
begin
  Result := GetStdStyleString(stdstyle);
  strA := trim(GetScrollbarStyleString(scbrstyle));
  if strA <> '' then
  begin
    if trim(Result) = '' then
      Result := strA
    else
      Result := Result + ' | ' + strA
  end;

  if trim(Result) <> '' then
    Result := ' , ' + Result;
end;

function GetSpinButtonSpecificStyle(stdstyle: TWxStdStyleSet;sbtnstyle:TWxsbtnStyleSet):String;
var
  strA: string;
begin
  Result := GetStdStyleString(stdstyle);
  strA := trim(GetSpinButtonStyleString(sbtnstyle));
  if strA <> '' then
  begin
    if trim(Result) = '' then
      Result := strA
    else
      Result := Result + ' | ' + strA
  end;

  if trim(Result) <> '' then
    Result := ' , ' + Result;
end;

function GetSliderSpecificStyle(stdstyle: TWxStdStyleSet;sldrstyle:TWxsldrStyleSet):String;
var
  strA: string;
begin
  Result := GetStdStyleString(stdstyle);
  strA := trim(GetSliderStyleString(sldrstyle));
  if strA <> '' then
  begin
    if trim(Result) = '' then
      Result := strA
    else
      Result := Result + ' | ' + strA
  end;

  if trim(Result) <> '' then
    Result := ' , ' + Result;
end;



//function GetStaticBitmapSpecificStyle(stdstyle: TWxStdStyleSet;sbtmpstyle:TWxsbtmpStyleSet):String;
//var
//  strA: string;
//begin
//  Result := GetStdStyleString(stdstyle);
//  strA := trim(GetStaticBitmapStyleString(sbtmpstyle));
//  if strA <> '' then
//  begin
//    if trim(Result) = '' then
//      Result := strA
//    else
//      Result := Result + ' | ' + strA
//  end;
//
//  if trim(Result) <> '' then
//    Result := ' , ' + Result;
//end;

function GetCalendarCtrlSpecificStyle(stdstyle: TWxStdStyleSet;calctrlstyle:TWxcalctrlStyleSet):String;
var
  strA: string;
begin
  Result := GetStdStyleString(stdstyle);
  strA := trim(GetCalendarCtrlStyleString(calctrlstyle));
  if strA <> '' then
  begin
    if trim(Result) = '' then
      Result := strA
    else
      Result := Result + ' | ' + strA
  end;

  if trim(Result) <> '' then
    Result := ' , ' + Result;
end;

//function GetChoiceSpecificStyle(stdstyle: TWxStdStyleSet;chstyle:TWxchStyleSet):String;
//var
//  strA: string;
//begin
//  Result := GetStdStyleString(stdstyle);
//  strA := trim(GetChoiceStyleString(chstyle));
//  if strA <> '' then
//  begin
//    if trim(Result) = '' then
//      Result := strA
//    else
//      Result := Result + ' | ' + strA
//  end;
//
//  if trim(Result) <> '' then
//    Result := ' , ' + Result;
//end;

function GetNotebookSpecificStyle(stdstyle: TWxStdStyleSet;nbxstyle:TWxnbxStyleSet):String;
var
  strA: string;
begin
  Result := GetStdStyleString(stdstyle);
  strA := trim(GetNotebookStyleString(nbxstyle));
  if strA <> '' then
  begin
    if trim(Result) = '' then
      Result := strA
    else
      Result := Result + ' | ' + strA
  end;

  if trim(Result) <> '' then
    Result := ' , ' + Result;
end;

function GetRadioBoxSpecificStyle(stdstyle: TWxStdStyleSet;rbxstyle:TWxrbxStyleSet):String;
var
  strA: string;
begin
  Result := GetStdStyleString(stdstyle);
  strA := trim(GetRadioBoxStyleString(rbxstyle));
  if strA <> '' then
  begin
    if trim(Result) = '' then
      Result := strA
    else
      Result := Result + ' | ' + strA
  end;

  if trim(Result) <> '' then
    Result := ' , ' + Result;
end;

function GetStatusBarSpecificStyle(stdstyle: TWxStdStyleSet;sbrstyle:TWxsbrStyleSet):String;
var
  strA: string;
begin
  Result := GetStdStyleString(stdstyle);
  strA := trim(GetStatusBarStyleString(sbrstyle));
  if strA <> '' then
  begin
    if trim(Result) = '' then
      Result := strA
    else
      Result := Result + ' | ' + strA
  end;

  if trim(Result) <> '' then
    Result := ' , ' + Result;
end;

//function GetToggleButtonSpecificStyle(stdstyle: TWxStdStyleSet;tbtnstyle:TWxtbtnStyleSet):String;
//var
//  strA: string;
//begin
//  Result := GetStdStyleString(stdstyle);
//  strA := trim(GetToggleButtonStyleString(tbtnstyle));
//  if strA <> '' then
//  begin
//    if trim(Result) = '' then
//      Result := strA
//    else
//      Result := Result + ' | ' + strA
//  end;
//
//  if trim(Result) <> '' then
//    Result := ' , ' + Result;
//end;

function GetScrolledWindowSpecificStyle(stdstyle: TWxStdStyleSet;scrWinStyle:TWxScrWinStyleSet):String;
var
  strA: string;
begin
  Result := GetStdStyleString(stdstyle);
  strA := trim(GetScrolledWindowStyleString(scrWinStyle));
  if strA <> '' then
  begin
    if trim(Result) = '' then
      Result := strA
    else
      Result := Result + ' | ' + strA
  end;

  if trim(Result) <> '' then
    Result := ' , ' + Result;
end;

function GetHtmlWindowSpecificStyle(stdstyle: TWxStdStyleSet;htmlWinStyle:TWxHtmlWinStyleSet):String;
var
  strA: string;
begin
  Result := GetStdStyleString(stdstyle);
  strA := trim(GetHtmlWindowStyleString(htmlWinStyle));
  if strA <> '' then
  begin
    if trim(Result) = '' then
      Result := strA
    else
      Result := Result + ' | ' + strA
  end;

  if trim(Result) <> '' then
    Result := ' , ' + Result;
end;

function GetSplitterWindowSpecificStyle(stdstyle: TWxStdStyleSet;SplitterWinStyle:TWxSplitterWinStyleSet):String;
var
  strA: string;
begin
  Result := GetStdStyleString(stdstyle);
  strA := trim(GetSplitterWindowStyleString(SplitterWinStyle));
  if strA <> '' then
  begin
    if trim(Result) = '' then
      Result := strA
    else
      Result := Result + ' | ' + strA
  end;

  if trim(Result) <> '' then
    Result := ' , ' + Result;
end;

function GetToolBarSpecificStyle(stdstyle: TWxStdStyleSet;tbrstyle:TWxtbrStyleSet):String;
var
  strA: string;
begin
  Result := GetStdStyleString(stdstyle);
  strA := trim(GetToolBarStyleString(tbrstyle));
  if strA <> '' then
  begin
    if trim(Result) = '' then
      Result := strA
    else
      Result := Result + ' | ' + strA
  end;

  if trim(Result) <> '' then
    Result := ' , ' + Result;
end;

//End here
function RGBFormatStrToColor(strColorValue:String):TColor;
var
    strLst:TStringList;
begin
    strLst:=TStringList.Create;
    strTokenToStrings(strColorValue,',',strLst);
    if strLst.Count > 2 then
    begin
        Result:= RGB(StrToInt(strLst[0]),StrToInt(strLst[1]),StrToInt(strLst[2])) ;
    end
    else
        Result:= RGB(0,0,0) ;
        
    strLst.destroy;
end;
function GetColorFromString(strColorValue:String):TColor;
var
    strChoice,strCmd:String;
begin
    strChoice:=copy(strColorValue,5,length(strColorValue));
    strCmd:=copy(strColorValue,0,4);
    if  AnsiSameText(strCmd,'CUS:') then
    begin
        Result:=RGBFormatStrToColor(strChoice);
        exit;
    end;
    Result:=GetGeneralColorFromString(strChoice);
end;

function SizerAlignmentToStr(SizerVerticalAlignment:TWxSizerVerticalAlignment):String;
begin
    Result:='';
    if SizerVerticalAlignment = wxSZALIGN_TOP then
    begin
        Result:= 'wxALIGN_TOP';
        exit;
    end;
    if SizerVerticalAlignment = wxSZALIGN_BOTTOM then
    begin
        Result:= 'wxALIGN_BOTTOM';
        exit;
    end;

    if SizerVerticalAlignment = wxSZALIGN_CENTER_VERTICAL then
    begin
        Result:= 'wxALIGN_CENTER_VERTICAL';
        exit;
    end;

    if SizerVerticalAlignment = wxSZALIGN_GROW_VERTICAL then
    begin
        Result:= 'wxGROW';
        exit;
    end;

end;

function SizerAlignmentToStr(SizerHorizontalAlignment:TWxSizerHorizontalAlignment):String;
begin
    Result:='';
    if SizerHorizontalAlignment = wxSZALIGN_LEFT then
    begin
        Result:= 'wxALIGN_LEFT';
        exit;
    end;
    if SizerHorizontalAlignment = wxSZALIGN_RIGHT then
    begin
        Result:= 'wxALIGN_RIGHT';
        exit;
    end;

    if SizerHorizontalAlignment = wxSZALIGN_CENTER_HORIZONTAL then
    begin
        Result:= 'wxALIGN_CENTER_HORIZONTAL';
        exit;
    end;

    if SizerHorizontalAlignment = wxSZALIGN_GROW_HORIZONTAL then
    begin
        Result:= 'wxGROW';
        exit;
    end;

end;

function GetStdStyleString(stdStyle: TWxStdStyleSet): string;
var
  I: Integer;
  strLst: TStringList;
begin
  strLst := TStringList.Create;
  if wxSIMPLE_BORDER in stdStyle then
    strLst.add('wxSIMPLE_BORDER');

  if wxDOUBLE_BORDER in stdStyle then
    strLst.add('wxDOUBLE_BORDER');

  if wxSUNKEN_BORDER in stdStyle then
    strLst.add('wxSUNKEN_BORDER');

  if wxRAISED_BORDER in stdStyle then
    strLst.add('wxRAISED_BORDER');

  if wxSTATIC_BORDER in stdStyle then
    strLst.add('wxSTATIC_BORDER');

  if wxTRANSPARENT_WINDOW in stdStyle then
    strLst.add('wxTRANSPARENT_WINDOW');

  if wxNO_3D in stdStyle then
    strLst.add('wxNO_3D');

  if wxTAB_TRAVERSAL in stdStyle then
    strLst.add('wxTAB_TRAVERSAL');

  if wxWANTS_CHARS in stdStyle then
    strLst.add('wxWANTS_CHARS');

  if wxNO_FULL_REPAINT_ON_RESIZE in stdStyle then
    strLst.add('wxNO_FULL_REPAINT_ON_RESIZE');

  if wxVSCROLL in stdStyle then
    strLst.add('wxVSCROLL');

  if wxHSCROLL in stdStyle then
    strLst.add('wxHSCROLL');

  if wxCLIP_CHILDREN in stdStyle then
    strLst.add('wxCLIP_CHILDREN');

  if strLst.Count = 0 then
  begin
    Result := '';
  end
  else
  begin
    for I := 0 to strLst.count - 1 do // Iterate
    begin
      if i <> strLst.count - 1 then
        Result := Result + strLst[i] + ' | '
      else
        Result := Result + ' ' + strLst[i] + ' ';
    end; // for
  end;
  //sendDebug(Result);
  strLst.destroy;
end;

function GetButtonSpecificStyle(stdstyle: TWxStdStyleSet; dlgstyle:
  TWxBtnStyleSet): string;
var
  strA: string;
begin
  Result := GetStdStyleString(stdstyle);
  strA := trim(GetButtonStyleString(dlgstyle));
  if strA <> '' then
  begin
    if trim(Result) = '' then
      Result := strA
    else
      Result := Result + ' | ' + strA
  end;

  if trim(Result) <> '' then
    Result := ' , ' + Result;
end;


function GetLabelSpecificStyle(stdstyle: TWxStdStyleSet; dlgstyle:
  TWxLbStyleSet): string;
var
  strA: string;
begin
  Result := GetStdStyleString(stdstyle);
  strA := trim(GetLbStyleString(dlgstyle));
  if strA <> '' then
  begin
    if trim(Result) = '' then
      Result := strA
    else
      Result := Result + ' | ' + strA
  end;

  if trim(Result) <> '' then
    Result := ' , ' + Result;
end;

function GetDialogSpecificStyle(stdstyle: TWxStdStyleSet; dlgstyle:
  TWxDlgStyleSet): string;
var
  strA: string;
begin
  Result := GetStdStyleString(stdstyle);
  strA := trim(GetDlgStyleString(dlgstyle));
  if strA <> '' then
  begin
    if trim(Result) = '' then
      Result := strA
    else
      Result := Result + ' | ' + strA
  end;
end;

function IsControlWxWindow(ctrl:TControl):Boolean;
Var
    cntIntf:IWxWindowInterface;
begin
    Result:=false;
    if not assigned(ctrl) then
        Exit;
    Result:=ctrl.GetInterface(IID_IWxWindowInterface,cntIntf);
end;

function IsControlWxSizer(ctrl:TControl):Boolean;
Var
    cntIntf:IWxContainerAndSizerInterface;
begin
    Result:=false;
    if not assigned(ctrl) then
        Exit;
    Result:=ctrl.GetInterface(IID_IWxContainerAndSizerInterface,cntIntf);
end;
function IsControlWxContainer(ctrl:TControl):Boolean;
Var
    cntIntf:IWxContainerInterface;
begin
    Result:=false;
    if not assigned(ctrl) then
        Exit;
    Result:=ctrl.GetInterface(IDD_IWxContainerInterface,cntIntf);
end;

function IsControlWxToolBar(ctrl:TControl):Boolean;
Var
    cntIntf:IWxToolBarInterface;
begin
    Result:=false;
    if not assigned(ctrl) then
        Exit;
    Result:=ctrl.GetInterface(IID_IWxToolBarInterface,cntIntf);
end;

function IsControlWxStatusBar(ctrl:TControl):Boolean;
Var
    cntIntf:IWxStatusBarInterface;
begin
    Result:=false;
    if not assigned(ctrl) then
        Exit;
    Result:=ctrl.GetInterface(IDD_IWxStatusBarInterface,cntIntf);
end;

function IsControlWxNonVisible(ctrl:TControl):Boolean;
begin
    Result:=ctrl is TWxNonVisibleBaseComponent;
end;
function GetWxIDString(strID: string; intID: LongInt): string;
begin
  if intID > 0 then
  begin
    if trim(strID) = '' then
      Result := '-1'
    else
      Result := strID;
  end
  else
    Result := '-1';
end;
function GetNonVisualComponentCount(frmMainObj:TForm):Integer;
var
  I: Integer;
begin
    Result:=0;
    for I := 0 to frmMainObj.ComponentCount - 1 do    // Iterate
    begin
        if frmMainObj.components[i] is TWxNonVisibleBaseComponent then
            inc(Result);
    end;    // for
end;
function AlignmentToStr(taPos: TAlignment): string;
begin
  Result := '';
  case taPos of //
    taLeftJustify: Result := 'wxLIST_FORMAT_LEFT';
    taRightJustify: Result := 'wxLIST_FORMAT_RIGHT';
    taCenter: Result := 'wxLIST_FORMAT_CENTER';
  end; // case
end;

procedure ChangeControlZOrder(Sender: TObject; MoveUp: Boolean = True);
var
  I, Curr: Integer;
  Control: TControl;
  List: TList;
begin
  if Sender is TControl then
  begin
    // only components of type TControl and descendends
    // work
    Control := Sender as TControl;
    // has no parent, cannot move ;-)
    if Control.Parent = nil then
      // quit
      Exit;
    // determine position in z-order
    Curr := -1;
    for I := 0 to Pred(Control.Parent.ControlCount) do
      if Control.Parent.Controls[I] = Sender then
      begin
        Curr := I;
        Break;
      end;
    if Curr < 0 then
      // position not found, quit
      Exit;
    List := TList.Create;
    try
      if MoveUp then
      begin
        for I := Curr + 2 to Pred(Control.Parent.ControlCount) do
          // load other controls in group
          List.Add(Control.Parent.Controls[I]);
        Control.BringToFront;
        for I := 0 to Pred(List.Count) do
          // move other controls to front, too
          TControl(List[I]).BringToFront;
      end else begin
        for I := 0 to Curr - 2 do
          // load other controls in group
          List.Add(Control.Parent.Controls[I]);
        Control.SendToBack;
        for I := Pred(List.Count) downto 0 do
          // move other controls to back, too
          TControl(List[I]).SendToBack;
      end;
    finally
      List.Free;
    end;
  end;
end;

function GetXPMFromTPicture(XPMName:String;delphiBitmap:TBitmap):String;
var
  I: Integer;
   iWidth: Integer;
   iHeight: Integer;
   xpos, ypos, palindex, cindex, cpp: Integer;
   cp: PChar;
   pixc: Integer;
   outline: array[0..800] of Char;
   usechrs: array[0..64] of Char;
   rval: Real;
   ccol, tcol: TColor;
   lcol: ^TColor;
   image: ^Integer;
   cpos: ^Integer;
   pal: TList;
   found: Boolean;
   strlst:TStringList;
   strLine:String;
   label Finish1;
function pow(base: Integer; index: Integer): Integer;
var
   retval: Integer;
   ittr: Integer;
begin
retval:=1;
for ittr:=1 to index do retval:=retval*base;
pow:=retval;
end;

begin
    Result:='';
    Result:=GetXPMFromTPictureXXX(XPMName,delphiBitmap);
    exit;
    Result:='';
begin
//   Form1.Enabled:=False;
//   Form2.Gauge1.Progress:=0;
//   Form2.Show;
   StrPCopy(usechrs,' 0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&#');
   pal:=TList.Create;                    { Create TList to form our palette }
   delphiBitmap.Transparent:=true;
   iWidth:=delphiBitmap.Width;
   iHeight:=delphiBitmap.Height;
   if iWidth>180 then iWidth:=180;
   if iHeight>180 then iHeight:=180;
   GetMem(image,SizeOf(Integer)*iWidth*iHeight); { Allocate space for image }
                        { Note: Maximum of 65,528 bytes - 2 bytes per pixel }
   cpos:=@image^;     { This will be a pointer to current position in image }
   for ypos:=0 to iHeight-1 do begin
      for xpos:=0 to iWidth-1 do begin
         ccol:=delphiBitmap.Canvas.Pixels[xpos,ypos];
         found:=False;
         for palindex:=0 to pal.Count-1 do begin { Search palette for color }
            tcol:=TColor(pal.Items[palindex]^);
            if tcol=ccol then begin                             { Found it! }
               found:=True;
               cindex:=palindex;        { Remember it's position in palette }
               break;
            end;
         end;
         if not found then begin             { Add new color to our palette }
            New(lcol);
            lcol^:=ccol;
            pal.Add(lcol);
            cindex:=pal.Count-1;
         end;
         cpos^:=cindex;                { Store palette index for this pixel }
         Inc(cpos);                                 { Move on to next pixel }
      end;

//      Form2.Gauge1.Progress:=((ypos+1)*100) div iHeight;
//      Application.ProcessMessages;
//      If Form2.Cancelled then goto Finish1;     { We have been cancelled! }

   end;

   //AssignFile(F,SaveDialog1.Filename);
   //Rewrite(F);
   rval:=ln(pal.Count)/ln(64);
   cpp:=trunc(rval);
   if(cpp<>rval) then Inc(cpp);
   //Writeln(F,'/* XPM */');
   Result:=Result+'/* '+XPMName+' XPM */'+#13;
   StrFmt(outline,'static char *%s',[XPMName]);
   strLine:=outline;
   cp:=StrScan(outline,'.');
   if cp<>nil then cp[0]:=#0;
   StrCat(outline,'_XPM[]={');
   strLine:=outline;
   //Writeln(F,outline);
   Result:=Result+outline+#13;
   StrFmt(outline,'"%d %d %d %d",',[iWidth,iHeight,pal.Count,cpp]);
   strLine:=outline;
   //Writeln(F,outline);
   strLine:=outline;
   Result:=Result+outline+#13;
   for palindex:=0 to pal.Count-1 do begin
      ccol:=TColor(pal.Items[palindex]^);
      ccol:=ccol mod (256*256*256);
      StrFmt(outline,'"      c #%s%s%s",',[IntToHex(ccol mod 256,2), IntToHex((ccol div 256) mod 256,2),IntToHex(ccol div (256*256),2)]);
      strLine:=outline;
      cindex:=palindex;
      for pixc:=1 to cpp do begin
         outline[pixc]:=usechrs[cindex div pow(64,cpp-pixc)];
         cindex:=cindex mod pow(64,cpp-pixc);
         strLine:=outline;
      end;
      strLine:=outline;
//      if AnsiStartsText('"      c #',strLine) then
//      begin
//        strLine:='"      c #FFFFFF",';
//        Result:=Result+strLine+#13;
//      end
//      else
      begin
        Result:=Result+outline+#13;
      end;
   end;
   cpos:=@image^;
   for ypos:=0 to iHeight-1 do begin
      StrPCopy(outline,'"');
      for xpos:=0 to iWidth-1 do begin
         cindex:=cpos^;
         for pixc:=1 to cpp do begin
            outline[xpos*cpp+pixc]:=usechrs[cindex div pow(64,cpp-pixc)];
            cindex:=cindex mod pow(64,cpp-pixc);
         end;
         Inc(cpos);
      end;
      outline[cpp*(xpos+1)+1]:=#0;
      if ypos<iHeight-1 then StrCat(outline,'",') else StrCat(outline,'"};');
      //Writeln(F,outline);
      Result:=Result+outline+#13;
   end;
   //Finish2:
   //CloseFile(F);

   Finish1:
   FreeMem(image,SizeOf(Integer)*iWidth*iHeight);
   for palindex:=0 to pal.Count-1 do Dispose(pal.Items[palindex]);
   pal.Free;
//   Form2.Hide;
//   Form1.Enabled:=True;
    strlst:=TStringList.Create;
    strlst.text:=Result;
    for I := 0 to strlst.Count - 1 do    // Iterate
    begin
        strLine:=trim(strlst[i]);
        //sendDebug(IntToStr(i)+' Old # = '+IntToStr(Length(strlst[i])));

        if AnsiEndsText('","",',strLine) then
        begin
            //not tested
            strLine:=copy(strLine,0,length(strLine) -5);
            if not AnsiEndsText('",',strLine) then
                strlst[i]:=strLine+'",';
        end;

        strLine:=trim(strlst[i]);

        if AnsiEndsText('"",',strLine) then
        begin
            //tested
            strLine:=copy(strLine,0,length(strLine) -3);
            if not AnsiEndsText('",',strLine) then
                strlst[i]:=strLine+'",';
        end;

        strLine:=trim(strlst[i]);
        if AnsiEndsText('",",',strLine) then
        begin
            //tested
            strLine:=copy(strLine,0,length(strLine) -4);
            if not AnsiEndsText('",',strLine) then
                strlst[i]:=strLine+'",';
        end;

        strLine:=trim(strlst[i]);

        if AnsiEndsText('",""};',strLine) then
        begin
            strLine:=copy(strLine,0,length(strLine) -6);
            if not AnsiEndsText('"};',strLine) then
                strlst[i]:=strLine+'"};';
        end;

        strLine:=trim(strlst[i]);
       if AnsiEndsText('""};',strLine) then
        begin
            //not test
            strLine:=copy(strLine,0,length(strLine) -4);
            if not AnsiEndsText('"};',strLine) then
                strlst[i]:=strLine+'"};';
        end;

        strLine:=trim(strlst[i]);
       if AnsiEndsText('","};',strLine) then
        begin
            //not test
            strLine:=copy(strLine,0,length(strLine) -5);
            if not AnsiEndsText('"};',strLine) then
                strlst[i]:=strLine+'"};';
        end;

        //sendDebug(IntToStr(i)+' New # = '+IntToStr(Length(strlst[i])));

    end;    // for

    Result:=strlst.text;

    strlst.destroy;
end;
end;

function GetXPMFromTPictureXXX(XPMName:String;delphiBitmap:TBitmap):String;
var
  I: Integer;
   iWidth: Integer;
   iHeight: Integer;
   xpos, ypos, palindex, cindex, cpp: Integer;
   cp: PChar;
   pixc: Integer;
   outline: array[0..800] of Char;
   usechrs: array[0..64] of Char;
   rval: Real;
   ccol, tcol: TColor;
   lcol: ^TColor;
   image: ^Integer;
   cpos: ^Integer;
   pal: TList;
   found: Boolean;
   strlst:TStringList;
   strLine:String;
   label Finish1;
function pow(base: Integer; index: Integer): Integer;
var
   retval: Integer;
   ittr: Integer;
begin
retval:=1;
for ittr:=1 to index do retval:=retval*base;
pow:=retval;
end;

begin

    Result:='';
begin
//   Form1.Enabled:=False;
//   Form2.Gauge1.Progress:=0;
//   Form2.Show;
   StrPCopy(usechrs,' 0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&#');
   pal:=TList.Create;                    { Create TList to form our palette }
   delphiBitmap.Transparent:=true;
   iWidth:=delphiBitmap.Width;
   iHeight:=delphiBitmap.Height;
   if iWidth>180 then iWidth:=180;
   if iHeight>180 then iHeight:=180;
   GetMem(image,SizeOf(Integer)*iWidth*iHeight); { Allocate space for image }
                        { Note: Maximum of 65,528 bytes - 2 bytes per pixel }
   cpos:=@image^;     { This will be a pointer to current position in image }
   for ypos:=0 to iHeight-1 do begin
      for xpos:=0 to iWidth-1 do begin
         ccol:=delphiBitmap.Canvas.Pixels[xpos,ypos];
         found:=False;
         for palindex:=0 to pal.Count-1 do begin { Search palette for color }
            tcol:=TColor(pal.Items[palindex]^);
            if tcol=ccol then begin                             { Found it! }
               found:=True;
               cindex:=palindex;        { Remember it's position in palette }
               break;
            end;
         end;
         if not found then begin             { Add new color to our palette }
            New(lcol);
            lcol^:=ccol;
            pal.Add(lcol);
            cindex:=pal.Count-1;
         end;
         cpos^:=cindex;                { Store palette index for this pixel }
         Inc(cpos);                                 { Move on to next pixel }
      end;

//      Form2.Gauge1.Progress:=((ypos+1)*100) div iHeight;
//      Application.ProcessMessages;
//      If Form2.Cancelled then goto Finish1;     { We have been cancelled! }

   end;

   //AssignFile(F,SaveDialog1.Filename);
   //Rewrite(F);
   rval:=ln(pal.Count)/ln(64);
   cpp:=trunc(rval);
   if(cpp<>rval) then Inc(cpp);
   //Writeln(F,'/* XPM */');
   Result:=Result+'/* '+XPMName+' XPM */'+#13;
   StrFmt(outline,'static char *%s',[XPMName]);
   strLine:=outline;
   cp:=StrScan(outline,'.');
   if cp<>nil then cp[0]:=#0;
   StrCat(outline,'_XPM[]={');
   strLine:=outline;
   //Writeln(F,outline);
   Result:=Result+outline+#13;
   StrFmt(outline,'"%d %d %d %d",',[iWidth,iHeight,pal.Count,cpp]);
   strLine:=outline;
   //Writeln(F,outline);
   strLine:=outline;
   Result:=Result+outline+#13;
   for palindex:=0 to pal.Count-1 do begin
      ccol:=TColor(pal.Items[palindex]^);
      ccol:=ccol mod (256*256*256);
      if palindex = 0 then
        StrFmt(outline,'"      c None",',[''])
      else
        StrFmt(outline,'"      c #%s%s%s",',[IntToHex(ccol mod 256,2), IntToHex((ccol div 256) mod 256,2),IntToHex(ccol div (256*256),2)]);

      strLine:=outline;
      cindex:=palindex;
      for pixc:=1 to cpp do begin
         outline[pixc]:=usechrs[cindex div pow(64,cpp-pixc)];
         cindex:=cindex mod pow(64,cpp-pixc);
         strLine:=outline;
      end;
      strLine:=outline;
//      if AnsiStartsText('"      c #',strLine) then
//      begin
//        strLine:='"      c #FFFFFF",';
//        Result:=Result+strLine+#13;
//      end
//      else
      begin
        Result:=Result+outline+#13;
      end;
   end;
   cpos:=@image^;
   for ypos:=0 to iHeight-1 do begin
      StrPCopy(outline,'"');
      for xpos:=0 to iWidth-1 do begin
         cindex:=cpos^;
         for pixc:=1 to cpp do begin
            outline[xpos*cpp+pixc]:=usechrs[cindex div pow(64,cpp-pixc)];
            cindex:=cindex mod pow(64,cpp-pixc);
         end;
         Inc(cpos);
      end;
      outline[cpp*(xpos+1)+1]:=#0;
      if ypos<iHeight-1 then StrCat(outline,'",') else StrCat(outline,'"};');
      //Writeln(F,outline);
      Result:=Result+outline+#13;
   end;
   //Finish2:
   //CloseFile(F);

   Finish1:
   FreeMem(image,SizeOf(Integer)*iWidth*iHeight);
   for palindex:=0 to pal.Count-1 do Dispose(pal.Items[palindex]);
   pal.Free;
//   Form2.Hide;
//   Form1.Enabled:=True;
    strlst:=TStringList.Create;
    strlst.text:=Result;
    for I := 0 to strlst.Count - 1 do    // Iterate
    begin
        strLine:=trim(strlst[i]);
        //sendDebug(IntToStr(i)+' Old # = '+IntToStr(Length(strlst[i])));

        if AnsiEndsText('","",',strLine) then
        begin
            //not tested
            strLine:=copy(strLine,0,length(strLine) -5);
            if not AnsiEndsText('",',strLine) then
                strlst[i]:=strLine+'",';
        end;

        strLine:=trim(strlst[i]);

        if AnsiEndsText('"",',strLine) then
        begin
            //tested
            strLine:=copy(strLine,0,length(strLine) -3);
            if not AnsiEndsText('",',strLine) then
                strlst[i]:=strLine+'",';
        end;

        strLine:=trim(strlst[i]);
        if AnsiEndsText('",",',strLine) then
        begin
            //tested
            strLine:=copy(strLine,0,length(strLine) -4);
            if not AnsiEndsText('",',strLine) then
                strlst[i]:=strLine+'",';
        end;

        strLine:=trim(strlst[i]);

        if AnsiEndsText('",""};',strLine) then
        begin
            strLine:=copy(strLine,0,length(strLine) -6);
            if not AnsiEndsText('"};',strLine) then
                strlst[i]:=strLine+'"};';
        end;

        strLine:=trim(strlst[i]);
       if AnsiEndsText('""};',strLine) then
        begin
            //not test
            strLine:=copy(strLine,0,length(strLine) -4);
            if not AnsiEndsText('"};',strLine) then
                strlst[i]:=strLine+'"};';
        end;

        strLine:=trim(strlst[i]);
       if AnsiEndsText('","};',strLine) then
        begin
            //not test
            strLine:=copy(strLine,0,length(strLine) -5);
            if not AnsiEndsText('"};',strLine) then
                strlst[i]:=strLine+'"};';
        end;

        //sendDebug(IntToStr(i)+' New # = '+IntToStr(Length(strlst[i])));

    end;    // for

    Result:=strlst.text;

    strlst.destroy;
end;
end;

function GetRawXPMFromTPicture(XPMName:String;delphiBitmap:TBitmap):String;
var
   iWidth: Integer;
   iHeight: Integer;
   xpos, ypos, palindex, cindex, cpp: Integer;
   cp: PChar;
   pixc: Integer;
   outline: array[0..800] of Char;
   usechrs: array[0..64] of Char;
   rval: Real;
   ccol, tcol: TColor;
   lcol: ^TColor;
   image: ^Integer;
   cpos: ^Integer;
   pal: TList;
   found: Boolean;
   strLine:String;
   label Finish1;
function pow(base: Integer; index: Integer): Integer;
var
   retval: Integer;
   ittr: Integer;
begin
retval:=1;
for ittr:=1 to index do retval:=retval*base;
pow:=retval;
end;

begin

    Result:='';
begin
//   Form1.Enabled:=False;
//   Form2.Gauge1.Progress:=0;
//   Form2.Show;
   StrPCopy(usechrs,' 0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&#');
   pal:=TList.Create;                    { Create TList to form our palette }
   iWidth:=delphiBitmap.Width;
   iHeight:=delphiBitmap.Height;
   if iWidth>180 then iWidth:=180;
   if iHeight>180 then iHeight:=180;
   GetMem(image,SizeOf(Integer)*iWidth*iHeight); { Allocate space for image }
                        { Note: Maximum of 65,528 bytes - 2 bytes per pixel }
   cpos:=@image^;     { This will be a pointer to current position in image }
   for ypos:=0 to iHeight-1 do begin
      for xpos:=0 to iWidth-1 do begin
         ccol:=delphiBitmap.Canvas.Pixels[xpos,ypos];
         found:=False;
         for palindex:=0 to pal.Count-1 do begin { Search palette for color }
            tcol:=TColor(pal.Items[palindex]^);
            if tcol=ccol then begin                             { Found it! }
               found:=True;
               cindex:=palindex;        { Remember it's position in palette }
               break;
            end;
         end;
         if not found then begin             { Add new color to our palette }
            New(lcol);
            lcol^:=ccol;
            pal.Add(lcol);
            cindex:=pal.Count-1;
         end;
         cpos^:=cindex;                { Store palette index for this pixel }
         Inc(cpos);                                 { Move on to next pixel }
      end;

//      Form2.Gauge1.Progress:=((ypos+1)*100) div iHeight;
//      Application.ProcessMessages;
//      If Form2.Cancelled then goto Finish1;     { We have been cancelled! }

   end;

   //AssignFile(F,SaveDialog1.Filename);
   //Rewrite(F);
   rval:=ln(pal.Count)/ln(64);
   cpp:=trunc(rval);
   if(cpp<>rval) then Inc(cpp);
   //Writeln(F,'/* XPM */');
   Result:=Result+'/* '+XPMName+' XPM */'+#13;
   StrFmt(outline,'static char *%s',[XPMName]);
   strLine:=outline;
   cp:=StrScan(outline,'.');
   if cp<>nil then cp[0]:=#0;
   StrCat(outline,'_XPM[]={');
   strLine:=outline;
   //Writeln(F,outline);
   Result:=Result+outline+#13;
   StrFmt(outline,'"%d %d %d %d",',[iWidth,iHeight,pal.Count,cpp]);
   strLine:=outline;
   //Writeln(F,outline);
   strLine:=outline;
   Result:=Result+outline+#13;
   for palindex:=0 to pal.Count-1 do begin
      ccol:=TColor(pal.Items[palindex]^);
      ccol:=ccol mod (256*256*256);
      StrFmt(outline,'"      c #%s%s%s",',[IntToHex(ccol mod 256,2), IntToHex((ccol div 256) mod 256,2),IntToHex(ccol div (256*256),2)]);
      strLine:=outline;
      cindex:=palindex;
      for pixc:=1 to cpp do begin
         outline[pixc]:=usechrs[cindex div pow(64,cpp-pixc)];
         cindex:=cindex mod pow(64,cpp-pixc);
         strLine:=outline;
      end;
      strLine:=outline;
      Result:=Result+outline+#13;
   end;
   cpos:=@image^;
   for ypos:=0 to iHeight-1 do begin
      StrPCopy(outline,'"');
      for xpos:=0 to iWidth-1 do begin
         cindex:=cpos^;
         for pixc:=1 to cpp do begin
            outline[xpos*cpp+pixc]:=usechrs[cindex div pow(64,cpp-pixc)];
            cindex:=cindex mod pow(64,cpp-pixc);
         end;
         Inc(cpos);
      end;
      outline[cpp*(xpos+1)+1]:=#0;
      if ypos<iHeight-1 then StrCat(outline,'",') else StrCat(outline,'"};');
      //Writeln(F,outline);
      Result:=Result+outline+#13;
   end;
   //Finish2:
   //CloseFile(F);

   Finish1:
   FreeMem(image,SizeOf(Integer)*iWidth*iHeight);
   for palindex:=0 to pal.Count-1 do Dispose(pal.Items[palindex]);
   pal.Free;
end;
end;

function GenerateXPMDirectly(bmp:TBitmap;strCompName:String;strFileName:String):boolean;
var
  xpmFileDir:String;
  fileStrlst:TStringList;
  strXPMContent:String;

begin
    xpmFileDir:=IncludetrailingBackslash(ExtractFileDir(strFileName));

    if bmp.handle <> 0 then
    begin
        fileStrlst:=TStringList.Create;
        try
            strXPMContent:=GetXPMFromTPicture(strCompName,bmp);
            //strRawXPMContent:=GetRawXPMFromTPicture(strCompName,bmp);
            if trim(strXPMContent) <> '' then
            begin
                fileStrlst.Add(strXPMContent);
                fileStrlst.SaveToFile(xpmFileDir+strCompName+'_XPM.xpm');

            end;
//            if trim(strRawXPMContent) <> '' then
//            begin
//                fileStrlst.Clear;
//                fileStrlst.Add(strRawXPMContent);
//                fileStrlst.SaveToFile(xpmFileDir+strCompName+'_XPM-Raw.xpm');
//            end;

        except
        end;
        fileStrlst.destroy;
    end;

end;

function GetCppString(str:String):string;
begin
    Result:=str;
    strSearchReplace(Result,'"','\"',[srAll]);
end;

function OpenXPMImage(InpImage:TBitmap;strFname:String):boolean;
type
   TPalRec=record
      chrs: PChar;
      color: TColor;
   end;
function HexVal(chr: Char): Integer;
begin
   if (chr>='a') and (chr<='f') then HexVal:=Ord(chr)-Ord('a')+10 else HexVal:=Ord(chr)-Ord('0');
end;

var
   iWidth: Integer;
   iHeight: Integer;
   cpp, colors, col, ypos, xpos, hexc, infield: Integer;
   fieldstr: array[0..256] of Char;
   fieldval: Integer;
   rgb1, rgb2, rgb3: Integer;
   inpline: array[0..800] of Char;
   capline: array[0..256] of Char;
   pal: TList;
   palitem: ^TPalRec;
   cp1,cp2: PChar;
   F: TextFile;
   ColorDialog1:TColorDialog;
   label Finish1;
begin
begin
   AssignFile(F,strFname);
   Reset(F);
   inpline[0]:=#0;
   while inpline[0]<>'"' do Readln(F,inpline);

   infield:=0;
   fieldstr[0]:=#0;
   cp1:=inpline+1;
   while cp1<=StrScan(inpline+1,'"') do begin
      if (cp1[0]=' ') or (cp1[0]='"') then begin
         if fieldstr[0]<>#0 then begin
            Inc(infield);
            fieldval:=StrToInt(StrPas(fieldstr));
            fieldstr[0]:=#0;
            if infield=1 then iWidth:=fieldval;
            if infield=2 then iHeight:=fieldval;
            if infield=3 then colors:=fieldval;
            if infield=4 then cpp:=fieldval;
         end;
      end
      else begin
         fieldstr[StrLen(fieldstr)+1]:=#0;
         fieldstr[StrLen(fieldstr)]:=cp1[0];
      end;
      Inc(cp1);
   end;

   pal:=TList.Create;
   for col:=0 to colors-1 do begin
      inpline[0]:=#0;
      while inpline[0]<>'"' do Readln(F,inpline);
      inpline[cpp+1]:=#0;
      New(palitem);
      palitem^.chrs:=StrAlloc(cpp+1);
      StrCopy(palitem^.chrs,inpline+1);
      cp1:=StrScan(inpline+cpp+2,'c')+1;
      cp1:=SysUtils.StrLower(cp1);
      if StrScan(cp1,'#')=nil then begin
         StrCopy(capline,'What color does "');
         StrCat(capline,cp1);
         StrCat(capline,' represent?');
         Application.MessageBox(capline,'Select Color', mb_OK);
         ColorDialog1:=TColorDialog.Create(nil);
         ColorDialog1.Execute;
         palitem^.color:=ColorDialog1.Color;
      end
      else begin
         cp1:=StrScan(cp1,'#')+1;
         cp2:=StrScan(cp1,'"');
         cp2[0]:=#0;
         hexc:=StrLen(cp1) div 3;
         rgb1:=HexVal(cp1[0])*16+HexVal(cp1[1]);
         rgb2:=HexVal(cp1[hexc])*16+HexVal(cp1[hexc+1]);
         rgb3:=HexVal(cp1[2*hexc])*16+HexVal(cp1[2*hexc+1]);
         palitem^.color:=longint(rgb1)+256*longint(rgb2)+256*256*longint(rgb3);
      end;
      pal.Add(palitem);
   end;

   InpImage.Height:=iHeight;
   InpImage.Width:=iWidth;
   cp1:=StrAlloc(cpp+1);
   for ypos:=0 to iHeight-1 do begin
      inpline[0]:=#0;
      while inpline[0]<>'"' do Readln(F,inpline);
      for xpos:=0 to iWidth-1 do begin
         StrLCopy(cp1,inpline+xpos*cpp+1,cpp);
         for col:=0 to colors-1 do begin
             palitem:=pal.Items[col];
             if SysUtils.StrComp(palitem^.chrs,cp1)=0 then break;
         end;
         InpImage.Canvas.Pixels[xpos,ypos]:=palitem^.color;
      end;
      //Form2.Gauge1.Progress:=((ypos+1)*100) div iHeight;
      Application.ProcessMessages;
   end;

   Finish1:
   StrDispose(cp1);

   for col:=0 to colors-1 do begin
      palitem:=pal.Items[col];
      StrDispose(palitem^.chrs);
      Dispose(palitem);
   end;
   pal.Free;

   CloseFile(F);
end;

end;

function IcoToBmp(Icon : TIcon):TBitmap;
begin
   Result := TBitmap.Create;
   Result.Width := Icon.Width;
   Result.Height := Icon.Height;
   Result.Canvas.Draw(0, 0, Icon ) ;
end;

function GetwxColorFromString(strValue:String):String;
var
    strColorValue,strChoice:String;
begin
    Result:='';
    strColorValue:=trim(strValue);
    strColorValue:=copy(strColorValue,5,length(strColorValue));
    strChoice:=copy(trim(strValue),0,4);

    if AnsiSameText(strChoice,'CUS:') then
    begin
        Result:='wxColour('+strColorValue+')';
        exit;
    end;

    if AnsiSameText(strChoice,'DEF:') then
    begin
        Result:='';
        exit;
    end;


    if AnsiSameText(strColorValue,'wxBLACK') then
    begin
        Result:='wxColour(*wxBLACK)';
        exit;
    end;
    if AnsiSameText(strColorValue,'wxWHITE') then
    begin
        Result:='wxColour(*wxWHITE)';
        exit;
    end;

    if AnsiSameText(strColorValue,'wxRED') then
    begin
        Result:='*wxRED';
        exit;
    end;
if AnsiSameText(strColorValue,'wxBLUE') then
begin
        Result:='*wxBLUE';
    exit;
end;
if AnsiSameText(strColorValue,'wxGREEN') then
begin
        Result:='*wxGREEN';
    exit;
end;
if AnsiSameText(strColorValue,'wxCYAN') then
begin
        Result:='*wxCYAN';
    exit;
end;
if AnsiSameText(strColorValue,'wxLIGHT_GREY') then
begin
        Result:='*wxLIGHT_GREY';
    exit;
end;
if AnsiSameText(strColorValue,'wxSYS_COLOUR_SCROLLBAR') then
begin
        Result:='wxSystemSettings::GetColour(wxSYS_COLOUR_SCROLLBAR)';
    exit;
end;

if AnsiSameText(strColorValue,'wxSYS_COLOUR_BACKGROUND') then
begin
        Result:='wxSystemSettings::GetColour()';
    exit;
end;

if AnsiSameText(strColorValue,'wxSYS_COLOUR_ACTIVECAPTION') then
begin
        Result:='wxSystemSettings::GetColour(wxSYS_COLOUR_ACTIVECAPTION)';
    exit;
end;
if AnsiSameText(strColorValue,'wxSYS_COLOUR_INACTIVECAPTION') then
begin
        Result:='wxSystemSettings::GetColour(wxSYS_COLOUR_INACTIVECAPTION)';
    exit;
end;
if AnsiSameText(strColorValue,'wxSYS_COLOUR_MENU') then
begin
        Result:='wxSystemSettings::GetColour(wxSYS_COLOUR_MENU)';
    exit;
end;
if AnsiSameText(strColorValue,'wxSYS_COLOUR_WINDOW') then
begin
        Result:='wxSystemSettings::GetColour(wxSYS_COLOUR_WINDOW)';
    exit;
end;
if AnsiSameText(strColorValue,'wxSYS_COLOUR_WINDOWFRAME') then
begin
        Result:='wxSystemSettings::GetColour(wxSYS_COLOUR_WINDOWFRAME)';
    exit;
end;
if AnsiSameText(strColorValue,'wxSYS_COLOUR_MENUTEXT') then
begin
        Result:='wxSystemSettings::GetColour(wxSYS_COLOUR_MENUTEXT)';
    exit;
end;
if AnsiSameText(strColorValue,'wxSYS_COLOUR_WINDOWTEXT') then
begin
        Result:='wxSystemSettings::GetColour(wxSYS_COLOUR_WINDOWTEXT)';
    exit;
end;
if AnsiSameText(strColorValue,'wxSYS_COLOUR_CAPTIONTEXT') then
begin
        Result:='wxSystemSettings::GetColour(wxSYS_COLOUR_CAPTIONTEXT)';
    exit;
end;
if AnsiSameText(strColorValue,'wxSYS_COLOUR_ACTIVEBORDER') then
begin
        Result:='wxSystemSettings::GetColour(wxSYS_COLOUR_ACTIVEBORDER)';
    exit;
end;
if AnsiSameText(strColorValue,'wxSYS_COLOUR_INACTIVEBORDER') then
begin
        Result:='wxSystemSettings::GetColour(wxSYS_COLOUR_INACTIVEBORDER)';
    exit;
end;
if AnsiSameText(strColorValue,'wxSYS_COLOUR_APPWORKSPACE') then
begin
        Result:='wxSystemSettings::GetColour(wxSYS_COLOUR_APPWORKSPACE)';
    exit;
end;
if AnsiSameText(strColorValue,'wxSYS_COLOUR_HIGHLIGHT') then
begin
        Result:='wxSystemSettings::GetColour(wxSYS_COLOUR_HIGHLIGHT)';
    exit;
end;
if AnsiSameText(strColorValue,'wxSYS_COLOUR_HIGHLIGHTTEXT') then
begin
        Result:='wxSystemSettings::GetColour(wxSYS_COLOUR_HIGHLIGHTTEXT)';
    exit;
end;
if AnsiSameText(strColorValue,'wxSYS_COLOUR_BTNFACE') then
begin
        Result:='wxSystemSettings::GetColour(wxSYS_COLOUR_BTNFACE)';
    exit;
end;
if AnsiSameText(strColorValue,'wxSYS_COLOUR_BTNSHADOW') then
begin
        Result:='wxSystemSettings::GetColour(wxSYS_COLOUR_BTNSHADOW)';
    exit;
end;
if AnsiSameText(strColorValue,'wxSYS_COLOUR_GRAYTEXT') then
begin
        Result:='wxSystemSettings::GetColour(wxSYS_COLOUR_GRAYTEXT)';
    exit;
end;
if AnsiSameText(strColorValue,'wxSYS_COLOUR_BTNTEXT') then
begin
        Result:='wxSystemSettings::GetColour(wxSYS_COLOUR_BTNTEXT)';
    exit;
end;
if AnsiSameText(strColorValue,'wxSYS_COLOUR_INACTIVECAPTIONTEXT') then
begin
        Result:='wxSystemSettings::GetColour(wxSYS_COLOUR_INACTIVECAPTIONTEXT)';
    exit;
end;
if AnsiSameText(strColorValue,'wxSYS_COLOUR_BTNHIGHLIGHT') then
begin
        Result:='wxSystemSettings::GetColour(wxSYS_COLOUR_BTNHIGHLIGHT)';
    exit;
end;
if AnsiSameText(strColorValue,'wxSYS_COLOUR_3DDKSHADOW') then
begin
        Result:='wxSystemSettings::GetColour(wxSYS_COLOUR_3DDKSHADOW)';
    exit;
end;
if AnsiSameText(strColorValue,'wxSYS_COLOUR_3DLIGHT') then
begin
        Result:='wxSystemSettings::GetColour(wxSYS_COLOUR_3DLIGHT)';
    exit;
end;
if AnsiSameText(strColorValue,'wxSYS_COLOUR_INFOTEXT') then
begin
        Result:='wxSystemSettings::GetColour(wxSYS_COLOUR_INFOTEXT)';
    exit;
end;
if AnsiSameText(strColorValue,'wxSYS_COLOUR_INFOBK') then
begin
        Result:='wxSystemSettings::GetColour(wxSYS_COLOUR_INFOBK)';
    exit;
end;
if AnsiSameText(strColorValue,'wxSYS_COLOUR_DESKTOP') then
begin
        Result:='wxSystemSettings::GetColour(wxSYS_COLOUR_DESKTOP)';
    exit;
end;
if AnsiSameText(strColorValue,'wxSYS_COLOUR_3DFACE') then
begin
        Result:='wxSystemSettings::GetColour(wxSYS_COLOUR_3DFACE)';
    exit;
end;
if AnsiSameText(strColorValue,'wxSYS_COLOUR_3DSHADOW') then
begin
        Result:='wxSystemSettings::GetColour(wxSYS_COLOUR_3DSHADOW)';
    exit;
end;
if AnsiSameText(strColorValue,'wxSYS_COLOUR_3DHIGHLIGHT') then
begin
        Result:='wxSystemSettings::GetColour(wxSYS_COLOUR_3DHIGHLIGHT)';
    exit;
end;
if AnsiSameText(strColorValue,'wxSYS_COLOUR_3DHILIGHT') then
begin
        Result:='wxSystemSettings::GetColour(wxSYS_COLOUR_3DHILIGHT)';
    exit;
end;
if AnsiSameText(strColorValue,'wxSYS_COLOUR_BTNHILIGHT') then
begin
        Result:='wxSystemSettings::GetColour(wxSYS_COLOUR_BTNHILIGHT)';
    exit;
end;

end;

function PaperIDToString(sizeitem:TWxPaperSizeItem):String;
begin
    Result:='wxPAPER_NONE';
    
    if sizeitem = wxPAPER_NONE then
    begin
        Result:='wxPAPER_NONE';
        Exit;
    end;


    if sizeitem = wxPAPER_LETTER then
    begin
        Result:='wxPAPER_LETTER';
        Exit;
    end;
    if sizeitem = wxPAPER_LEGAL then
    begin
        Result:='wxPAPER_LEGAL';
        Exit;
    end;
    if sizeitem = wxPAPER_A4 then
    begin
        Result:='wxPAPER_A4';
        Exit;
    end;
    if sizeitem = wxPAPER_CSHEET then
    begin
        Result:='wxPAPER_CSHEET';
        Exit;
    end;
    if sizeitem = wxPAPER_DSHEET then
    begin
        Result:='wxPAPER_DSHEET';
        Exit;
    end;
    if sizeitem = wxPAPER_ESHEET then
    begin
        Result:='wxPAPER_ESHEET';
        Exit;
    end;
    if sizeitem = wxPAPER_LETTERSMALL then
    begin
        Result:='wxPAPER_LETTERSMALL';
        Exit;
    end;

    if sizeitem = wxPAPER_TABLOID then
    begin
        Result:='wxPAPER_TABLOID';
        Exit;
    end;
  if sizeitem = wxPAPER_LEDGER then
    begin
        Result:='wxPAPER_LEDGER';
        Exit;
    end;
    if sizeitem = wxPAPER_STATEMENT then
    begin
        Result:='wxPAPER_STATEMENT';
        Exit;
    end;
    if sizeitem =wxPAPER_EXECUTIVE  then
    begin
        Result:='wxPAPER_EXECUTIVE';
        Exit;
    end;
    if sizeitem = wxPAPER_NOTE then
    begin
        Result:='wxPAPER_NOTE';
        Exit;
    end;
    if sizeitem = wxPAPER_ENV_9 then
    begin
        Result:='wxPAPER_ENV_9';
        Exit;
    end;
    if sizeitem = wxPAPER_A3 then
    begin
        Result:='wxPAPER_A3';
        Exit;
    end;
    if sizeitem = wxPAPER_A4SMALL then
    begin
        Result:='wxPAPER_A4SMALL';
        Exit;
    end;
    if sizeitem = wxPAPER_A5 then
    begin
        Result:='wxPAPER_A5';
        Exit;
    end;
    if sizeitem = wxPAPER_B4 then
    begin
        Result:='wxPAPER_B4';
        Exit;
    end;

    if sizeitem =  wxPAPER_B5 then
    begin
        Result:='wxPAPER_B5';
        Exit;
    end;
    if sizeitem = wxPAPER_FOLIO then
    begin
        Result:='wxPAPER_FOLIO';
        Exit;
    end;
    if sizeitem = wxPAPER_QUARTO then
    begin
        Result:='wxPAPER_QUARTO';
        Exit;
    end;
    if sizeitem = wxPAPER_10X14 then
    begin
        Result:='wxPAPER_10X14';
        Exit;
    end;

    if sizeitem = wxPAPER_11X17 then
    begin
        Result:='wxPAPER_11X17';
        Exit;
    end;
    if sizeitem = wxPAPER_ENV_10 then
    begin
        Result:='wxPAPER_ENV_10';
        Exit;
    end;
    if sizeitem = wxPAPER_ENV_11 then
    begin
        Result:='wxPAPER_ENV_11';
        Exit;
    end;
    if sizeitem = wxPAPER_ENV_12 then
    begin
        Result:='wxPAPER_ENV_12';
        Exit;
    end;
    if sizeitem = wxPAPER_ENV_14 then
    begin
        Result:='wxPAPER_ENV_14';
        Exit;
    end;
    if sizeitem = wxPAPER_ENV_DL then
    begin
        Result:='wxPAPER_ENV_DL';
        Exit;
    end;
    if sizeitem = wxPAPER_ENV_C5 then
    begin
        Result:='wxPAPER_ENV_C5';
        Exit;
    end;
    if sizeitem = wxPAPER_ENV_C3  then
    begin
        Result:='wxPAPER_ENV_C3';
        Exit;
    end;
    if sizeitem = wxPAPER_ENV_C4 then
    begin
        Result:='wxPAPER_ENV_C4';
        Exit;
    end;
    if sizeitem = wxPAPER_ENV_C6 then
    begin
        Result:='wxPAPER_ENV_C6';
        Exit;
    end;
    if sizeitem = wxPAPER_ENV_C65 then
    begin
        Result:='wxPAPER_ENV_C65';
        Exit;
    end;
    if sizeitem = wxPAPER_ENV_B4 then
    begin
        Result:='wxPAPER_ENV_B4';
        Exit;
    end;

    if sizeitem = wxPAPER_ENV_B5 then
    begin
        Result:='wxPAPER_ENV_B5';
        Exit;
    end;
    if sizeitem = wxPAPER_ENV_B6 then
    begin
        Result:='wxPAPER_ENV_B6';
        Exit;
    end;
    if sizeitem = wxPAPER_ENV_ITALY then
    begin
        Result:='wxPAPER_ENV_ITALY';
        Exit;
    end;
    if sizeitem = wxPAPER_ENV_MONARCH then
    begin
        Result:='wxPAPER_ENV_MONARCH';
        Exit;
    end;
    if sizeitem =  wxPAPER_ENV_PERSONAL then
    begin
        Result:='wxPAPER_ENV_PERSONAL';
        Exit;
    end;
    if sizeitem = wxPAPER_FANFOLD_US then
    begin
        Result:='wxPAPER_FANFOLD_US';
        Exit;
    end;
    if sizeitem = wxPAPER_FANFOLD_STD_GERMAN then
    begin
        Result:='wxPAPER_FANFOLD_STD_GERMAN';
        Exit;
    end;
    if sizeitem = wxPAPER_FANFOLD_LGL_GERMAN then
    begin
        Result:='wxPAPER_FANFOLD_LGL_GERMAN';
        Exit;
    end;
    
end;
//-------------------------------------------------------------------------------
function IsDefaultColorStr(strvalue:String):boolean;
begin
    strvalue:=trim(strvalue);
    if strvalue = '' then
    begin
        Result:=true;
        exit;
    end;

    if UpperCase(copy(strvalue,0,4)) = 'DEF:' then
	    result:=true
    else
	    result:=false
end;

function GetGeneralColorFromString(strColorValue:String):TColor;
begin
    strColorValue:=trim(strColorValue);
    Result:=0+clBlack;
if AnsiSameText(strColorValue,'wxBLACK') then
begin
    Result:=clBlack;
    exit;
end;
if AnsiSameText(strColorValue,'wxWHITE') then
begin
    Result:=clWhite;
    exit;
end;

if AnsiSameText(strColorValue,'wxRED') then
begin
    Result:=clred;
    exit;
end;
if AnsiSameText(strColorValue,'wxBLUE') then
begin
    Result:=clBlue;
    exit;
end;
if AnsiSameText(strColorValue,'wxGREEN') then
begin
    Result:=clGreen;
    exit;
end;
if AnsiSameText(strColorValue,'wxCYAN') then
begin
    Result:=clAqua	;
    exit;
end;
if AnsiSameText(strColorValue,'wxLIGHT_GREY') then
begin
    Result:=clLtGray	;
    exit;
end;
if AnsiSameText(strColorValue,'wxSYS_COLOUR_SCROLLBAR') then
begin
    Result:=clScrollBar	;
    exit;
end;

if AnsiSameText(strColorValue,'wxSYS_COLOUR_BACKGROUND') then
begin
    Result:=clBackground;
    exit;
end;

if AnsiSameText(strColorValue,'wxSYS_COLOUR_ACTIVECAPTION') then
begin
    Result:=clActiveCaption	;
    exit;
end;
if AnsiSameText(strColorValue,'wxSYS_COLOUR_INACTIVECAPTION') then
begin
    Result:=clInactiveCaption	;
    exit;
end;
if AnsiSameText(strColorValue,'wxSYS_COLOUR_MENU') then
begin
    Result:=clMenu	;
    exit;
end;
if AnsiSameText(strColorValue,'wxSYS_COLOUR_WINDOW') then
begin
    Result:=clWindow;
    exit;
end;
if AnsiSameText(strColorValue,'wxSYS_COLOUR_WINDOWFRAME') then
begin
    Result:=clWindowFrame	;
    exit;
end;
if AnsiSameText(strColorValue,'wxSYS_COLOUR_MENUTEXT') then
begin
    Result:=clMenuText	;
    exit;
end;
if AnsiSameText(strColorValue,'wxSYS_COLOUR_WINDOWTEXT') then
begin
    Result:=clWindowText;
    exit;
end;
if AnsiSameText(strColorValue,'wxSYS_COLOUR_CAPTIONTEXT') then
begin
    Result:=clCaptionText;
    exit;
end;
if AnsiSameText(strColorValue,'wxSYS_COLOUR_ACTIVEBORDER') then
begin
    Result:=clActiveBorder	;
    exit;
end;
if AnsiSameText(strColorValue,'wxSYS_COLOUR_INACTIVEBORDER') then
begin
    Result:=clInactiveBorder;
    exit;
end;
if AnsiSameText(strColorValue,'wxSYS_COLOUR_APPWORKSPACE') then
begin
    Result:=clAppWorkSpace;
    exit;
end;
if AnsiSameText(strColorValue,'wxSYS_COLOUR_HIGHLIGHT') then
begin
    Result:=clHighlight	;
    exit;
end;
if AnsiSameText(strColorValue,'wxSYS_COLOUR_HIGHLIGHTTEXT') then
begin
    Result:=clHighlightText;
    exit;
end;
if AnsiSameText(strColorValue,'wxSYS_COLOUR_BTNFACE') then
begin
    Result:=clBtnFace	;
    exit;
end;
if AnsiSameText(strColorValue,'wxSYS_COLOUR_BTNSHADOW') then
begin
    Result:=clBtnShadow;
    exit;
end;
if AnsiSameText(strColorValue,'wxSYS_COLOUR_GRAYTEXT') then
begin
    Result:=clGrayText	;
    exit;
end;
if AnsiSameText(strColorValue,'wxSYS_COLOUR_BTNTEXT') then
begin
    Result:=clBtnText	;
    exit;
end;
if AnsiSameText(strColorValue,'wxSYS_COLOUR_INACTIVECAPTIONTEXT') then
begin
    Result:=clInactiveCaptionText	;
    exit;
end;
if AnsiSameText(strColorValue,'wxSYS_COLOUR_BTNHIGHLIGHT') then
begin
    Result:=clBtnHighlight	;
    exit;
end;
if AnsiSameText(strColorValue,'wxSYS_COLOUR_3DDKSHADOW') then
begin
    Result:=cl3DDkShadow;
    exit;
end;
if AnsiSameText(strColorValue,'wxSYS_COLOUR_3DLIGHT') then
begin
    Result:=cl3DLight 	;
    exit;
end;
if AnsiSameText(strColorValue,'wxSYS_COLOUR_INFOTEXT') then
begin
    Result:=clInfoText;
    exit;
end;
if AnsiSameText(strColorValue,'wxSYS_COLOUR_INFOBK') then
begin
    Result:=clInfoBk 	;
    exit;
end;
if AnsiSameText(strColorValue,'wxSYS_COLOUR_DESKTOP') then
begin
    Result:=clBackground ;
    exit;
end;
if AnsiSameText(strColorValue,'wxSYS_COLOUR_3DFACE') then
begin
    Result:=clBtnFace	;
    exit;
end;
if AnsiSameText(strColorValue,'wxSYS_COLOUR_3DSHADOW') then
begin
    Result:=clBtnShadow	;
    exit;
end;
if AnsiSameText(strColorValue,'wxSYS_COLOUR_3DHIGHLIGHT') then
begin
    Result:=clBtnHighlight	;
    exit;
end;
if AnsiSameText(strColorValue,'wxSYS_COLOUR_3DHILIGHT') then
begin
    Result:=clBtnHighlight	;
    exit;
end;
if AnsiSameText(strColorValue,'wxSYS_COLOUR_BTNHILIGHT') then
begin
    Result:=clBtnHighlight	;
    exit;
end;
end;
{-------------------------------------------------------}
//=== { TSLEditorForm } ======================================================

type
  TSLEditorForm = class(TCustomForm)
  public
    grp: TGroupBox;
    lbl: TLabel;
    mm: TMemo;
    btnOK: TButton;
    btnCancel: TButton;
    OnContentsChanged: TNotifyEvent;
    constructor CreateNew(AOwner: TComponent); reintroduce;
    procedure MemoChanged(Sender: TObject);
  end;

constructor TSLEditorForm.CreateNew(AOwner: TComponent);
begin
  inherited CreateNew(AOwner);
  Caption := 'String List Editor';
  Width := 435;
  Height := 305;
  BorderIcons := [biSystemMenu];
  grp := TGroupBox.Create(Self);
  grp.Parent := Self;
  grp.Left := 10;
  grp.Top := 10;
  grp.Width := ClientWidth - 20;
  grp.Height := 230;
  grp.Anchors := [akTop, akLeft, akRight, akBottom];
  lbl := TLabel.Create(Self);
  lbl.Parent := grp;
  lbl.Caption := '';
  lbl.AutoSize := False;
  lbl.Left := 10;
  lbl.Top := 10;
  lbl.Width := grp.ClientWidth - 20;
  lbl.Anchors := [akTop, akLeft, akRight];
  mm := TMemo.Create(Self);
  mm.Parent := grp;
  mm.Left := 10;
  mm.Top := 30;
  mm.Width := grp.ClientWidth - 20;
  mm.Height := grp.ClientHeight - 40;
  mm.Anchors := [akTop, akLeft, akRight, akBottom];
  mm.ScrollBars := ssBoth;
  mm.WordWrap := False;
  mm.WantReturns := True;
  mm.WantTabs := False;
  mm.OnChange := MemoChanged;
  btnOK := TButton.Create(Self);
  btnOK.Parent := Self;
  btnOK.ModalResult := mrOK;
  btnOK.Default := True;
  btnOK.Caption := 'Ok';
  btnOK.Left := ClientWidth - 15 - 2 * btnOK.Width;
  btnOK.Top := ClientHeight - 5 - btnOK.Height;
  btnOK.Anchors := [akRight, akBottom];
  btnCancel := TButton.Create(Self);
  btnCancel.Parent := Self;
  btnCancel.ModalResult := mrCancel;
  btnCancel.Cancel := True;
  btnCancel.Caption := 'Cancel';
  btnCancel.Left := ClientWidth - 10 - btnCancel.Width;
  btnCancel.Top := ClientHeight - 5 - btnCancel.Height;
  btnCancel.Anchors := [akRight, akBottom];
  Constraints.MinWidth := 2 * btnOK.Width + 25 + (Width - ClientWidth);
  Constraints.MinHeight := (ClientHeight - mm.ClientHeight) + 43 + (Height - ClientHeight);
end;

procedure TSLEditorForm.MemoChanged(Sender: TObject);
var
  I: Integer;
begin
  I := mm.Lines.Count;
  if I <> 1 then
    lbl.Caption := IntToStr(I) + ' lines'
  else
    lbl.Caption := '1 line';
  if Assigned(OnContentsChanged) then
    OnContentsChanged(Sender);
end;

//=== { TJvInspectorTStringsItem } ===========================================

constructor TWxJvInspectorTStringsItem.Create(const AParent: TJvCustomInspectorItem;
  const AData: TJvCustomInspectorData);
begin
  inherited Create(AParent, AData);
  RowSizing.MinHeight := irsItemHeight;
  Flags := Flags + [iifEditButton];
end;

procedure TWxJvInspectorTStringsItem.ContentsChanged(Sender: TObject);
var
  Obj: TStrings;
begin
  Obj := TStrings(Data.AsOrdinal);
  Obj.Text := TMemo(Sender).Lines.Text;
end;

function TWxJvInspectorTStringsItem.GetDisplayValue: string;
begin
    Result := 'Edit Strings';
end;

procedure TWxJvInspectorTStringsItem.Edit;
var
  SL: TStrings;
begin
  with TSLEditorForm.CreateNew(Inspector) do
  try
    SL := TStrings(Data.AsOrdinal);
    mm.Lines.Assign(SL);
    if AutoUpdate then
      OnContentsChanged := ContentsChanged;
    if ShowModal = mrOK then
    begin
      SL.Assign(mm.Lines);
      if assigned(TJvInspector(GetInspector).OnDataValueChanged) then
      begin
        TJvInspector(GetInspector).OnDataValueChanged(nil,Data);
      end;
    end;
  finally
    Free;
  end;
end;

procedure TWxJvInspectorTStringsItem.SetDisplayValue(const Value: string);
var
  Obj: TObject;
begin
  if Multiline then
  begin
    Obj := TObject(Data.AsOrdinal);
    TStrings(Obj).Text := Value;
  end;
end;

procedure TWxJvInspectorTStringsItem.SetFlags(const Value: TInspectorItemFlags);
var
  OldMask: TInspectorItemFlags;
  NewMask: TInspectorItemFlags;
begin
  { The item has either an edit button or is multiline. If one of them is set,
    the other one will be removed }
  OldMask := Flags * [iifEditButton, iifMultiLine];
  NewMask := Value * [iifEditButton, iifMultiLine];
  if OldMask <> NewMask then
  begin
    if Multiline and not (iifEditButton in OldMask) and (iifEditButton in NewMask) then
      inherited SetFlags(Value - [iifMultiLine]) // iifEditButton has changed
    else
    if not Multiline and (iifEditButton in OldMask) and (iifMultiLine in NewMask) then
      inherited SetFlags(Value - [iifEditButton]) // iifMultiLine has changed
    else
      inherited SetFlags(Value); // Neither flag has changed. Should never occur.
  end
  else // Flags have not changed
    inherited SetFlags(Value);
  if RowSizing <> nil then
  begin
    RowSizing.Sizable := Multiline; // Update sizable state
    if not Multiline then
      RowSizing.SizingFactor := irsNoReSize
    else
      RowSizing.SizingFactor := irsValueHeight;
  end;
end;

class procedure TWxJvInspectorTStringsItem.RegisterAsDefaultItem;
begin
  with TJvCustomInspectorData.ItemRegister do
  begin
    if IndexOf(Self) = -1 then
      Add(TJvInspectorTypeInfoRegItem.Create(Self, TypeInfo(TStrings)));
  end;
end;


{-------------------------------------------------------}
procedure TJvInspectorColorEditItem.Edit;
var
  ColorEditForm: TColorEdit;
  strColorValue:String;
  compIntf: IWxComponentInterface;
begin

  ColorEditForm := TColorEdit.Create(GetParentForm(Inspector));
  try
    if (TJvInspectorPropData(Self.GetData()).Instance).GetInterface(IID_IWxComponentInterface, compIntf) then
    begin
        if AnsiSameText(Data.Name ,'Wx_ProxyBGColorString') then
        begin
            strColorValue:=compIntf.GetBGColor;
        end;
        if AnsiSameText(Data.Name ,'Wx_ProxyFGColorString') then
        begin
            strColorValue:=compIntf.GetFGColor;
        end;
    end;

    ColorEditForm.SetColorString(strColorValue);

    if ColorEditForm.ShowModal  <> mrOK then
        exit;

    strColorValue:=ColorEditForm.GetColorString;

    if (TJvInspectorPropData(Self.GetData()).Instance).GetInterface(IID_IWxComponentInterface, compIntf) then
    begin
        if AnsiSameText(Data.Name ,'Wx_ProxyBGColorString') then
        begin
            compIntf.SetBGColor(strColorValue);
        end;
        if AnsiSameText(Data.Name ,'Wx_ProxyFGColorString') then
        begin
            compIntf.SetFGColor(strColorValue);
        end;
    end;

    if assigned(TJvInspector(GetInspector).OnDataValueChanged) then
    begin
        TJvInspector(GetInspector).OnDataValueChanged(nil,Data);
    end;

  finally
    ColorEditForm.Destroy;
  end;

end;

function TJvInspectorColorEditItem.GetDisplayValue: string;
begin
      Result := 'Edit Color';
end;

procedure TJvInspectorColorEditItem.SetDisplayValue(const Value: string);
begin
  //
end;

procedure TJvInspectorColorEditItem.SetFlags(const Value: TInspectorItemFlags);
var
  NewValue: TInspectorItemFlags;
begin
  NewValue := Value + [iifEditButton];
  inherited SetFlags(NewValue);
end;

class procedure TJvInspectorColorEditItem.RegisterAsDefaultItem;
begin
  with TJvCustomInspectorData.ItemRegister do
  begin
    if IndexOf(Self) = -1 then
      Add(TJvInspectorTypeInfoRegItem.Create(Self, TypeInfo(TWxColorString)));
  end;
end;
//-------------------------------------------------------------------------------


//-------------------------------------------------------------------------------

procedure TJvInspectorListItemsItem.Edit;
begin

end;

function TJvInspectorListItemsItem.GetDisplayValue: string;
begin
  Result := 'Edit Items';
end;

procedure TJvInspectorListItemsItem.SetDisplayValue(const Value: string);
begin
  //
end;

procedure TJvInspectorListItemsItem.SetFlags(const Value: TInspectorItemFlags);
var
  NewValue: TInspectorItemFlags;
begin
  NewValue := Value + [iifEditButton];
  inherited SetFlags(NewValue);
end;

class procedure TJvInspectorListItemsItem.RegisterAsDefaultItem;
begin
  with TJvCustomInspectorData.ItemRegister do
  begin
    if IndexOf(Self) = -1 then
      Add(TJvInspectorTypeInfoRegItem.Create(Self, TypeInfo(TListItems)));
  end;
end;
//-------------------------------------------------------------------------------


procedure TJvInspectorStatusBarItem.Edit;
var
  sbForm: TStatusBarForm;
  i: Integer;
  stPnl: TStatusPanel;
begin

  sbForm := TStatusBarForm.Create(GetParentForm(Inspector));
  try
    sbForm.StatusBarObj.Panels.Clear;
    for i := 0 to
      TStatusBar(TJvInspectorPropData(Self.GetData()).Instance).Panels.Count - 1
      do
    begin
      stPnl := sbForm.StatusBarObj.Panels.Add;
      stPnl.Text :=TStatusBar(TJvInspectorPropData(Self.GetData()).Instance).Panels[i].Text;
      stPnl.Width :=TStatusBar(TJvInspectorPropData(Self.GetData()).Instance).Panels[i].Width;
    end;
    sbForm.fillListInfo;

    if sbForm.ShowModal <> mrOK then
    begin
      Exit;
    end
    else
    begin
      TStatusBar(TJvInspectorPropData(Self.GetData()).Instance).panels.Clear;
      for i := 0 to sbForm.StatusBarObj.Panels.Count - 1 do
      begin
        stPnl :=
          TStatusBar(TJvInspectorPropData(Self.GetData()).Instance).Panels.Add;
        stPnl.Text := sbForm.StatusBarObj.Panels[i].Text;
        stPnl.Width := sbForm.StatusBarObj.Panels[i].Width;
      end;
    end;

    if assigned(TJvInspector(GetInspector).OnDataValueChanged) then
    begin
        TJvInspector(GetInspector).OnDataValueChanged(nil,Data);
    end;

  finally
    sbForm.Destroy;
  end;

end;

function TJvInspectorStatusBarItem.GetDisplayValue: string;
begin
  Result := 'Edit Fields';
end;

procedure TJvInspectorStatusBarItem.SetDisplayValue(const Value: string);
begin
  //
end;

procedure TJvInspectorStatusBarItem.SetFlags(const Value:
  TInspectorItemFlags);
var
  NewValue: TInspectorItemFlags;
begin
  NewValue := Value + [iifEditButton];
  inherited SetFlags(NewValue);
end;

class procedure TJvInspectorStatusBarItem.RegisterAsDefaultItem;
begin
  with TJvCustomInspectorData.ItemRegister do
  begin
    if IndexOf(Self) = -1 then
      Add(TJvInspectorTypeInfoRegItem.Create(Self, TypeInfo(TStatusPanels)));
  end;
end;

//-------------------------------------------------------------------------------

procedure TJvInspectorListColumnsItem.Edit;
var
  ListviewForm: TListviewForm;
  i: Integer;
  lstColumn: TListColumn;
begin

  ListviewForm := TListviewForm.Create(GetParentForm(Inspector));
  try
    ListviewForm.LstViewObj.Columns.Clear;
    for i := 0 to
      TListView(TJvInspectorPropData(Self.GetData()).Instance).Columns.Count - 1
      do
    begin
      lstColumn := ListviewForm.LstViewObj.Columns.Add;
      lstColumn.Caption :=
        TListView(TJvInspectorPropData(Self.GetData()).Instance).Columns[i].Caption;
      lstColumn.Width :=
        TListView(TJvInspectorPropData(Self.GetData()).Instance).Columns[i].Width;
      lstColumn.Alignment :=
        TListView(TJvInspectorPropData(Self.GetData()).Instance).Columns[i].Alignment;
    end;
    ListviewForm.fillListInfo;

    if ListviewForm.ShowModal <> mrOK then
    begin
      Exit;
    end
    else
    begin
      TListView(TJvInspectorPropData(Self.GetData()).Instance).Columns.Clear;
      for i := 0 to ListviewForm.LstViewObj.Columns.Count - 1 do
      begin
        lstColumn :=
          TListView(TJvInspectorPropData(Self.GetData()).Instance).Columns.Add;
        lstColumn.Caption := ListviewForm.LstViewObj.Columns[i].Caption;
        lstColumn.Width := ListviewForm.LstViewObj.Columns[i].Width;
        lstColumn.Alignment := ListviewForm.LstViewObj.Columns[i].Alignment;
      end;
    end;

    if assigned(TJvInspector(GetInspector).OnDataValueChanged) then
    begin
        TJvInspector(GetInspector).OnDataValueChanged(nil,Data);
    end;

  finally
    ListviewForm.Destroy;
  end;

end;

function TJvInspectorListColumnsItem.GetDisplayValue: string;
begin
  Result := 'Edit Columns';
end;

procedure TJvInspectorListColumnsItem.SetDisplayValue(const Value: string);
begin
  //
end;

procedure TJvInspectorListColumnsItem.SetFlags(const Value:
  TInspectorItemFlags);
var
  NewValue: TInspectorItemFlags;
begin
  NewValue := Value + [iifEditButton];
  inherited SetFlags(NewValue);
end;

class procedure TJvInspectorListColumnsItem.RegisterAsDefaultItem;
begin
  with TJvCustomInspectorData.ItemRegister do
  begin
    if IndexOf(Self) = -1 then
      Add(TJvInspectorTypeInfoRegItem.Create(Self, TypeInfo(TListColumns)));
  end;
end;
//-------------------------------------------------------------------------------

procedure TJvInspectorTreeNodesItem.Edit;
begin
  ShowMessage('TJvInspectorTreeNodesItem.Edit');
end;

function TJvInspectorTreeNodesItem.GetDisplayValue: string;
begin
      Result := 'Edit Nodes';
end;

procedure TJvInspectorTreeNodesItem.SetDisplayValue(const Value: string);
begin
  //
end;

procedure TJvInspectorTreeNodesItem.SetFlags(const Value: TInspectorItemFlags);
var
  NewValue: TInspectorItemFlags;
begin
  NewValue := Value + [iifEditButton];
  inherited SetFlags(NewValue);
end;

class procedure TJvInspectorTreeNodesItem.RegisterAsDefaultItem;
begin
  with TJvCustomInspectorData.ItemRegister do
  begin
    if IndexOf(Self) = -1 then
      Add(TJvInspectorTypeInfoRegItem.Create(Self, TypeInfo(TTreeNodes)));
  end;
end;
//-------------------------------------------------------------------------------

procedure TJvInspectorBitmapItem.Edit;
var
  PictureEdit: TPictureEdit;
  picObj:Tpicture;
  strClassName:String;
begin
  PictureEdit := TPictureEdit.Create(GetParentForm(Inspector));
  strClassName:=UpperCase((TJvInspectorPropData(Self.GetData()).Instance).ClassName);

  if  strClassName = UpperCase('TWxBitmapButton') then
    PictureEdit.Image1.Picture.Assign(TWxBitmapButton(TJvInspectorPropData(Self.GetData()).Instance).Wx_Bitmap);

  if  strClassName = UpperCase('TWxToolButton') then
    PictureEdit.Image1.Picture.Assign(TWxToolButton(TJvInspectorPropData(Self.GetData()).Instance).Wx_Bitmap);


  if  strClassName = UpperCase('TWxStaticBitmap') then
    PictureEdit.Image1.Picture.Assign(TWxStaticBitmap(TJvInspectorPropData(Self.GetData()).Instance).picture);

  if  strClassName = UpperCase('TFrmNewForm') then
    PictureEdit.Image1.Picture.Assign(TFrmNewForm(TJvInspectorPropData(Self.GetData()).Instance).Wx_ICON);


//  if UpperCase((TJvInspectorPropData(Self.GetData()).Instance).ClassName) = UpperCase('TWxStaticBitmap') then
//    PictureEdit.Image1.Picture.Assign(TWxStaticBitmap(TJvInspectorPropData(Self.GetData()).Instance).picture);

  try

    if PictureEdit.ShowModal <> mrOK then
      Exit
    else
    begin
        picObj:=TPicture.Create;
        //PictureEdit.Image1.Picture.
        picObj.Bitmap.Assign(PictureEdit.Image1.Picture.Bitmap);

        if strClassName = UpperCase('TWxStaticBitmap') then
        begin
            TWxStaticBitmap(TJvInspectorPropData(Self.GetData()).Instance).picture.assign(picObj);
            TWxStaticBitmap(TJvInspectorPropData(Self.GetData()).Instance).picture.Bitmap.Transparent:=true;
            TWxStaticBitmap(TJvInspectorPropData(Self.GetData()).Instance).Width:=TWxStaticBitmap(TJvInspectorPropData(Self.GetData()).Instance).picture.Bitmap.Width;
            TWxStaticBitmap(TJvInspectorPropData(Self.GetData()).Instance).Height:=TWxStaticBitmap(TJvInspectorPropData(Self.GetData()).Instance).picture.Bitmap.Height;
        end;

        if  strClassName = UpperCase('TFrmNewForm') then
        begin
            TFrmNewForm(TJvInspectorPropData(Self.GetData()).Instance).Wx_ICON.assign(picObj);
            TFrmNewForm(TJvInspectorPropData(Self.GetData()).Instance).Wx_ICON.Bitmap.Transparent:=true;
        end;

        if  strClassName = UpperCase('TWxBitmapButton') then
        begin
            TWxBitmapButton(TJvInspectorPropData(Self.GetData()).Instance).Wx_BITMAP.assign(picObj);
            TWxBitmapButton(TJvInspectorPropData(Self.GetData()).Instance).Wx_BITMAP.Bitmap.Transparent:=true;
            TWxBitmapButton(TJvInspectorPropData(Self.GetData()).Instance).SetButtonBitmap(picObj);
        end;

        if  strClassName = UpperCase('TWxToolButton') then
        begin
            TWxToolButton(TJvInspectorPropData(Self.GetData()).Instance).Wx_BITMAP.assign(picObj);
            TWxToolButton(TJvInspectorPropData(Self.GetData()).Instance).Wx_BITMAP.Bitmap.Transparent:=true;
            TWxToolButton(TJvInspectorPropData(Self.GetData()).Instance).SetButtonBitmap(picObj);
        end;

        if assigned(TJvInspector(GetInspector).OnDataValueChanged) then
        begin
            TJvInspector(GetInspector).OnDataValueChanged(nil,Data);
        end;
    end;

  finally
    PictureEdit.Destroy;
  end;
end;

function TJvInspectorBitmapItem.GetDisplayValue: string;
begin
    Result := 'Edit Picture';
end;

procedure TJvInspectorBitmapItem.SetDisplayValue(const Value: string);
begin
  //
end;

procedure TJvInspectorBitmapItem.SetFlags(const Value: TInspectorItemFlags);
var
  NewValue: TInspectorItemFlags;
begin
  NewValue := Value + [iifEditButton];
  inherited SetFlags(NewValue);
end;

class procedure TJvInspectorBitmapItem.RegisterAsDefaultItem;
begin
  with TJvCustomInspectorData.ItemRegister do
  begin
    if IndexOf(Self) = -1 then
      Add(TJvInspectorTypeInfoRegItem.Create(Self, TypeInfo(TPicture)));
  end;
end;
//------------------------------------------------------------------------------
procedure TJvInspectorMyFontItem.Edit;
var
  FontDlg: TFontDialog;
  fnt:TFont;
  compIntf: IWxComponentInterface;
  prevColor:TColor;
  ColorInt:Integer;
begin

   fnt := TFont(Data.AsOrdinal);

   prevColor:=fnt.Color;

   FontDlg := TFontDialog.Create(Inspector);

   try
        FontDlg.Font.assign(fnt);
        if not FontDlg.execute then
            exit;
        fnt.assign(FontDlg.Font);
        
        if prevColor <> fnt.Color then
        begin
            if (TJvInspectorPropData(Self.GetData()).Instance).GetInterface(IID_IWxComponentInterface, compIntf) then
            begin
                ColorInt := ColorToRGB(fnt.Color);
                compIntf.SetFGColor('CUS:'+IntToStr(GetRValue(ColorInt))+','+IntToStr(GetGValue(ColorInt))+',' + IntToStr(GetBValue(ColorInt)));
            end;
        end;

        if assigned(TJvInspector(GetInspector).OnDataValueChanged) then
        begin
            TJvInspector(GetInspector).OnDataValueChanged(nil,Data);
        end;

    finally
        FontDlg.Destroy;
    end;
end;

function TJvInspectorMyFontItem.GetDisplayValue: string;
begin
    Result := 'Edit Font';
end;

procedure TJvInspectorMyFontItem.SetDisplayValue(const Value: string);
begin
  //
end;

procedure TJvInspectorMyFontItem.SetFlags(const Value: TInspectorItemFlags);
var
  NewValue: TInspectorItemFlags;
begin
  NewValue := Value + [iifEditButton];
  inherited SetFlags(NewValue);
end;

class procedure TJvInspectorMyFontItem.RegisterAsDefaultItem;
begin
  with TJvCustomInspectorData.ItemRegister do
  begin
    if IndexOf(Self) = -1 then
      Add(TJvInspectorTypeInfoRegItem.Create(Self, TypeInfo(TFont)));
  end;
end;

//------------------------------------------------------------------------------
procedure TJvInspectorMenuItem.Edit;
var
  mnuDlg: TMenuItemForm;
  mnuItem:TMenuItem;
  testMnu:TMenuItem;
  pMenuItem:TWxPopupMenu;
  mbItem:TWxMenuBar;
  ownerComp:TWinControl;
  maxControlValue:Integer;
begin
   mnuDlg := TMenuItemForm.Create(Inspector);
   try
   if (TJvInspectorPropData(Self.GetData()).Instance is TWxPopupMenu) then
   begin
        pMenuItem:=TWxPopupMenu(TJvInspectorPropData(Self.GetData()).Instance);
        maxControlValue:=GetMaxIDofWxForm(pMenuItem.parent);
        mnuDlg.SetMaxID(maxControlValue);
        ownerComp:=pMenuItem.parent;
        mnuDlg.SetMenuItemsDes(pMenuItem.Parent,pMenuItem,TWxCustomMenuItem(pMenuItem.Wx_MenuItems),mnuDlg.FMenuItems);
   end;

   if (TJvInspectorPropData(Self.GetData()).Instance is TWxMenuBar) then
   begin
        mbItem:=TWxMenuBar(TJvInspectorPropData(Self.GetData()).Instance);
        maxControlValue:=GetMaxIDofWxForm(mbItem.parent);
        mnuDlg.SetMaxID(maxControlValue);
        ownerComp:=mbItem.parent;
        mnuDlg.SetMenuItemsDes(mbItem.Parent,mbItem,TWxCustomMenuItem(mbItem.Wx_MenuItems),mnuDlg.FMenuItems);
   end;

    if mnuDlg.ShowModal <> mrOk then
        exit;

   if (TJvInspectorPropData(Self.GetData()).Instance is TWxMenuBar) then
   begin
       mbItem.Wx_MenuItems.destroy;
       mbItem.Wx_MenuItems:=TWxCustomMenuItem.Create(mbItem);
       mnuDlg.SetMenuItemsDes(mbItem.Parent,mbItem,mnuDlg.FMenuItems, TWxCustomMenuItem(mbItem.Wx_MenuItems));
       mbItem.BuildMenus(mbItem.Wx_MenuItems);
   end;

   if (TJvInspectorPropData(Self.GetData()).Instance is TWxPopupMenu) then
   begin
       pMenuItem.Wx_MenuItems.destroy;
       pMenuItem.Wx_MenuItems:=TWxCustomMenuItem.Create(pMenuItem);
       mnuDlg.SetMenuItemsDes(pMenuItem.Parent,pMenuItem,mnuDlg.FMenuItems, TWxCustomMenuItem(pMenuItem.Wx_MenuItems));
   end;

    if assigned(TJvInspector(GetInspector).OnDataValueChanged) then
    begin
        TJvInspector(GetInspector).OnDataValueChanged(nil,Data);
    end;

//        if prevColor <> fnt.Color then
//        begin
//            if (TJvInspectorPropData(Self.GetData()).Instance).GetInterface(IID_IWxComponentInterface, compIntf) then
//            begin
//                ColorInt := ColorToRGB(fnt.Color);
//                compIntf.SetFGColor('CUS:'+IntToStr(GetRValue(ColorInt))+','+IntToStr(GetGValue(ColorInt))+',' + IntToStr(GetBValue(ColorInt)));
//            end;
//        end;
//
//        if assigned(TJvInspector(GetInspector).OnDataValueChanged) then
//        begin
//            TJvInspector(GetInspector).OnDataValueChanged(nil,Data);
//        end;

    finally
        mnuDlg.Destroy;
    end;
end;

function TJvInspectorMenuItem.GetDisplayValue: string;
begin
    Result := 'Edit MenuItems';
end;

procedure TJvInspectorMenuItem.SetDisplayValue(const Value: string);
begin
  //
end;

procedure TJvInspectorMenuItem.SetFlags(const Value: TInspectorItemFlags);
var
  NewValue: TInspectorItemFlags;
begin
  NewValue := Value + [iifEditButton];
  inherited SetFlags(NewValue);
end;

class procedure TJvInspectorMenuItem.RegisterAsDefaultItem;
begin
  with TJvCustomInspectorData.ItemRegister do
  begin
    if IndexOf(Self) = -1 then
      Add(TJvInspectorTypeInfoRegItem.Create(Self, TypeInfo(TWxCustomMenuItem)));
  end;
end;

end.
