 { ****************************************************************** }
 {                                                                    }
{ $Id$                                                               }
 {                                                                    }
 {   VCL component TWxGridSizer                                       }
 {                                                                    }
 {   Code generated by Component Create for Delphi                    }
 {                                                                    }
 {   Generated from source file wxgridsizer.cd }
 {   on 10 Oct 2004 at 0:50                                           }
 {                                                                    }
 {   Copyright © 2004 by Guru Kathiresan                              }
 {                                                                    }
 { ****************************************************************** }

unit WxGridSizer;

interface

uses WinTypes, WinProcs, Messages, SysUtils, Classes, Controls,
  Forms, Graphics, ExtCtrls, WxUtils, WxSizerPanel;

type
  TWxGridSizer = class(TWxSizerPanel, IWxComponentInterface,
    IWxContainerAndSizerInterface)
  private
    { Private fields of TWxGridSizer }
    { Storage for property ColumnSpacing }
    FColumnSpacing: integer;
    { Storage for property Columns }
    FColumns: integer;
    { Storage for property RowSpacing }
    FRowSpacing: integer;
    { Storage for property Rows }
    FRows: integer;
    { Storage for property SpaceValue }
    FSpaceValue: integer;
    { Storage for property Wx_Class }
    FWx_Class: string;
    { Storage for property Wx_ControlOrientation }
    FWx_ControlOrientation: TWxControlOrientation;
    { Storage for property Wx_EventList }
    FWx_EventList: TStringList;
    { Storage for property Wx_HorizontalAlignment }
    FWx_HorizontalAlignment: TWxSizerHorizontalAlignment;
    { Storage for property Wx_IDName }
    FWx_IDName: string;
    { Storage for property Wx_IDValue }
    FWx_IDValue: integer;
    { Storage for property Wx_StretchFactor }
    FWx_StretchFactor: integer;
    { Storage for property Wx_VerticalAlignment }
    FWx_VerticalAlignment: TWxSizerVerticalAlignment;
    FWx_PropertyList: TStringList;
    FInvisibleBGColorString: string;
    FInvisibleFGColorString: string;
    FWx_Comments: TStrings;

    { Private methods of TWxGridSizer }
    { Method to set variable and property values and create objects }
    procedure AutoInitialize;
    { Method to free any objects created by AutoInitialize }
    procedure AutoDestroy;
    { Write method for property Wx_EventList }
    procedure SetWx_EventList(Value: TStringList);

  protected
    { Protected fields of TWxGridSizer }

    { Protected methods of TWxGridSizer }
    procedure Click; override;
    procedure KeyPress(var Key: char); override;
    procedure Resize; override;
    procedure Loaded; override;

  public
    { Public fields and properties of TWxGridSizer }

    { Public methods of TWxGridSizer }
    constructor Create(AOwner: TComponent); override;
    destructor Destroy; override;
    function GenerateControlIDs: string;
    function GenerateEnumControlIDs: string;
    function GenerateEventTableEntries(CurrClassName: string): string;
    function GenerateGUIControlCreation: string;
    function GenerateXRCControlCreation(IndentString: string): TStringList;
    function GenerateGUIControlDeclaration: string;
    function GenerateHeaderInclude: string;
    function GenerateImageInclude: string;
    function GetEventList: TStringList;
    function GetIDName: string;
    function GetIDValue: longint;
    function GetParameterFromEventName(EventName: string): string;
    function GetPropertyList: TStringList;
    function GetStretchFactor: integer;
    function GetTypeFromEventName(EventName: string): string;
    function GetWxClassName: string;
    procedure SaveControlOrientation(ControlOrientation: TWxControlOrientation);
    procedure SetIDName(IDName: string);
    procedure SetIDValue(IDValue: longint);
    procedure SetStretchFactor(intValue: integer);
    procedure SetWxClassName(wxClassName: string);
    function GetFGColor: string;
    procedure SetFGColor(strValue: string);

    function GetBGColor: string;
    procedure SetBGColor(strValue: string);
    procedure WMPaint(var Message: TWMPaint); message WM_PAINT;
    function GenerateLastCreationCode: string;
  published
    { Published properties of TWxGridSizer }
    property OnClick;
    property OnDblClick;
    property OnDragDrop;
    property OnEnter;
    property OnExit;
    property OnKeyDown;
    property OnKeyPress;
    property OnKeyUp;
    property OnMouseDown;
    property OnMouseMove;
    property OnMouseUp;
    property OnResize;
    property ColumnSpacing: integer Read FColumnSpacing Write FColumnSpacing default 0;
    property Columns: integer Read FColumns Write FColumns default 2;
    property RowSpacing: integer Read FRowSpacing Write FRowSpacing default 0;
    property Rows: integer Read FRows Write FRows default 2;
    property SpaceValue: integer Read FSpaceValue Write FSpaceValue default 5;
    property Wx_Class: string Read FWx_Class Write FWx_Class;
    property Wx_ControlOrientation: TWxControlOrientation
      Read FWx_ControlOrientation Write FWx_ControlOrientation;
    property Wx_EventList: TStringList Read FWx_EventList Write SetWx_EventList;
    property Wx_HorizontalAlignment: TWxSizerHorizontalAlignment
      Read FWx_HorizontalAlignment Write FWx_HorizontalAlignment default
      wxSZALIGN_CENTER_HORIZONTAL;
    property Wx_IDName: string Read FWx_IDName Write FWx_IDName;
    property Wx_IDValue: integer Read FWx_IDValue Write FWx_IDValue default -1;

    property Wx_StrechFactor: integer Read FWx_StretchFactor Write FWx_StretchFactor;

    property Wx_StretchFactor: integer Read FWx_StretchFactor
      Write FWx_StretchFactor default 0;
    property Wx_VerticalAlignment: TWxSizerVerticalAlignment
      Read FWx_VerticalAlignment Write FWx_VerticalAlignment default
      wxSZALIGN_CENTER_VERTICAL;
    property InvisibleBGColorString: string
      Read FInvisibleBGColorString Write FInvisibleBGColorString;
    property InvisibleFGColorString: string
      Read FInvisibleFGColorString Write FInvisibleFGColorString;

    property Wx_Comments: TStrings Read FWx_Comments Write FWx_Comments;

  end;

procedure Register;

implementation

procedure Register;
begin
     { Register TWxGridSizer with Standard as its
       default page on the Delphi component palette }
  RegisterComponents('Standard', [TWxGridSizer]);
end;

{ Method to set variable and property values and create objects }
procedure TWxGridSizer.AutoInitialize;
begin
  FWx_PropertyList := TStringList.Create;
  FColumnSpacing := 0;
  FColumns  := 2;
  FRowSpacing := 0;
  FRows     := 2;
  FSpaceValue := 5;
  FWx_Class := 'wxGridSizer';
  FWx_EventList := TStringList.Create;
  FWx_HorizontalAlignment := wxSZALIGN_CENTER_HORIZONTAL;
  FWx_IDValue := -1;
  FWx_StretchFactor := 0;
  FWx_VerticalAlignment := wxSZALIGN_CENTER_VERTICAL;
  FWx_Comments := TStringList.Create;

end; { of AutoInitialize }

{ Method to free any objects created by AutoInitialize }
procedure TWxGridSizer.AutoDestroy;
begin
  FWx_PropertyList.Destroy;
  FWx_EventList.Destroy;
  FWx_Comments.Destroy;
end; { of AutoDestroy }

{ Write method for property Wx_EventList }
procedure TWxGridSizer.SetWx_EventList(Value: TStringList);
begin
     { Use Assign method because TStringList is an object type
       and FWx_EventList has been created. }
  FWx_EventList.Assign(Value);

     { If changing this property affects the appearance of
       the component, call Invalidate here so the image will be
       updated. }
  { Invalidate; }
end;

{ Override OnClick handler from TWxSizerPanel,IWxComponentInterface }
procedure TWxGridSizer.Click;
begin
     { Code to execute before activating click
       behavior of component's parent class }

  { Activate click behavior of parent }
  inherited Click;

     { Code to execute after click behavior
       of parent }

end;

{ Override OnKeyPress handler from TWxSizerPanel,IWxComponentInterface }
procedure TWxGridSizer.KeyPress(var Key: char);
const
  TabKey   = char(VK_TAB);
  EnterKey = char(VK_RETURN);
begin
     { Key contains the character produced by the keypress.
       It can be tested or assigned a new value before the
       call to the inherited KeyPress method.  Setting Key
       to #0 before call to the inherited KeyPress method
       terminates any further processing of the character. }

  { Activate KeyPress behavior of parent }
  inherited KeyPress(Key);

  { Code to execute after KeyPress behavior of parent }

end;

{ Override OnResize handler from TWxSizerPanel,IWxComponentInterface }
procedure TWxGridSizer.Resize;
begin
  { Parent's Resize method }
  inherited Resize;

     { Code to perform other actions (e.g., resizing any sub-
       components) needed in response to change in size of this
       component }
end;

constructor TWxGridSizer.Create(AOwner: TComponent);
begin
  { Call the Create method of the container's parent class       }
  inherited Create(AOwner);

  { AutoInitialize sets the initial values of variables          }
  { (including subcomponent variables) and properties;           }
  { also, it creates objects for properties of standard          }
  { Delphi object types (e.g., TFont, TTimer, TPicture)          }
  { and for any variables marked as objects.                     }
  { AutoInitialize method is generated by Component Create.      }
  AutoInitialize;

  { Code to perform other tasks when the container is created    }
  FWx_PropertyList.add('wx_Class:Base Class');
  FWx_PropertyList.add('Wx_IDName : IDName ');
  FWx_PropertyList.add('Wx_IDValue : IDValue ');
  FWx_PropertyList.add('Name : Name');
  FWx_PropertyList.add('Left : Left');
  FWx_PropertyList.add('Top : Top');
  FWx_PropertyList.add('Width : Width');
  FWx_PropertyList.add('Height:Height');
  FWx_PropertyList.add('Orientation : Orientation');
  FWx_PropertyList.add('SpaceValue : Border');
  FWx_PropertyList.add('Rows : Rows');
  FWx_PropertyList.add('Columns : Columns');
  FWx_PropertyList.add('RowSpacing : RowSpacing');
  FWx_PropertyList.add('ColumnSpacing : ColumnSpacing');

  FWx_PropertyList.add('Wx_Comments:Comments');

  FWx_PropertyList.add('Wx_HorizontalAlignment : HorizontalAlignment');
  FWx_PropertyList.add('Wx_VerticalAlignment   : VerticalAlignment');
  FWx_PropertyList.add('Wx_StretchFactor   : StretchFactor');

end;

destructor TWxGridSizer.Destroy;
begin
  { AutoDestroy, which is generated by Component Create, frees any   }
  { objects created by AutoInitialize.                               }
  AutoDestroy;

  { Here, free any other dynamic objects that the component methods  }
  { created but have not yet freed.  Also perform any other clean-up }
  { operations needed before the component is destroyed.             }

  { Last, free the component by calling the Destroy method of the    }
  { parent class.                                                    }
  inherited Destroy;
end;


function TWxGridSizer.GenerateEnumControlIDs: string;
begin
  Result := '';
  //     if (Wx_IDValue > 0) and (trim(Wx_IDName) <> '') then
  //        Result:=Format('%s = %d , ',[Wx_IDName,Wx_IDValue]);
end;

function TWxGridSizer.GenerateControlIDs: string;
begin
  Result := '';
  //     if (Wx_IDValue > 0) and (trim(Wx_IDName) <> '') then
  //        Result:=Format('#define %s %d ',[Wx_IDName,Wx_IDValue]);
end;

function TWxGridSizer.GenerateEventTableEntries(CurrClassName: string): string;
begin
  Result := '';
end;

function TWxGridSizer.GenerateXRCControlCreation(IndentString: string): TStringList;
var
  i: integer;
  wxcompInterface: IWxComponentInterface;
  tempstring: TStringList;
begin

  Result := TStringList.Create;

  try
    Result.Add(IndentString + Format('<object class="%s" name="%s">',
      [self.Wx_Class, self.Name]));
    Result.Add(IndentString + Format('<rows>%d</row>', [self.rows]));
    Result.Add(IndentString + Format('<cols>%d</cols>', [self.columns]));
    Result.Add(IndentString + Format('<vgap>%d</vgap>', [self.rowSpacing]));
    Result.Add(IndentString + Format('<hgap>%d</hgap>', [self.columnSpacing]));

    for i := 0 to self.ControlCount - 1 do // Iterate
      if self.Controls[i].GetInterface(IID_IWxComponentInterface, wxcompInterface) then
        // Only add the XRC control if it is a child of the top-most parent (the form)
        //  If it is a child of a sizer, panel, or other object, then it's XRC code
        //  is created in GenerateXRCControlCreation of that control.
        if (self.Controls[i].GetParentComponent.Name = self.Name) then
        begin
          tempstring := wxcompInterface.GenerateXRCControlCreation('  ' + IndentString);
          try
            Result.AddStrings(tempstring);
          finally
            tempstring.Free
          end
        end; // for


    Result.Add(IndentString + '</object>');

  except
    Result.Free;
    raise;
  end;

end;

function TWxGridSizer.GenerateGUIControlCreation: string;
var
  strAlignment: string;
  parentName:  string;
begin

  Result := GetCommentString(self.FWx_Comments.Text) +
    Format('wxGridSizer* %s = new wxGridSizer(%d,%d,%d,%d);',
    [self.Name, self.rows, self.columns, self.rowSpacing, self.columnSpacing]);
  if ((self.Parent is TForm) or (IsControlWxContainer(self.Parent))) then
  begin
    if (self.Parent is TForm) then
      parentName := 'this'
    else if (self.Parent.ClassName = 'TWxPanel') then
      if self.Parent.Parent is TForm then
	parentName := 'this'
      else if (self.Parent.Parent.ClassName <> 'TWxNotebook') then
	parentName := self.Parent.Name
      else
	parentName := self.Parent.Parent.Name
    else
      parentName := self.Parent.Name;
    Result := Result + #13 + Format('%s->SetSizer(%s);', [parentName, self.Name]);
    Result := Result + #13 + Format('%s->SetAutoLayout(TRUE);', [parentName]);
  end
  else begin
    strAlignment := SizerAlignmentToStr(Wx_HorizontalAlignment) +
      ' | ' + SizerAlignmentToStr(Wx_VerticalAlignment) + ' | wxALL';
    if wx_ControlOrientation = wxControlVertical then
      strAlignment := SizerAlignmentToStr(Wx_HorizontalAlignment) + ' | wxALL';

    if wx_ControlOrientation = wxControlHorizontal then
      strAlignment := SizerAlignmentToStr(Wx_VerticalAlignment) + ' | wxALL';

    Result := Result + #13 + Format('%s->Add(%s,%d,%s,%d);',
      [self.Parent.Name, self.Name, self.Wx_StretchFactor, strAlignment,
      self.SpaceValue]);
  end;
end;

function TWxGridSizer.GenerateGUIControlDeclaration: string;
begin
  Result := Format('%s *%s;', [trim(Self.Wx_Class), trim(Self.Name)]);
end;

function TWxGridSizer.GenerateHeaderInclude: string;
begin
  //Result:='#include<wx/button.h>';
end;

function TWxGridSizer.GenerateImageInclude: string;
begin

end;

function TWxGridSizer.GetEventList: TStringList;
begin
  Result := Wx_EventList;
end;

function TWxGridSizer.GetIDName: string;
begin
  //Result:=wx_IDName;
end;

function TWxGridSizer.GetIDValue: longint;
begin
  Result := wx_IDValue;
end;

function TWxGridSizer.GetParameterFromEventName(EventName: string): string;
begin
  if EventName = 'EVT_BUTTON' then
  begin
    Result := 'wxCommandEvent& event';
    exit;
  end;
  if EventName = 'EVT_UPDATE_UI' then
  begin
    Result := 'wxUpdateUIEvent& event';
    exit;
  end;

end;

function TWxGridSizer.GetPropertyList: TStringList;
begin
  Result := FWx_PropertyList;
end;

function TWxGridSizer.GetStretchFactor: integer;
begin
  Result := Wx_StretchFactor;
end;

function TWxGridSizer.GetTypeFromEventName(EventName: string): string;
begin

end;

function TWxGridSizer.GetWxClassName: string;
begin
  if trim(wx_Class) = '' then
    wx_Class := 'wxGridSizer';
  Result := wx_Class;
end;

procedure TWxGridSizer.Loaded;
begin
  inherited Loaded;

     { Perform any component setup that depends on the property
       values having been set }

end;

procedure TWxGridSizer.SaveControlOrientation(ControlOrientation: TWxControlOrientation);
begin
  wx_ControlOrientation := ControlOrientation;
end;

procedure TWxGridSizer.SetIDName(IDName: string);
begin
  wx_IDName := IDName;
end;

procedure TWxGridSizer.SetIDValue(IDValue: longint);
begin
  Wx_IDValue := IDVAlue;
end;

procedure TWxGridSizer.SetStretchFactor(intValue: integer);
begin
  Wx_StretchFactor := intValue;
end;

procedure TWxGridSizer.SetWxClassName(wxClassName: string);
begin
  wx_Class := wxClassName;
end;

procedure TWxGridSizer.WMPaint(var Message: TWMPaint);
var
  maxWidth, maxHt: integer;
  totalmaxWidth, totalmaxHt: integer;
  i :    integer;
  coordTop, coordLeft: integer;
  intAlignment: integer;
  oriRows: integer;
  rowCount, colCount: integer;
  wxcompInterface: IWxComponentInterface;
  cntIntf: IWxContainerInterface;
begin
  intAlignment := 1;
     { Make this component look like its parent component by calling
       its parent's Paint method. }

  self.Caption := '';

  maxWidth := -1;

  totalmaxWidth := 0;
  totalmaxHt    := 0;

  maxHt := 2 * self.FSpaceValue;

  oriRows := self.ControlCount div self.Columns;
  if oriRows * self.Columns < self.ControlCount then
    oriRows := oriRows + 1;


  for i := 0 to self.ControlCount - 1 do
  begin
    if IsControlWxNonVisible(Controls[i]) then
      continue;
    //Calculate the total size for all childens
    totalmaxWidth := totalmaxWidth + self.Controls[i].Width + 2 * self.FSpaceValue;
    totalmaxHt    := totalmaxHt + self.Controls[i].Height + 2 * self.FSpaceValue;

    if self.Controls[i].Width > maxWidth then
      maxWidth := self.Controls[i].Width;

    if self.Controls[i].Height > maxHt then
      maxHt := self.Controls[i].Height;
    //Set the Control Orientation
    if self.Controls[i].GetInterface(IID_IWxComponentInterface, wxcompInterface) then
      wxcompInterface.SaveControlOrientation(wxControlNone);

  end;

  if self.Parent is TForm then
  begin
    self.Align := alClient;
  end
  else begin
    if self.parent.GetInterface(IDD_IWxContainerInterface, cntIntf) then
      self.Align := alClient
    else
      self.Align := alNone;

    //        if maxWidth*self.ControlCount+self.ControlCount*2*self.FSpaceValue = 0 then
    //           self.Width:=4*self.FSpaceValue
    //        else
    //            self.Width:=totalmaxWidth;

    //        self.Height:=maxHt+2*self.FSpaceValue;

    if (totalmaxWidth < 4 * self.FSpaceValue) then
      self.Width := 4 * self.FSpaceValue
    else
      self.Width := self.Columns * (maxWidth + 2 * self.FSpaceValue);

    if (totalmaxht < 4 * self.FSpaceValue) then
      self.Height := 4 * self.FSpaceValue
    else
      self.Height := OriRows * (maxHt + 2 * self.FSpaceValue);

  end;

  rowCount := 0;
  colCount := 0;

  for i := 0 to self.ControlCount - 1 do
  begin

    if IsControlWxNonVisible(Controls[i]) then
      continue;

    if intAlignment = 0 then
    begin
      self.Controls[i].Top  :=
        (FSpaceValue * (2 * (rowCount + 1) - 1)) + maxHt * rowCount;
      self.Controls[i].left :=
        (FSpaceValue * (2 * (colCount + 1) - 1)) + maxWidth * colCount;
    end;

    if intAlignment = 1 then
    begin
      coordLeft := (maxWidth - self.Controls[i].Width) div 2;
      coordTop  := (maxHt - self.Controls[i].Height) div 2;

      self.Controls[i].Top  :=
        (FSpaceValue * (2 * (rowCount + 1) - 1)) + maxHt * rowCount + coordTop;
      self.Controls[i].left :=
        (FSpaceValue * (2 * (colCount + 1) - 1)) + maxWidth * colCount + coordLeft;
    end;

    Inc(ColCount);
    if ColCount + 1 > Columns then
    begin
      ColCount := 0;
      Inc(RowCount);
    end;
  end;

  inherited;
end;

function TWxGridSizer.GetFGColor: string;
begin
end;

procedure TWxGridSizer.SetFGColor(strValue: string);
begin
end;

function TWxGridSizer.GetBGColor: string;
begin
end;

procedure TWxGridSizer.SetBGColor(strValue: string);
begin

end;

function TWxGridSizer.GenerateLastCreationCode: string;
begin
  Result := '';
end;

end.
