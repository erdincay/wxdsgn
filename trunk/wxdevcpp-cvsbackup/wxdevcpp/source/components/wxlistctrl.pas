{ ****************************************************************** }
{                                                                    }
{   VCL component TWxListCtrl                                        }
{                                                                    }
{   Code generated by Component Create for Delphi                    }
{                                                                    }
{   Generated from source file e:\backup\delphi\demo\wxdevcpp\source\components\compcode\wxlistctrl.cd }
{   on 10 Oct 2004 at 0:50                                           }
{                                                                    }
{   Copyright © 2003 by Guru Kathiresan                              }
{                                                                    }
{ ****************************************************************** }

unit Wxlistctrl;

interface

uses WinTypes, WinProcs, Messages, SysUtils, Classes, Controls, 
     Forms, Graphics, Comctrls, WxUtils, ExtCtrls, WxSizerPanel;

type
  TWxListCtrl = class(TListView,IWxComponentInterface)
    private
      { Private fields of TWxListCtrl }
        { Storage for property EVT_LIST_BEGIN_DRAG }
        FEVT_LIST_BEGIN_DRAG : String;
        { Storage for property EVT_LIST_BEGIN_LABEL_EDIT }
        FEVT_LIST_BEGIN_LABEL_EDIT : String;
        { Storage for property EVT_LIST_BEGIN_RDRAG }
        FEVT_LIST_BEGIN_RDRAG : String;
        { Storage for property EVT_LIST_CACHE_HINT }
        FEVT_LIST_CACHE_HINT : String;
        { Storage for property EVT_LIST_COL_BEGIN_DRAG }
        FEVT_LIST_COL_BEGIN_DRAG : String;
        { Storage for property EVT_LIST_COL_CLICK }
        FEVT_LIST_COL_CLICK : String;
        { Storage for property EVT_LIST_COL_DRAGGING }
        FEVT_LIST_COL_DRAGGING : String;
        { Storage for property EVT_LIST_COL_END_DRAG }
        FEVT_LIST_COL_END_DRAG : String;
        { Storage for property EVT_LIST_COL_RIGHT_CLICK }
        FEVT_LIST_COL_RIGHT_CLICK : String;
        { Storage for property EVT_LIST_DELETE_ALL_ITEMS }
        FEVT_LIST_DELETE_ALL_ITEMS : String;
        { Storage for property EVT_LIST_DELETE_ITEM }
        FEVT_LIST_DELETE_ITEM : String;
        { Storage for property EVT_LIST_END_LABEL_EDIT }
        FEVT_LIST_END_LABEL_EDIT : String;
        { Storage for property EVT_LIST_INSERT_ITEM }
        FEVT_LIST_INSERT_ITEM : String;
        { Storage for property EVT_LIST_ITEM_ACTIVATED }
        FEVT_LIST_ITEM_ACTIVATED : String;
        { Storage for property EVT_LIST_ITEM_DESELECTED }
        FEVT_LIST_ITEM_DESELECTED : String;
        { Storage for property EVT_LIST_ITEM_FOCUSED }
        FEVT_LIST_ITEM_FOCUSED : String;
        { Storage for property EVT_LIST_ITEM_MIDDLE_CLICK }
        FEVT_LIST_ITEM_MIDDLE_CLICK : String;
        { Storage for property EVT_LIST_ITEM_RIGHT_CLICK }
        FEVT_LIST_ITEM_RIGHT_CLICK : String;
        { Storage for property EVT_LIST_ITEM_SELECTED }
        FEVT_LIST_ITEM_SELECTED : String;
        { Storage for property EVT_LIST_KEY_DOWN }
        FEVT_LIST_KEY_DOWN : String;
        { Storage for property EVT_UPDATE_UI }
        FEVT_UPDATE_UI : String;
        { Storage for property Wx_BGColor }
        FWx_BGColor : TColor;
        { Storage for property Wx_Border }
        FWx_Border : Integer;
        { Storage for property Wx_Class }
        FWx_Class : String;
        { Storage for property Wx_ControlOrientation }
        FWx_ControlOrientation : TwxControlOrientation;
        { Storage for property Wx_Enabled }
        FWx_Enabled : Boolean;
        { Storage for property Wx_FGColor }
        FWx_FGColor : TColor;
        { Storage for property Wx_GeneralStyle }
        FWx_GeneralStyle : TWxStdStyleSet;
        { Storage for property Wx_HelpText }
        FWx_HelpText : String;
        { Storage for property Wx_Hidden }
        FWx_Hidden : Boolean;
        { Storage for property Wx_HorizontalAlignment }
        FWx_HorizontalAlignment : TWxSizerHorizontalAlignment;
        { Storage for property Wx_IDName }
        FWx_IDName : String;
        { Storage for property Wx_IDValue }
        FWx_IDValue : Longint;
        { Storage for property Wx_ListviewStyle }
        FWx_ListviewStyle : TWxLVStyleSet;
        { Storage for property Wx_ProxyBGColorString }
        FWx_ProxyBGColorString : TWxColorString;
        { Storage for property Wx_ProxyFGColorString }
        FWx_ProxyFGColorString : TWxColorString;
       { Storage for property Wx_StretchFactor }
        FWx_StretchFactor : Integer;
        { Storage for property Wx_ToolTip }
        FWx_ToolTip : String;
        { Storage for property Wx_VerticalAlignment }
        FWx_VerticalAlignment : TWxSizerVerticalAlignment;
        FWx_EventList : TStringList;
        FWx_PropertyList : TStringList;
        FInvisibleBGColorString : String;
        FInvisibleFGColorString : String;
      { Private methods of TWxListCtrl }
        { Method to set variable and property values and create objects }
        procedure AutoInitialize;
        { Method to free any objects created by AutoInitialize }
        procedure AutoDestroy;
        { Read method for property Wx_ListviewStyle }
        function GetWx_ListviewStyle : TWxLVStyleSet;
        { Write method for property Wx_ListviewStyle }
        procedure SetWx_ListviewStyle(Value : TWxLVStyleSet);

    protected
      { Protected fields of TWxListCtrl }

      { Protected methods of TWxListCtrl }
        procedure KeyPress(var Key : Char); override;
        procedure Loaded; override;

    public
      { Public fields and properties of TWxListCtrl }
       defaultBGColor:TColor;	
       defaultFGColor:TColor;
      { Public methods of TWxListCtrl }
        constructor Create(AOwner: TComponent); override;
        destructor Destroy; override;
        function GenerateControlIDs:String;
        function GenerateEventTableEntries(CurrClassName:String):String;
        function GenerateGUIControlCreation:String;
        function GenerateGUIControlDeclaration:String;
        function GenerateHeaderInclude:String;
        function GenerateImageInclude: string;
        function GetEventList:TStringlist;
        function GetIDName:String;
        function GetIDValue:LongInt;
        function GetParameterFromEventName(EventName: string):String;
        function GetPropertyList:TStringList;
        function GetStretchFactor:Integer;
        function GetTypeFromEventName(EventName: string):string;
        function GetWxClassName:String;
        procedure SaveControlOrientation(ControlOrientation:TWxControlOrientation);
        procedure SetIDName(IDName:String);
        procedure SetIDValue(IDValue:longInt);
        procedure SetStretchFactor(intValue:Integer);
            procedure SetWxClassName(wxClassName:String);
    function GetFGColor:string;
    procedure SetFGColor(strValue:String);

    function GetBGColor:string;
    procedure SetBGColor(strValue:String);

    procedure SetProxyFGColorString(value:String);
    procedure SetProxyBGColorString(value:String);


    published
      { Published properties of TWxListCtrl }
        property OnKeyDown;
        property OnKeyPress;
        property OnKeyUp;
        property EVT_LIST_BEGIN_DRAG : String
             read FEVT_LIST_BEGIN_DRAG write FEVT_LIST_BEGIN_DRAG;
        property EVT_LIST_BEGIN_LABEL_EDIT : String
             read FEVT_LIST_BEGIN_LABEL_EDIT write FEVT_LIST_BEGIN_LABEL_EDIT;
        property EVT_LIST_BEGIN_RDRAG : String
             read FEVT_LIST_BEGIN_RDRAG write FEVT_LIST_BEGIN_RDRAG;
        property EVT_LIST_CACHE_HINT : String
             read FEVT_LIST_CACHE_HINT write FEVT_LIST_CACHE_HINT;
        property EVT_LIST_COL_BEGIN_DRAG : String
             read FEVT_LIST_COL_BEGIN_DRAG write FEVT_LIST_COL_BEGIN_DRAG;
        property EVT_LIST_COL_CLICK : String
             read FEVT_LIST_COL_CLICK write FEVT_LIST_COL_CLICK;
        property EVT_LIST_COL_DRAGGING : String
             read FEVT_LIST_COL_DRAGGING write FEVT_LIST_COL_DRAGGING;
        property EVT_LIST_COL_END_DRAG : String
             read FEVT_LIST_COL_END_DRAG write FEVT_LIST_COL_END_DRAG;
        property EVT_LIST_COL_RIGHT_CLICK : String
             read FEVT_LIST_COL_RIGHT_CLICK write FEVT_LIST_COL_RIGHT_CLICK;
        property EVT_LIST_DELETE_ALL_ITEMS : String
             read FEVT_LIST_DELETE_ALL_ITEMS write FEVT_LIST_DELETE_ALL_ITEMS;
        property EVT_LIST_DELETE_ITEM : String
             read FEVT_LIST_DELETE_ITEM write FEVT_LIST_DELETE_ITEM;
        property EVT_LIST_END_LABEL_EDIT : String
             read FEVT_LIST_END_LABEL_EDIT write FEVT_LIST_END_LABEL_EDIT;
        property EVT_LIST_INSERT_ITEM : String
             read FEVT_LIST_INSERT_ITEM write FEVT_LIST_INSERT_ITEM;
        property EVT_LIST_ITEM_ACTIVATED : String
             read FEVT_LIST_ITEM_ACTIVATED write FEVT_LIST_ITEM_ACTIVATED;
        property EVT_LIST_ITEM_DESELECTED : String
             read FEVT_LIST_ITEM_DESELECTED write FEVT_LIST_ITEM_DESELECTED;
        property EVT_LIST_ITEM_FOCUSED : String
             read FEVT_LIST_ITEM_FOCUSED write FEVT_LIST_ITEM_FOCUSED;
        property EVT_LIST_ITEM_MIDDLE_CLICK : String
             read FEVT_LIST_ITEM_MIDDLE_CLICK write FEVT_LIST_ITEM_MIDDLE_CLICK;
        property EVT_LIST_ITEM_RIGHT_CLICK : String
             read FEVT_LIST_ITEM_RIGHT_CLICK write FEVT_LIST_ITEM_RIGHT_CLICK;
        property EVT_LIST_ITEM_SELECTED : String
             read FEVT_LIST_ITEM_SELECTED write FEVT_LIST_ITEM_SELECTED;
        property EVT_LIST_KEY_DOWN : String
             read FEVT_LIST_KEY_DOWN write FEVT_LIST_KEY_DOWN;
        property EVT_UPDATE_UI : String
             read FEVT_UPDATE_UI write FEVT_UPDATE_UI;
        property Wx_BGColor : TColor read FWx_BGColor write FWx_BGColor;
        property Wx_Border : Integer
             read FWx_Border write FWx_Border
             default 5;
        property Wx_Class : String read FWx_Class write FWx_Class;
        property Wx_ControlOrientation : TwxControlOrientation
             read FWx_ControlOrientation write FWx_ControlOrientation;
        property Wx_Enabled : Boolean
             read FWx_Enabled write FWx_Enabled
             default True;
        property Wx_FGColor : TColor read FWx_FGColor write FWx_FGColor;
        property Wx_GeneralStyle : TWxStdStyleSet
             read FWx_GeneralStyle write FWx_GeneralStyle;
        property Wx_HelpText : String read FWx_HelpText write FWx_HelpText;
        property Wx_Hidden : Boolean
             read FWx_Hidden write FWx_Hidden
             default False;
        property Wx_HorizontalAlignment : TWxSizerHorizontalAlignment
             read FWx_HorizontalAlignment write FWx_HorizontalAlignment
             default wxSZALIGN_CENTER_HORIZONTAL;
        property Wx_IDName : String read FWx_IDName write FWx_IDName;
        property Wx_IDValue : Longint
             read FWx_IDValue write FWx_IDValue
             default -1;
        property Wx_ListviewStyle : TWxLVStyleSet
             read GetWx_ListviewStyle write SetWx_ListviewStyle;
        property Wx_ProxyBGColorString : TWxColorString
             read FWx_ProxyBGColorString write FWx_ProxyBGColorString;
        property Wx_ProxyFGColorString : TWxColorString
             read FWx_ProxyFGColorString write FWx_ProxyFGColorString;

	property Wx_StrechFactor : Integer
		read FWx_StretchFactor write FWx_StretchFactor;
		
	property Wx_StretchFactor : Integer
             read FWx_StretchFactor write FWx_StretchFactor
             default 0;
        property Wx_ToolTip : String read FWx_ToolTip write FWx_ToolTip;
        property Wx_VerticalAlignment : TWxSizerVerticalAlignment
             read FWx_VerticalAlignment write FWx_VerticalAlignment
             default wxSZALIGN_CENTER_VERTICAL;
        property InvisibleBGColorString:String read FInvisibleBGColorString write FInvisibleBGColorString;
        property InvisibleFGColorString:String read FInvisibleFGColorString write FInvisibleFGColorString;

  end;

procedure Register;

implementation

procedure Register;
begin
     { Register TWxListCtrl with wxWidgets as its
       default page on the Delphi component palette }
     RegisterComponents('wxWidgets', [TWxListCtrl]);
end;

{ Method to set variable and property values and create objects }
procedure TWxListCtrl.AutoInitialize;
begin
     FWx_EventList := TStringList.Create;
     FWx_PropertyList := TStringList.Create;
     FWx_Border := 5;
     FWx_Class := 'wxListCtrl';
     FWx_Enabled := True;
     FWx_Hidden := False;
     FWx_HorizontalAlignment := wxSZALIGN_CENTER_HORIZONTAL;
     FWx_IDValue := -1;
     FWx_StretchFactor := 0;
     FWx_VerticalAlignment := wxSZALIGN_CENTER_VERTICAL;
     FWx_ProxyBGColorString := TWxColorString.Create;
     FWx_ProxyFGColorString := TWxColorString.Create;
     defaultBGColor:=self.color;
     defaultFGColor:=self.font.color;
end; { of AutoInitialize }

{ Method to free any objects created by AutoInitialize }
procedure TWxListCtrl.AutoDestroy;
begin
     FWx_EventList.Free;
     FWx_PropertyList.Free;
end; { of AutoDestroy }

{ Read method for property Wx_ListviewStyle }
function TWxListCtrl.GetWx_ListviewStyle : TWxLVStyleSet;
begin
     Result := FWx_ListviewStyle;
end;

{ Write method for property Wx_ListviewStyle }
procedure TWxListCtrl.SetWx_ListviewStyle(Value : TWxLVStyleSet);
begin


     if wxLC_LIST  in Value then
     begin
          if (wxLC_LIST  in FWx_ListviewStyle ) then
          begin
          end
          else
          begin
               Value:=Value-[wxLC_REPORT]-[wxLC_ICON]-[wxLC_SMALL_ICON];
               ViewStyle:=vsList;
               FWx_ListviewStyle := Value;
               exit;
          end;
     end;

     if wxLC_REPORT in Value then
     begin
          if (wxLC_REPORT  in FWx_ListviewStyle ) then
          begin
          end
          else
          begin
               Value:=Value-[wxLC_LIST] - [wxLC_ICON] - [wxLC_SMALL_ICON];
               ViewStyle:=vsreport;
               FWx_ListviewStyle := Value;
               exit;
          end;
     end;

     if wxLC_ICON in Value  then
     begin
          if (wxLC_ICON  in FWx_ListviewStyle ) then
          begin
          end
          else
          begin
               Value:=Value-[wxLC_LIST] - [wxLC_REPORT]  - [wxLC_SMALL_ICON];
               ViewStyle:=vsIcon;
               FWx_ListviewStyle := Value;
               exit;
          end;
     end;

     if wxLC_SMALL_ICON in Value  then
     begin
          if (wxLC_SMALL_ICON  in FWx_ListviewStyle ) then
          begin
          end
          else
          begin
               Value:=Value-[wxLC_LIST] - [wxLC_REPORT] - [wxLC_ICON];
               ViewStyle:=vsSmallIcon;
               FWx_ListviewStyle := Value;
               exit;
         end;
     end;

     Value:=Value + [wxLC_REPORT]-[wxLC_LIST] - [wxLC_ICON] - [wxLC_SMALL_ICON];
     ViewStyle:=vsReport ;
     FWx_ListviewStyle := Value;


end;

{ Override OnKeyPress handler from TListView,IWxComponentInterface }
procedure TWxListCtrl.KeyPress(var Key : Char);
const
     TabKey = Char(VK_TAB);
     EnterKey = Char(VK_RETURN);
begin
     { Key contains the character produced by the keypress.
       It can be tested or assigned a new value before the
       call to the inherited KeyPress method.  Setting Key
       to #0 before call to the inherited KeyPress method
       terminates any further processing of the character. }

     { Activate KeyPress behavior of parent }
     inherited KeyPress(Key);

     { Code to execute after KeyPress behavior of parent }

end;

constructor TWxListCtrl.Create(AOwner: TComponent);
begin
     { Call the Create method of the parent class }
     inherited Create(AOwner);

     { AutoInitialize sets the initial values of variables and      }
     { properties; also, it creates objects for properties of       }
     { standard Delphi object types (e.g., TFont, TTimer,           }
     { TPicture) and for any variables marked as objects.           }
     { AutoInitialize method is generated by Component Create.      }
     AutoInitialize;

     { Code to perform other tasks when the component is created }
     FWx_PropertyList.add('Wx_ListviewStyle:Listview Style');
     FWx_PropertyList.add('Items :Items');
     FWx_PropertyList.add('Wx_Hidden :Hidden');
     FWx_PropertyList.add('Wx_Border : Border ');
     FWx_PropertyList.add('Wx_HelpText :HelpText ');
     FWx_PropertyList.add('Wx_IDName : IDName ');
     FWx_PropertyList.add('Wx_IDValue : IDValue ');
     FWx_PropertyList.add('Wx_ToolTip :ToolTip ');
     FWx_PropertyList.add('Text:Text');
     FWx_PropertyList.add('Name:Name');
     FWx_PropertyList.add('Wx_Class:Base Class');
     FWx_PropertyList.add('Wx_Enabled:Enabled');
     FWx_PropertyList.add('Left:Left');
     FWx_PropertyList.add('Top:Top');
     FWx_PropertyList.add('Width:Width');
     FWx_PropertyList.add('Height:Height');
     FWx_PropertyList.add('Columns:Columns');

     FWx_PropertyList.add('Wx_ProxyBGColorString:Background Color');
     FWx_PropertyList.add('Wx_ProxyFGColorString:Foreground Color');

     FWx_PropertyList.add('Wx_GeneralStyle : General Styles');
     FWx_PropertyList.Add('wxSIMPLE_BORDER:wxSIMPLE_BORDER');
     FWx_PropertyList.Add('wxDOUBLE_BORDER:wxDOUBLE_BORDER');
     FWx_PropertyList.Add('wxSUNKEN_BORDER:wxSUNKEN_BORDER');
     FWx_PropertyList.Add('wxRAISED_BORDER:wxRAISED_BORDER');
     FWx_PropertyList.Add('wxSTATIC_BORDER:wxSTATIC_BORDER');
     FWx_PropertyList.Add('wxTRANSPARENT_WINDOW:wxTRANSPARENT_WINDOW');
     FWx_PropertyList.Add('wxNO_3D:wxNO_3D');
     FWx_PropertyList.Add('wxTAB_TRAVERSAL:wxTAB_TRAVERSAL');
     FWx_PropertyList.Add('wxWANTS_CHARS:wxWANTS_CHARS');
     FWx_PropertyList.Add('wxNO_FULL_REPAINT_ON_RESIZE:wxNO_FULL_REPAINT_ON_RESIZE');
     FWx_PropertyList.Add('wxVSCROLL:wxVSCROLL');
     FWx_PropertyList.Add('wxHSCROLL:wxHSCROLL');
     FWx_PropertyList.Add('wxCLIP_CHILDREN:wxCLIP_CHILDREN');

     FWx_PropertyList.add('Font : Font');

     FWx_PropertyList.add('wxLC_LIST:wxLC_LIST');
     FWx_PropertyList.add('wxLC_REPORT:wxLC_REPORT');
     FWx_PropertyList.add('wxLC_VIRTUAL:wxLC_VIRTUAL');
     FWx_PropertyList.add('wxLC_ICON:wxLC_ICON');
     FWx_PropertyList.add('wxLC_SMALL_ICON:wxLC_SMALL_ICON');
     FWx_PropertyList.add('wxLC_ALIGN_TOP:wxLC_ALIGN_TOP');
     FWx_PropertyList.add('wxLC_ALIGN_LEFT:wxLC_ALIGN_LEFT');
     FWx_PropertyList.add('wxLC_AUTOARRANGE:wxLC_AUTOARRANGE');
     FWx_PropertyList.add('wxLC_USER_TEXT:wxLC_USER_TEXT');
     FWx_PropertyList.add('wxLC_EDIT_LABELS:wxLC_EDIT_LABELS');
     FWx_PropertyList.add('wxLC_NO_HEADER:wxLC_NO_HEADER');
     FWx_PropertyList.add('wxLC_SINGLE_SEL:wxLC_SINGLE_SEL');
     FWx_PropertyList.add('wxLC_SORT_ASCENDING:wxLC_SORT_ASCENDING');
     FWx_PropertyList.add('wxLC_SORT_DESCENDING:wxLC_SORT_DESCENDING');
     FWx_PropertyList.add('wxLC_HRULES:wxLC_HRULES');
     FWx_PropertyList.add('wxLC_VRULES:wxLC_VRULES');

     FWx_PropertyList.add('Wx_HorizontalAlignment : HorizontalAlignment');
     FWx_PropertyList.add('Wx_VerticalAlignment   : VerticalAlignment');

     FWx_PropertyList.add('Wx_StretchFactor   : StretchFactor');


    FWx_EventList.add('EVT_UPDATE_UI:OnUpdateUI');
    FWx_EventList.add('EVT_LIST_ITEM_SELECTED:OnSelected');
    FWx_EventList.add('EVT_LIST_ITEM_DESELECTED:OnDeselected');
    FWx_EventList.add('EVT_LIST_BEGIN_DRAG:OnBeginDrag');
    FWx_EventList.add('EVT_LIST_BEGIN_RDRAG:OnBeginRDrag');
    FWx_EventList.add('EVT_LIST_BEGIN_LABEL_EDIT:OnBeginLabelEdit');
    FWx_EventList.add('EVT_LIST_END_LABEL_EDIT:OnEndLabelEdit');
    FWx_EventList.add('EVT_LIST_DELETE_ITEM:OnDeleteItem');
    FWx_EventList.add('EVT_LIST_DELETE_ALL_ITEMS:OnDeleteAllItems');
    FWx_EventList.add('EVT_LIST_ITEM_ACTIVATED:OnItemActivated');
    FWx_EventList.add('EVT_LIST_ITEM_FOCUSED:OnItemFocused');
    FWx_EventList.add('EVT_LIST_ITEM_MIDDLE_CLICK:OnMiddleClick');
    FWx_EventList.add('EVT_LIST_ITEM_RIGHT_CLICK:OnRightClick');
    FWx_EventList.add('EVT_LIST_KEY_DOWN:OnKeyDown');
    FWx_EventList.add('EVT_LIST_INSERT_ITEM:OnInsertItem');
    FWx_EventList.add('EVT_LIST_COL_CLICK:OnColLeftClick');
    FWx_EventList.add('EVT_LIST_COL_RIGHT_CLICK:OnColRightClick');
    FWx_EventList.add('EVT_LIST_COL_BEGIN_DRAG:OnColBeginDrag');
    FWx_EventList.add('EVT_LIST_COL_DRAGGING:OnColDragging');
    FWx_EventList.add('EVT_LIST_COL_END_DRAG:OnColEndDrag');
    FWx_EventList.add('EVT_LIST_CACHE_HINT:OnCacheHint');
    FWx_EventList.add('EVT_UPDATE_UI:OnUpdate');

     FWx_ListviewStyle:= [wxLC_REPORT];
     ViewStyle:=vsReport ;

end;

destructor TWxListCtrl.Destroy;
begin
     { AutoDestroy, which is generated by Component Create, frees any   }
     { objects created by AutoInitialize.                               }
     AutoDestroy;

     { Here, free any other dynamic objects that the component methods  }
     { created but have not yet freed.  Also perform any other clean-up }
     { operations needed before the component is destroyed.             }

     { Last, free the component by calling the Destroy method of the    }
     { parent class.                                                    }
     inherited Destroy;
end;

function TWxListCtrl.GenerateControlIDs:String;
begin
     Result:='';
     if (Wx_IDValue > 0) and (trim(Wx_IDName) <> '') then
        Result:=Format('#define %s %d ',[Wx_IDName,Wx_IDValue]);
end;

function TWxListCtrl.GenerateEventTableEntries(CurrClassName:String):String;
begin

     Result:='';

     if trim(EVT_UPDATE_UI) <> '' then
     begin
          Result:=Format('EVT_UPDATE_UI(%s,%s::%s)',[WX_IDName,CurrClassName,EVT_UPDATE_UI]) +'';
     end;

     if trim(EVT_LIST_ITEM_SELECTED) <> '' then
     begin
          Result:=Result+#13+Format('EVT_LIST_ITEM_SELECTED(%s,%s::%s)',[WX_IDName,CurrClassName,EVT_LIST_ITEM_SELECTED]) +'';
     end;


     if trim(EVT_LIST_ITEM_DESELECTED) <> '' then
     begin
          Result:=Result+#13+Format('EVT_LIST_ITEM_DESELECTED(%s,%s::%s)',[WX_IDName,CurrClassName,EVT_LIST_ITEM_DESELECTED]) +'';
     end;

     if trim(EVT_LIST_BEGIN_DRAG) <> '' then
     begin
          Result:=Result+#13+Format('EVT_LIST_BEGIN_DRAG(%s,%s::%s)',[WX_IDName,CurrClassName,EVT_LIST_BEGIN_DRAG]) +'';
     end;

     if trim(EVT_LIST_BEGIN_RDRAG) <> '' then
     begin
          Result:=Result+#13+Format('EVT_LIST_BEGIN_RDRAG(%s,%s::%s)',[WX_IDName,CurrClassName,EVT_LIST_BEGIN_RDRAG]) +'';
     end;

     if trim(EVT_LIST_BEGIN_LABEL_EDIT) <> '' then
     begin
          Result:=Result+#13+Format('EVT_LIST_BEGIN_LABEL_EDIT(%s,%s::%s)',[WX_IDName,CurrClassName,EVT_LIST_BEGIN_LABEL_EDIT]) +'';
     end;

     if trim(EVT_LIST_END_LABEL_EDIT) <> '' then
     begin
          Result:=Result+#13+Format('EVT_LIST_END_LABEL_EDIT(%s,%s::%s)',[WX_IDName,CurrClassName,EVT_LIST_END_LABEL_EDIT]) +'';
     end;

     if trim(EVT_LIST_DELETE_ITEM) <> '' then
     begin
          Result:=Result+#13+Format('EVT_LIST_DELETE_ITEM(%s,%s::%s)',[WX_IDName,CurrClassName,EVT_LIST_DELETE_ITEM]) +'';
     end;

     if trim(EVT_LIST_DELETE_ALL_ITEMS) <> '' then
     begin
          Result:=Result+#13+Format('EVT_LIST_DELETE_ALL_ITEMS(%s,%s::%s)',[WX_IDName,CurrClassName,EVT_LIST_DELETE_ALL_ITEMS]) +'';
     end;

     if trim(EVT_LIST_ITEM_ACTIVATED) <> '' then
     begin
          Result:=Result+#13+Format('EVT_LIST_ITEM_ACTIVATED(%s,%s::%s)',[WX_IDName,CurrClassName,EVT_LIST_ITEM_ACTIVATED]) +'';
     end;


     if trim(EVT_LIST_ITEM_FOCUSED) <> '' then
     begin
          Result:=Result+#13+Format('EVT_LIST_ITEM_FOCUSED(%s,%s::%s)',[WX_IDName,CurrClassName,EVT_LIST_ITEM_FOCUSED]) +'';
     end;

     if trim(EVT_LIST_ITEM_MIDDLE_CLICK) <> '' then
     begin
          Result:=Result+#13+Format('EVT_LIST_ITEM_MIDDLE_CLICK(%s,%s::%s)',[WX_IDName,CurrClassName,EVT_LIST_ITEM_MIDDLE_CLICK]) +'';
     end;


     if trim(EVT_LIST_ITEM_RIGHT_CLICK) <> '' then
     begin
          Result:=Result+#13+Format('EVT_LIST_ITEM_RIGHT_CLICK(%s,%s::%s)',[WX_IDName,CurrClassName,EVT_LIST_ITEM_RIGHT_CLICK]) +'';
     end;

     if trim(EVT_LIST_KEY_DOWN) <> '' then
     begin
          Result:=Result+#13+Format('EVT_LIST_KEY_DOWN(%s,%s::%s)',[WX_IDName,CurrClassName,EVT_LIST_KEY_DOWN]) +'';
     end;


     if trim(EVT_LIST_INSERT_ITEM) <> '' then
     begin
          Result:=Result+#13+Format('EVT_LIST_INSERT_ITEM(%s,%s::%s)',[WX_IDName,CurrClassName,EVT_LIST_INSERT_ITEM]) +'';
     end;

     if trim(EVT_LIST_COL_CLICK) <> '' then
     begin
          Result:=Result+#13+Format('EVT_LIST_COL_CLICK(%s,%s::%s)',[WX_IDName,CurrClassName,EVT_LIST_COL_CLICK]) +'';
     end;

     if trim(EVT_LIST_COL_RIGHT_CLICK) <> '' then
     begin
          Result:=Result+#13+Format('EVT_LIST_COL_RIGHT_CLICK(%s,%s::%s)',[WX_IDName,CurrClassName,EVT_LIST_COL_RIGHT_CLICK]) +'';
     end;

     if trim(EVT_LIST_COL_BEGIN_DRAG) <> '' then
     begin
          Result:=Result+#13+Format('EVT_LIST_COL_BEGIN_DRAG(%s,%s::%s)',[WX_IDName,CurrClassName,EVT_LIST_COL_BEGIN_DRAG]) +'';
     end;

     if trim(EVT_LIST_COL_DRAGGING) <> '' then
     begin
          Result:=Result+#13+Format('EVT_LIST_COL_DRAGGING(%s,%s::%s)',[WX_IDName,CurrClassName,EVT_LIST_COL_DRAGGING]) +'';
     end;

     if trim(EVT_LIST_COL_END_DRAG) <> '' then
     begin
          Result:=Result+#13+Format('EVT_LIST_COL_END_DRAG(%s,%s::%s)',[WX_IDName,CurrClassName,EVT_LIST_COL_END_DRAG]) +'';
     end;

     if trim(EVT_LIST_CACHE_HINT) <> '' then
     begin
          Result:=Result+#13+Format('EVT_LIST_CACHE_HINT(%s,%s::%s)',[WX_IDName,CurrClassName,EVT_LIST_CACHE_HINT]) +'';
     end;

     if trim(EVT_UPDATE_UI) <> '' then
     begin
          Result:=Result+#13+Format('EVT_UPDATE_UI(%s,%s::%s)',[WX_IDName,CurrClassName,EVT_UPDATE_UI]) +'';
     end;

end;

function TWxListCtrl.GenerateGUIControlCreation:String;

     { type }
     { . . . }
     var
     strColorStr:String;
     strStyle,parentName,strAlignment:String;
     strColumn:String;
     i:Integer;
begin
     Result:='';

    if (self.Parent is TForm) or (self.Parent is TWxSizerPanel) then
       parentName:='this'
    else
       parentName:=self.Parent.name;

    strStyle:=GetListViewSpecificStyle(Wx_GeneralStyle,Wx_ListviewStyle);

    Result:=Format('%s =  new %s(%s, %s,wxPoint(%d,%d),wxSize(%d,%d) %s);',[self.Name,self.wx_Class,parentName,GetWxIDString(self.Wx_IDName,self.Wx_IDValue),self.Left,self.Top,self.width,self.Height,strStyle] );

    if trim(self.Wx_ToolTip) <> '' then
        Result:=Result + #13+Format('%s->SetToolTip(wxT("%s"));',[self.Name,self.Wx_ToolTip]);

    if self.Wx_Hidden then
        Result:=Result + #13+Format('%s->Show(false);',[self.Name]);

    if not Wx_Enabled then
        Result:=Result + #13+Format('%s->Enable(false);',[self.Name]);

    if trim(self.Wx_HelpText) <> '' then
        Result:=Result +#13+Format('%s->SetHelpText(_("%s"));',[self.Name,self.Wx_HelpText]);
    for i:= self.columns.count -1 downto 0 Do
    begin
         Result:=Result +#13+Format('%s->InsertColumn(0,_("%s"),%s,%d );',[self.Name,self.columns[i].caption,AlignmentToStr(columns[i].Alignment),self.columns[i].width ]);
    end;

    strColorStr:=trim(GetwxColorFromString(InvisibleFGColorString));
    if strColorStr <> '' then
	Result:=Result+#13+Format('%s->SetForegroundColour(%s);',[self.Name,strColorStr]);

    strColorStr:=trim(GetwxColorFromString(InvisibleBGColorString));
    if strColorStr <> '' then
	Result:=Result+#13+Format('%s->SetBackgroundColour(%s);',[self.Name,strColorStr]); 


    strColorStr:=GetWxFontDeclaration(self.Font);
    if strColorStr <> '' then
	Result:=Result+#13+Format('%s->SetFont(%s);',[self.Name,strColorStr]);
        
    if(self.Parent is TWxSizerPanel) then
    begin
        strAlignment:=SizerAlignmentToStr(Wx_HorizontalAlignment) + ' | '+ SizerAlignmentToStr(Wx_VerticalAlignment) +' | wxALL';
        if wx_ControlOrientation = wxControlVertical then
            strAlignment:=SizerAlignmentToStr(Wx_HorizontalAlignment)+ ' | wxALL';

         if wx_ControlOrientation = wxControlHorizontal then
             strAlignment:=SizerAlignmentToStr(Wx_VerticalAlignment)+ ' | wxALL';


         Result:=Result +#13+Format('%s->Add(%s,%d,%s,%d);',[self.Parent.Name,self.Name,self.Wx_StretchFactor,strAlignment,self.Wx_Border]);
    end;

end;

function TWxListCtrl.GenerateGUIControlDeclaration:String;
begin
     Result:='';
     Result:=Format('%s *%s;',[Self.wx_Class,Self.Name]);
end;

function TWxListCtrl.GenerateHeaderInclude:String;
begin
     Result:='';
     Result:='#include <wx/listctrl.h>';
end;

function TWxListCtrl.GenerateImageInclude: string;
begin

end;

function TWxListCtrl.GetEventList:TStringlist;
begin
     Result:=FWx_EventList;
end;

function TWxListCtrl.GetIDName:String;
begin
     Result:=wx_IDName;
end;

function TWxListCtrl.GetIDValue:LongInt;
begin
     Result:=wx_IDValue;
end;

function TWxListCtrl.GetParameterFromEventName(EventName: string):String;
begin
Result:='void';
if EventName = 'EVT_LIST_ITEM_SELECTED' then
begin
 Result:='wxListEvent& event';
 exit;
end;
if EventName = 'EVT_LIST_ITEM_DESELECTED' then
begin
 Result:='wxListEvent& event';
 exit;
end;
if EventName = 'EVT_LIST_BEGIN_DRAG' then
begin
 Result:='wxListEvent& event';
 exit;
end;
if EventName = 'EVT_LIST_BEGIN_RDRAG' then
begin
 Result:='wxListEvent& event';
 exit;
end;
if EventName = 'EVT_LIST_BEGIN_LABEL_EDIT' then
begin
 Result:='wxListEvent& event';
 exit;
end;
if EventName = 'EVT_LIST_END_LABEL_EDIT' then
begin
 Result:='wxListEvent& event';
 exit;
end;
if EventName = 'EVT_LIST_DELETE_ITEM' then
begin
 Result:='wxListEvent& event';
 exit;
end;
if EventName = 'EVT_LIST_DELETE_ALL_ITEMS' then
begin
 Result:='wxListEvent& event';
 exit;
end;
if EventName = 'EVT_LIST_ITEM_ACTIVATED' then
begin
 Result:='wxListEvent& event';
 exit;
end;
if EventName = 'EVT_LIST_ITEM_FOCUSED' then
begin
 Result:='wxListEvent& event';
 exit;
end;
if EventName = 'EVT_LIST_ITEM_MIDDLE_CLICK' then
begin
 Result:='wxListEvent& event';
 exit;
end;
if EventName = 'EVT_LIST_ITEM_RIGHT_CLICK' then
begin
 Result:='wxListEvent& event';
 exit;
end;
if EventName = 'EVT_LIST_KEY_DOWN' then
begin
 Result:='wxListEvent& event';
 exit;
end;
if EventName = 'EVT_LIST_INSERT_ITEM' then
begin
 Result:='wxListEvent& event';
 exit;
end;
if EventName = 'EVT_LIST_COL_CLICK' then
begin
 Result:='wxListEvent& event';
 exit;
end;
if EventName = 'EVT_LIST_COL_RIGHT_CLICK' then
begin
 Result:='wxListEvent& event';
 exit;
end;
if EventName = 'EVT_LIST_COL_BEGIN_DRAG' then
begin
 Result:='wxListEvent& event';
 exit;
end;
if EventName = 'EVT_LIST_COL_DRAGGING' then
begin
 Result:='wxListEvent& event';
 exit;
end;
if EventName = 'EVT_LIST_COL_END_DRAG' then
begin
 Result:='wxListEvent& event';
 exit;
end;
if EventName = 'EVT_LIST_CACHE_HINT' then
begin
 Result:='wxListEvent& event';
 exit;
end;
if EventName = 'EVT_UPDATE_UI' then
begin
 Result:='wxListEvent& event';
 exit;
end;
end;

function TWxListCtrl.GetPropertyList:TStringList;
begin
     Result:=FWx_PropertyList;
end;

function TWxListCtrl.GetStretchFactor:Integer;
begin
    result:=Wx_StretchFactor;
end;

function TWxListCtrl.GetTypeFromEventName(EventName: string):string;
begin

end;

function TWxListCtrl.GetWxClassName:String;
begin
     if wx_Class = '' then
        wx_Class:='wxListCtrl';
     Result:=wx_Class;
end;

procedure TWxListCtrl.Loaded;
begin
     inherited Loaded;

     { Perform any component setup that depends on the property
       values having been set }

end;

procedure TWxListCtrl.SaveControlOrientation(ControlOrientation:TWxControlOrientation);
begin
     wx_ControlOrientation:=ControlOrientation;
end;

procedure TWxListCtrl.SetIDName(IDName:String);
begin
     wx_IDName:=IDName;
end;

procedure TWxListCtrl.SetIDValue(IDValue:longInt);
begin
     Wx_IDValue:=IDVAlue;
end;

procedure TWxListCtrl.SetStretchFactor(intValue:Integer);
begin
    Wx_StretchFactor:=intValue;
end;

procedure TWxListCtrl.SetWxClassName(wxClassName:String);
begin
     wx_Class:=wxClassName;
end;

function TWxListCtrl.GetFGColor:string;
begin
   Result:=FInvisibleFGColorString;
end;

procedure TWxListCtrl.SetFGColor(strValue:String);
begin
    FInvisibleFGColorString:=strValue;
   if IsDefaultColorStr(strValue) then
	self.Font.Color:=defaultFGColor
   else
	self.Font.Color:=GetColorFromString(strValue);
end;
    
function TWxListCtrl.GetBGColor:string;
begin
   Result:=FInvisibleBGColorString;
end;

procedure TWxListCtrl.SetBGColor(strValue:String);
begin
    FInvisibleBGColorString:=strValue;
   if IsDefaultColorStr(strValue) then
	self.Color:=defaultBGColor
   else
	self.Color:=GetColorFromString(strValue);
end;
procedure TWxListCtrl.SetProxyFGColorString(value:String);
begin
    FInvisibleFGColorString:=value;
    self.Color:=GetColorFromString(value);
end;

procedure TWxListCtrl.SetProxyBGColorString(value:String);
begin
   FInvisibleBGColorString:=value;
   self.Font.Color:=GetColorFromString(value);
end;

end.
