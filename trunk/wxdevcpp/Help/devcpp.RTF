{\rtf1\ansi\ansicpg1252\uc1 \deff11\deflang1033\deflangfe1033{\fonttbl{\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}{\f4\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times;}
{\f5\fswiss\fcharset0\fprq2{\*\panose 00000000000000000000}Helvetica;}{\f6\fmodern\fcharset0\fprq1{\*\panose 00000000000000000000}Courier;}{\f7\fswiss\fcharset0\fprq2{\*\panose 00000000000000000000}Geneva;}
{\f8\froman\fcharset0\fprq2{\*\panose 00000000000000000000}Tms Rmn;}{\f9\fswiss\fcharset0\fprq2{\*\panose 00000000000000000000}Helv;}{\f10\froman\fcharset0\fprq2{\*\panose 00000000000000000000}MS Serif;}
{\f11\fswiss\fcharset0\fprq2{\*\panose 00000000000000000000}MS Sans Serif;}{\f12\froman\fcharset0\fprq2{\*\panose 00000000000000000000}New York;}{\f13\fswiss\fcharset0\fprq2{\*\panose 00000000000000000000}System;}
{\f14\fnil\fcharset2\fprq2{\*\panose 05000000000000000000}Wingdings;}{\f15\froman\fcharset128\fprq1{\*\panose 00000000000000000000}Mincho{\*\falt ??};}{\f16\fnil\fcharset129\fprq1{\*\panose 00000000000000000000}Batang{\*\falt ??};}
{\f17\fnil\fcharset134\fprq2{\*\panose 00000000000000000000}SimSun{\*\falt ??};}{\f18\fnil\fcharset136\fprq2{\*\panose 00000000000000000000}PMingLiU{\*\falt ????};}{\f19\fmodern\fcharset128\fprq1{\*\panose 00000000000000000000}Gothic{\*\falt ?????};}
{\f20\fmodern\fcharset129\fprq1{\*\panose 00000000000000000000}Dotum{\*\falt ??};}{\f21\fmodern\fcharset134\fprq1{\*\panose 00000000000000000000}SimHei{\*\falt ??};}{\f22\fmodern\fcharset136\fprq1{\*\panose 00000000000000000000}MingLiU{\*\falt ???};}
{\f23\froman\fcharset128\fprq1{\*\panose 00000000000000000000}MS Mincho{\*\falt MS ??};}{\f24\froman\fcharset129\fprq1{\*\panose 00000000000000000000}Gulim{\*\falt ??};}
{\f25\fmodern\fcharset128\fprq1{\*\panose 00000000000000000000}MS Gothic{\*\falt MS ????};}{\f26\froman\fcharset0\fprq2{\*\panose 00000000000000000000}Century;}{\f27\fswiss\fcharset0\fprq2{\*\panose 020b0604030504040204}Tahoma;}
{\f28\fnil\fcharset0\fprq0{\*\panose 00000000000000000000}OCR A Extended;}{\f29\fnil\fcharset2\fprq2{\*\panose 00000000000000000000}Marlett;}{\f30\fmodern\fcharset0\fprq1{\*\panose 020b0609040504020204}Lucida Console;}
{\f31\fswiss\fcharset0\fprq2{\*\panose 020b0602030504020204}Lucida Sans Unicode;}{\f32\fswiss\fcharset0\fprq2{\*\panose 020b0604030504040204}Verdana;}{\f33\fswiss\fcharset0\fprq2{\*\panose 020b0a04020102020204}Arial Black;}
{\f34\fscript\fcharset0\fprq2{\*\panose 030f0702030302020204}Comic Sans MS;}{\f35\fswiss\fcharset0\fprq2{\*\panose 020b0806030902050204}Impact;}{\f36\froman\fcharset0\fprq2{\*\panose 02040502050405020303}Georgia;}
{\f37\fswiss\fcharset0\fprq2{\*\panose 020b0603020102020204}Franklin Gothic Medium;}{\f38\froman\fcharset0\fprq2{\*\panose 02040502050505030304}Palatino Linotype;}{\f39\fswiss\fcharset0\fprq2{\*\panose 020b0603020202020204}Trebuchet MS;}
{\f40\froman\fcharset2\fprq2{\*\panose 05030102010509060703}Webdings;}{\f41\fscript\fcharset0\fprq2 Estrangelo Edessa;}{\f42\fnil\fcharset0\fprq2 Gautami;}{\f43\fnil\fcharset0\fprq2 Latha;}{\f44\fnil\fcharset0\fprq2 Mangal;}
{\f45\fnil\fcharset0\fprq2 MV Boli;}{\f46\fnil\fcharset0\fprq2 Raavi;}{\f47\fnil\fcharset0\fprq2 Shruti;}{\f48\fnil\fcharset0\fprq2 Tunga;}{\f49\froman\fcharset0\fprq2{\*\panose 010a0502050306030303}Sylfaen;}
{\f50\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Microsoft Sans Serif;}{\f51\fnil\fcharset2\fprq2{\*\panose 00000400000000000000}Steinberg Notation;}{\f52\fnil\fcharset2\fprq2{\*\panose 00000400000000000000}Steinberg Chord Symbols;}
{\f53\fnil\fcharset0\fprq2{\*\panose 00000000000000000000}Kaggish;}{\f54\fswiss\fcharset0\fprq2{\*\panose 020b0506020202030204}Arial Narrow;}{\f55\froman\fcharset0\fprq2{\*\panose 02040602050305030304}Book Antiqua;}
{\f56\froman\fcharset0\fprq2{\*\panose 02050604050505020204}Bookman Old Style;}{\f57\fswiss\fcharset0\fprq2{\*\panose 020b0502020202020204}Century Gothic;}{\f58\froman\fcharset0\fprq2{\*\panose 02020404030301010803}Garamond;}
{\f59\fscript\fcharset0\fprq2{\*\panose 03010101010201010101}Monotype Corsiva;}{\f60\froman\fcharset2\fprq2{\*\panose 05020102010507070707}Wingdings 2;}{\f61\froman\fcharset2\fprq2{\*\panose 05040102010807070707}Wingdings 3;}
{\f62\fnil\fcharset0\fprq2{\*\panose 00000400000000000000}Sydnie;}{\f63\froman\fcharset238\fprq2 Times New Roman CE;}{\f64\froman\fcharset204\fprq2 Times New Roman Cyr;}{\f66\froman\fcharset161\fprq2 Times New Roman Greek;}
{\f67\froman\fcharset162\fprq2 Times New Roman Tur;}{\f68\froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\f69\froman\fcharset178\fprq2 Times New Roman (Arabic);}{\f70\froman\fcharset186\fprq2 Times New Roman Baltic;}
{\f71\fswiss\fcharset238\fprq2 Arial CE;}{\f72\fswiss\fcharset204\fprq2 Arial Cyr;}{\f74\fswiss\fcharset161\fprq2 Arial Greek;}{\f75\fswiss\fcharset162\fprq2 Arial Tur;}{\f76\fswiss\fcharset177\fprq2 Arial (Hebrew);}
{\f77\fswiss\fcharset178\fprq2 Arial (Arabic);}{\f78\fswiss\fcharset186\fprq2 Arial Baltic;}{\f79\fmodern\fcharset238\fprq1 Courier New CE;}{\f80\fmodern\fcharset204\fprq1 Courier New Cyr;}{\f82\fmodern\fcharset161\fprq1 Courier New Greek;}
{\f83\fmodern\fcharset162\fprq1 Courier New Tur;}{\f84\fmodern\fcharset177\fprq1 Courier New (Hebrew);}{\f85\fmodern\fcharset178\fprq1 Courier New (Arabic);}{\f86\fmodern\fcharset186\fprq1 Courier New Baltic;}{\f279\fswiss\fcharset238\fprq2 Tahoma CE;}
{\f280\fswiss\fcharset204\fprq2 Tahoma Cyr;}{\f282\fswiss\fcharset161\fprq2 Tahoma Greek;}{\f283\fswiss\fcharset162\fprq2 Tahoma Tur;}{\f284\fswiss\fcharset177\fprq2 Tahoma (Hebrew);}{\f285\fswiss\fcharset178\fprq2 Tahoma (Arabic);}
{\f286\fswiss\fcharset186\fprq2 Tahoma Baltic;}{\f303\fmodern\fcharset238\fprq1 Lucida Console CE;}{\f304\fmodern\fcharset204\fprq1 Lucida Console Cyr;}{\f306\fmodern\fcharset161\fprq1 Lucida Console Greek;}
{\f307\fmodern\fcharset162\fprq1 Lucida Console Tur;}{\f311\fswiss\fcharset238\fprq2 Lucida Sans Unicode CE;}{\f312\fswiss\fcharset204\fprq2 Lucida Sans Unicode Cyr;}{\f314\fswiss\fcharset161\fprq2 Lucida Sans Unicode Greek;}
{\f315\fswiss\fcharset162\fprq2 Lucida Sans Unicode Tur;}{\f316\fswiss\fcharset177\fprq2 Lucida Sans Unicode (Hebrew);}{\f319\fswiss\fcharset238\fprq2 Verdana CE;}{\f320\fswiss\fcharset204\fprq2 Verdana Cyr;}{\f322\fswiss\fcharset161\fprq2 Verdana Greek;}
{\f323\fswiss\fcharset162\fprq2 Verdana Tur;}{\f326\fswiss\fcharset186\fprq2 Verdana Baltic;}{\f327\fswiss\fcharset238\fprq2 Arial Black CE;}{\f328\fswiss\fcharset204\fprq2 Arial Black Cyr;}{\f330\fswiss\fcharset161\fprq2 Arial Black Greek;}
{\f331\fswiss\fcharset162\fprq2 Arial Black Tur;}{\f334\fswiss\fcharset186\fprq2 Arial Black Baltic;}{\f335\fscript\fcharset238\fprq2 Comic Sans MS CE;}{\f336\fscript\fcharset204\fprq2 Comic Sans MS Cyr;}
{\f338\fscript\fcharset161\fprq2 Comic Sans MS Greek;}{\f339\fscript\fcharset162\fprq2 Comic Sans MS Tur;}{\f342\fscript\fcharset186\fprq2 Comic Sans MS Baltic;}{\f343\fswiss\fcharset238\fprq2 Impact CE;}{\f344\fswiss\fcharset204\fprq2 Impact Cyr;}
{\f346\fswiss\fcharset161\fprq2 Impact Greek;}{\f347\fswiss\fcharset162\fprq2 Impact Tur;}{\f350\fswiss\fcharset186\fprq2 Impact Baltic;}{\f351\froman\fcharset238\fprq2 Georgia CE;}{\f352\froman\fcharset204\fprq2 Georgia Cyr;}
{\f354\froman\fcharset161\fprq2 Georgia Greek;}{\f355\froman\fcharset162\fprq2 Georgia Tur;}{\f358\froman\fcharset186\fprq2 Georgia Baltic;}{\f359\fswiss\fcharset238\fprq2 Franklin Gothic Medium CE;}
{\f360\fswiss\fcharset204\fprq2 Franklin Gothic Medium Cyr;}{\f362\fswiss\fcharset161\fprq2 Franklin Gothic Medium Greek;}{\f363\fswiss\fcharset162\fprq2 Franklin Gothic Medium Tur;}{\f366\fswiss\fcharset186\fprq2 Franklin Gothic Medium Baltic;}
{\f367\froman\fcharset238\fprq2 Palatino Linotype CE;}{\f368\froman\fcharset204\fprq2 Palatino Linotype Cyr;}{\f370\froman\fcharset161\fprq2 Palatino Linotype Greek;}{\f371\froman\fcharset162\fprq2 Palatino Linotype Tur;}
{\f374\froman\fcharset186\fprq2 Palatino Linotype Baltic;}{\f375\fswiss\fcharset238\fprq2 Trebuchet MS CE;}{\f376\fswiss\fcharset204\fprq2 Trebuchet MS Cyr;}{\f378\fswiss\fcharset161\fprq2 Trebuchet MS Greek;}
{\f379\fswiss\fcharset162\fprq2 Trebuchet MS Tur;}{\f382\fswiss\fcharset186\fprq2 Trebuchet MS Baltic;}{\f455\froman\fcharset238\fprq2 Sylfaen CE;}{\f456\froman\fcharset204\fprq2 Sylfaen Cyr;}{\f458\froman\fcharset161\fprq2 Sylfaen Greek;}
{\f459\froman\fcharset162\fprq2 Sylfaen Tur;}{\f462\froman\fcharset186\fprq2 Sylfaen Baltic;}{\f463\fswiss\fcharset238\fprq2 Microsoft Sans Serif CE;}{\f464\fswiss\fcharset204\fprq2 Microsoft Sans Serif Cyr;}
{\f466\fswiss\fcharset161\fprq2 Microsoft Sans Serif Greek;}{\f467\fswiss\fcharset162\fprq2 Microsoft Sans Serif Tur;}{\f468\fswiss\fcharset177\fprq2 Microsoft Sans Serif (Hebrew);}{\f469\fswiss\fcharset178\fprq2 Microsoft Sans Serif (Arabic);}
{\f470\fswiss\fcharset186\fprq2 Microsoft Sans Serif Baltic;}{\f495\fswiss\fcharset238\fprq2 Arial Narrow CE;}{\f496\fswiss\fcharset204\fprq2 Arial Narrow Cyr;}{\f498\fswiss\fcharset161\fprq2 Arial Narrow Greek;}
{\f499\fswiss\fcharset162\fprq2 Arial Narrow Tur;}{\f502\fswiss\fcharset186\fprq2 Arial Narrow Baltic;}{\f503\froman\fcharset238\fprq2 Book Antiqua CE;}{\f504\froman\fcharset204\fprq2 Book Antiqua Cyr;}{\f506\froman\fcharset161\fprq2 Book Antiqua Greek;}
{\f507\froman\fcharset162\fprq2 Book Antiqua Tur;}{\f510\froman\fcharset186\fprq2 Book Antiqua Baltic;}{\f511\froman\fcharset238\fprq2 Bookman Old Style CE;}{\f512\froman\fcharset204\fprq2 Bookman Old Style Cyr;}
{\f514\froman\fcharset161\fprq2 Bookman Old Style Greek;}{\f515\froman\fcharset162\fprq2 Bookman Old Style Tur;}{\f518\froman\fcharset186\fprq2 Bookman Old Style Baltic;}{\f519\fswiss\fcharset238\fprq2 Century Gothic CE;}
{\f520\fswiss\fcharset204\fprq2 Century Gothic Cyr;}{\f522\fswiss\fcharset161\fprq2 Century Gothic Greek;}{\f523\fswiss\fcharset162\fprq2 Century Gothic Tur;}{\f526\fswiss\fcharset186\fprq2 Century Gothic Baltic;}
{\f527\froman\fcharset238\fprq2 Garamond CE;}{\f528\froman\fcharset204\fprq2 Garamond Cyr;}{\f530\froman\fcharset161\fprq2 Garamond Greek;}{\f531\froman\fcharset162\fprq2 Garamond Tur;}{\f534\froman\fcharset186\fprq2 Garamond Baltic;}
{\f535\fscript\fcharset238\fprq2 Monotype Corsiva CE;}{\f536\fscript\fcharset204\fprq2 Monotype Corsiva Cyr;}{\f538\fscript\fcharset161\fprq2 Monotype Corsiva Greek;}{\f539\fscript\fcharset162\fprq2 Monotype Corsiva Tur;}
{\f542\fscript\fcharset186\fprq2 Monotype Corsiva Baltic;}{\f562\fnil\fcharset161\fprq2 Sydnie Greek;}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;
\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;\red51\green51\blue153;
\red51\green102\blue255;\red0\green102\blue0;\red255\green255\blue255;}{\stylesheet{\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs16\lang1033\langfe1036\cgrid\langnp1033\langfenp1036 \snext0 Normal;}{
\s2\ql \li0\ri0\sb100\sa100\nowidctlpar\aspalpha\faauto\rin0\lin0\itap0 \b\f11\fs36\cf1\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 \sbasedon0 \snext2 heading 2;}{\*\cs10 \additive Default Paragraph Font;}{
\s15\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \snext15 Default;}{\s16\ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 
\sbasedon15 \snext16 Text body;}{\s17\ql \fi-284\li284\ri0\sb120\sa120\nowidctlpar\tx284\faauto\rin0\lin284\itap0 \f11\fs24\lang1033\langfe1031\cgrid\langnp1033\langfenp1031 \sbasedon0 \snext17 List;}{
\s18\ql \li0\ri0\sb120\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \i\fs20\lang1033\langfe1033\loch\f11\hich\af27\dbch\af0\cgrid\langnp1033\langfenp1033 \sbasedon15 \snext18 caption;}{\s19\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 
\fs24\lang1033\langfe1033\loch\f11\hich\af27\dbch\af0\cgrid\langnp1033\langfenp1033 \sbasedon15 \snext19 Index;}{\s20\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext20 
footnote text;}{\s21\qc \li0\ri0\nowidctlpar\tx1134\faauto\rin0\lin0\itap0 \b\f11\fs18\cf6\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 \sbasedon0 \snext21 Internal notes;}{\s22\ql \li0\ri0\sb60\sa240\nowidctlpar\faauto\rin0\lin0\itap0 
\b\f11\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext0 Heading;}{\s23\ql \li0\ri0\keep\nowidctlpar\tx1134\tx2552\faauto\rin0\lin0\itap0 \f2\fs20\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 \sbasedon0 \snext23 
Example;}{\s24\ql \fi-567\li567\ri0\sa240\nowidctlpar\tx567\faauto\rin0\lin567\itap0 \f11\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext24 Step-by-Step;}{\s25\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 
\b\f11\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext0 Sub-Heading #1;}{\s26\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs24\ul\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext0 Sub-Heading #2;}{
\s27\ql \li0\ri0\keepn\nowidctlpar\tx1134\faauto\rin0\lin0\itap0 \f11\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext0 Nonscrolling region;}{\s28\ql \li0\ri0\sb60\sa120\keep\keepn\nowidctlpar\faauto\rin0\lin0\itap0 
\f11\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon22 \snext29 Nonscrolling Heading;}{\s29\ql \li0\ri0\sa120\nowidctlpar\tx1134\tx2268\tx3402\tx4536\faauto\rin0\lin0\itap0 \f11\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 
\sbasedon28 \snext0 Nonscrolling Sub-Heading;}{\s30\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs20\lang1036\langfe1033\cgrid\langnp1036\langfenp1033 \sbasedon0 \snext30 endnote text;}{
\s31\ql \li0\ri0\sb100\sa100\nowidctlpar\aspalpha\faauto\rin0\lin0\itap0 \f11\fs24\cf1\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 \sbasedon0 \snext31 Normal (Web);}{\s32\ql \li0\ri720\nowidctlpar\faauto\rin720\lin0\itap0 
\f11\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext32 Body Text;}{\s33\ql \fi-283\li283\ri0\nowidctlpar\faauto\rin0\lin283\itap0 \f11\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon15 \snext33 Footnote;}{
\s34\ql \fi-283\li283\ri0\nowidctlpar\faauto\rin0\lin283\itap0 \f11\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon15 \snext34 Endnote;}{\s35\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 
\f11\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon16 \snext35 Table Contents;}{\s36\qc \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \b\i\f11\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon35 \snext36 Table Heading;}{\*
\cs37 \additive \b\f0\fs16\chshdng0\chcfpat0\chcbpat1 RTF_Num 2 1;}{\*\cs38 \additive \fs24\loch\f0\chshdng0\chcfpat0\chcbpat1 RTF_Num 3 1;}{\*\cs39 \additive \f2\fs24\chshdng0\chcfpat0\chcbpat1 RTF_Num 3 2;}{\*\cs40 \additive 
\f14\fs24\chshdng0\chcfpat0\chcbpat1 RTF_Num 3 3;}{\*\cs41 \additive \f3\fs24\chshdng0\chcfpat0\chcbpat1 RTF_Num 3 4;}{\*\cs42 \additive \f2\fs24\chshdng0\chcfpat0\chcbpat1 RTF_Num 3 5;}{\*\cs43 \additive \f14\fs24\chshdng0\chcfpat0\chcbpat1 RTF_Num 3 6;}
{\*\cs44 \additive \f3\fs24\chshdng0\chcfpat0\chcbpat1 RTF_Num 3 7;}{\*\cs45 \additive \f2\fs24\chshdng0\chcfpat0\chcbpat1 RTF_Num 3 8;}{\*\cs46 \additive \f14\fs24\chshdng0\chcfpat0\chcbpat1 RTF_Num 3 9;}{\*\cs47 \additive 
\b\fs24\chshdng0\chcfpat0\chcbpat1 RTF_Num 4 1;}{\*\cs48 \additive \fs24\loch\f0\chshdng0\chcfpat0\chcbpat1 RTF_Num 5 1;}{\*\cs49 \additive \f2\fs24\chshdng0\chcfpat0\chcbpat1 RTF_Num 5 2;}{\*\cs50 \additive \f14\fs24\chshdng0\chcfpat0\chcbpat1 
RTF_Num 5 3;}{\*\cs51 \additive \f3\fs24\chshdng0\chcfpat0\chcbpat1 RTF_Num 5 4;}{\*\cs52 \additive \f2\fs24\chshdng0\chcfpat0\chcbpat1 RTF_Num 5 5;}{\*\cs53 \additive \f14\fs24\chshdng0\chcfpat0\chcbpat1 RTF_Num 5 6;}{\*\cs54 \additive 
\f3\fs24\chshdng0\chcfpat0\chcbpat1 RTF_Num 5 7;}{\*\cs55 \additive \f2\fs24\chshdng0\chcfpat0\chcbpat1 RTF_Num 5 8;}{\*\cs56 \additive \f14\fs24\chshdng0\chcfpat0\chcbpat1 RTF_Num 5 9;}{\*\cs57 \additive \fs16\chshdng0\chcfpat0\chcbpat1 RTF_Num 6 1;}{\*
\cs58 \additive \fs16\chshdng0\chcfpat0\chcbpat1 RTF_Num 7 1;}{\*\cs59 \additive \b\f0\fs16\chshdng0\chcfpat0\chcbpat1 RTF_Num 8 1;}{\*\cs60 \additive \fs16\chshdng0\chcfpat0\chcbpat1 RTF_Num 9 1;}{\*\cs61 \additive 
\fs24\loch\f0\chshdng0\chcfpat0\chcbpat1 RTF_Num 10 1;}{\*\cs62 \additive \f2\fs24\chshdng0\chcfpat0\chcbpat1 RTF_Num 10 2;}{\*\cs63 \additive \f14\fs24\chshdng0\chcfpat0\chcbpat1 RTF_Num 10 3;}{\*\cs64 \additive \f3\fs24\chshdng0\chcfpat0\chcbpat1 
RTF_Num 10 4;}{\*\cs65 \additive \f2\fs24\chshdng0\chcfpat0\chcbpat1 RTF_Num 10 5;}{\*\cs66 \additive \f14\fs24\chshdng0\chcfpat0\chcbpat1 RTF_Num 10 6;}{\*\cs67 \additive \f3\fs24\chshdng0\chcfpat0\chcbpat1 RTF_Num 10 7;}{\*\cs68 \additive 
\f2\fs24\chshdng0\chcfpat0\chcbpat1 RTF_Num 10 8;}{\*\cs69 \additive \f14\fs24\chshdng0\chcfpat0\chcbpat1 RTF_Num 10 9;}{\*\cs70 \additive \fs24\loch\f0\chshdng0\chcfpat0\chcbpat1 RTF_Num 11 1;}{\*\cs71 \additive \f2\fs24\chshdng0\chcfpat0\chcbpat1 
RTF_Num 11 2;}{\*\cs72 \additive \f14\fs24\chshdng0\chcfpat0\chcbpat1 RTF_Num 11 3;}{\*\cs73 \additive \f3\fs24\chshdng0\chcfpat0\chcbpat1 RTF_Num 11 4;}{\*\cs74 \additive \f2\fs24\chshdng0\chcfpat0\chcbpat1 RTF_Num 11 5;}{\*\cs75 \additive 
\f14\fs24\chshdng0\chcfpat0\chcbpat1 RTF_Num 11 6;}{\*\cs76 \additive \f3\fs24\chshdng0\chcfpat0\chcbpat1 RTF_Num 11 7;}{\*\cs77 \additive \f2\fs24\chshdng0\chcfpat0\chcbpat1 RTF_Num 11 8;}{\*\cs78 \additive \f14\fs24\chshdng0\chcfpat0\chcbpat1 
RTF_Num 11 9;}{\*\cs79 \additive \fs24\loch\f0\chshdng0\chcfpat0\chcbpat1 RTF_Num 12 1;}{\*\cs80 \additive \f2\fs24\chshdng0\chcfpat0\chcbpat1 RTF_Num 12 2;}{\*\cs81 \additive \f14\fs24\chshdng0\chcfpat0\chcbpat1 RTF_Num 12 3;}{\*\cs82 \additive 
\f3\fs24\chshdng0\chcfpat0\chcbpat1 RTF_Num 12 4;}{\*\cs83 \additive \f2\fs24\chshdng0\chcfpat0\chcbpat1 RTF_Num 12 5;}{\*\cs84 \additive \f14\fs24\chshdng0\chcfpat0\chcbpat1 RTF_Num 12 6;}{\*\cs85 \additive \f3\fs24\chshdng0\chcfpat0\chcbpat1 
RTF_Num 12 7;}{\*\cs86 \additive \f2\fs24\chshdng0\chcfpat0\chcbpat1 RTF_Num 12 8;}{\*\cs87 \additive \f14\fs24\chshdng0\chcfpat0\chcbpat1 RTF_Num 12 9;}{\*\cs88 \additive \fs24\up6 \sbasedon10 footnote reference;}{\*\cs89 \additive \fs24\up6 \sbasedon10 
endnote reference;}{\*\cs90 \additive \fs24\ul\cf2 \sbasedon10 Hyperlink;}{\*\cs91 \additive \fs24\ul\cf12 \sbasedon10 FollowedHyperlink;}{\*\cs92 \additive \b\fs24 \sbasedon10 Strong;}{\*\cs93 \additive \fs20\loch\f2 \sbasedon10 HTML Code;}{\*\cs94 
\additive \fs24\ul\cf9 Internet Link;}{\*\cs95 \additive \fs24 Footnote Characters;}{\*\cs96 \additive \fs24\up10 Footnote anchor;}{\*\cs97 \additive \fs24 Endnote Characters;}{\*\cs98 \additive \fs24\up10 Endnote anchor;}}{\*\listtable
{\list\listtemplateid1{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow2\levelstartat0\levelspace0\levelindent0{\leveltext\'01-;}{\levelnumbers;}\f0\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1 \fi-360\li720 }{\listlevel\levelnfc23
\levelnfcn23\leveljc0\leveljcn0\levelfollow2\levelstartat1\levelspace0\levelindent0{\leveltext\'01o;}{\levelnumbers;}\f2\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1 \fi-360\li1440 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow2
\levelstartat1\levelspace0\levelindent0{\leveltext\'01\u-3929 ?;}{\levelnumbers;}\f14\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1 \fi-360\li2160 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow2\levelstartat1\levelspace0
\levelindent0{\leveltext\'01\u-3913 ?;}{\levelnumbers;}\f3\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1 \fi-360\li2880 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow2\levelstartat1\levelspace0\levelindent0{\leveltext
\'01o;}{\levelnumbers;}\f2\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1 \fi-360\li3600 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow2\levelstartat1\levelspace0\levelindent0{\leveltext\'01\u-3929 ?;}{\levelnumbers;}\f14\chbrdr
\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1 \fi-360\li4320 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow2\levelstartat1\levelspace0\levelindent0{\leveltext\'01\u-3913 ?;}{\levelnumbers;}\f3\chbrdr\brdrnone\brdrcf1 
\chshdng0\chcfpat1\chcbpat1 \fi-360\li5040 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow2\levelstartat1\levelspace0\levelindent0{\leveltext\'01o;}{\levelnumbers;}\f2\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1 \fi-360\li5760 }
{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow2\levelstartat1\levelspace0\levelindent0{\leveltext\'01\u-3929 ?;}{\levelnumbers;}\f14\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1 \fi-360\li6480 }{\listname RTF_Num 3;}\listid1}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}{\*\revtbl {Unknown;}}{\info{\author haiku}{\operator haiku}{\creatim\yr2003\mo9\dy19\hr14\min2}{\revtim\yr2004\mo11\dy29\hr14\min34}{\printim\yr2113\mo1\dy1}{\version11}{\edmins28}{\nofpages143}
{\nofwords35091}{\nofchars200023}{\*\company yeah}{\nofcharsws245642}{\vern8247}}\margl1417\margr1417\margt1417\margb1417 \deftab708\widowctrl\ftnbj\aenddoc\noxlattoyen\expshrtn\noultrlspc\dntblnsbdb\nospaceforul\hyphcaps0\horzdoc\dghspace120\dgvspace120
\dghorigin1701\dgvorigin1984\dghshow0\dgvshow3\jcompress\viewkind1\viewscale150\nolnhtadjtbl \fet2\sectd \sbknone\linex0\sectdefaultcl {\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl2\pnucltr\pnstart1\pnindent720\pnhang
{\pntxta .}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang{\pntxta )}}{\*\pnseclvl5\pndec\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl6\pnlcltr\pnstart1\pnindent720\pnhang
{\pntxtb (}{\pntxta )}}{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl8\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}\pard\plain 
\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs16\lang1033\langfe1036\cgrid\langnp1033\langfenp1036 {\cs88\fs24\up6 #{\footnote \pard\plain \s20\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 
\f11\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs88\up6 #}{ ID_INTRODUCTION}}${\footnote \pard\plain \s20\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs88\up6 $}{\fs16 
 Introduction to Dev-C++ 5}}K{\footnote \pard\plain \s20\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs88\up6 K}{\fs16  introduction;}}}{\{bmc splash.bmp\}
\par 
\par }{\cf17 Dev-C++}{is a full-featured }{\i Integrated Development Environment}{ (IDE) for the }{\cf17 C/C++}{ programming language. 
\par It uses }{\cf17 Mingw}{ port of }{\cf17 GCC}{ (GNU Compiler Collection) as it's compiler. It can creates native Win32 executables, 
\par either console or GUI, as well as DLLs and static libraries. }{\cf17 Dev-C++}{ can also be used in combination with Cygwin
\par or any other GCC based compiler.
\par }\pard\plain \s20\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs16\lang1033\langfe1036\cgrid\langnp1033\langfenp1036 {\cf17 Dev-C++ }{is a }{\cf17 Free Software }{distributed under the terms of the }{\uldb GNU General Public License (GPL)}{\v ID_GPL}{

\par 
\par }{\cf17 Dev-C++ features are :
\par }{
\par - Support GCC based compilers (Mingw included)
\par - Integrated debugging (with GDB)
\par - Support for multiple languages (localization)
\par - Class Browser
\par - Debug variable Browser
\par - Code Completion
\par - Function Listing
\par - Project Manager
\par - Customizable syntax highlighting editor
\par }\pard\plain \s20\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\fs16 - Quickly create Windows, console, static libraries and DLL}{
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs16\lang1033\langfe1036\cgrid\langnp1033\langfenp1036 {- Support of templates for creating your own project types
\par - Makefile creation
\par - Edit and compile Resource files
\par - Tool Manager
\par - Print support
\par - Find and replace facilities
\par - Package manager, for easy installation of add-on libraries
\par 
\par \page }{\cs88\fs24\up6 #{\footnote \pard\plain \s20\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs88\up6 #}{\fs16  ID_GPL}}${\footnote \pard\plain 
\s20\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs88\up6 $}{\fs16  GNU General Public License}}K{\footnote \pard\plain \s20\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 
\f11\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs88\up6 K}{\fs16  GNU;GPL;license;}}}{\b\fs28\cf18 License Agreement}{
\par 
\par 
\par Bloodshed Dev-C++ is distributed under the GNU General Public License. Be sure to read it before using Dev-C++.
\par 
\par GNU GENERAL PUBLIC LICENSE
\par Version 2, June 1991
\par 
\par Copyright (C) 1989, 1991 Free Software Foundation, Inc.
\par 675 Mass Ave, Cambridge, MA 02139, USA
\par 
\par Everyone is permitted to copy and distribute verbatim copies 
\par of this license document, but changing it is not allowed.
\par 
\par                             Preamble
\par 
\par   The licenses for most software are designed to take away your
\par freedom to share and change it.  By contrast, the GNU General Public
\par License is intended to guarantee your freedom to share and change free
\par software--to make sure the software is free for all its users.  This
\par General Public License applies to most of the Free Software
\par Foundation's software and to any other program whose authors commit to
\par using it.  (Some other Free Software Foundation software is covered by
\par 
\par the GNU Library General Public License instead.)  You can apply it to
\par your programs, too.
\par 
\par   When we speak of free software, we are referring to freedom, not
\par price.  Our General Public Licenses are designed to make sure that you
\par have the freedom to distribute copies of free software (and charge for
\par this service if you wish), that you receive source code or can get it
\par if you want it, that you can change the software or use pieces of it
\par in new free programs; and that you know you can do these things.
\par 
\par   To protect your rights, we need to make restrictions that forbid
\par anyone to deny you these rights or to ask you to surrender the rights.
\par These restrictions translate to certain responsibilities for you if you
\par distribute copies of the software, or if you modify it.
\par 
\par   For example, if you distribute copies of such a program, whether
\par gratis or for a fee, you must give the recipients all the rights that
\par you have.  You must make sure that they, too, receive or can get the
\par 
\par source code.  And you must show them these terms so they know their
\par rights.
\par 
\par   We protect your rights with two steps: (1) copyright the software, and
\par (2) offer you this license which gives you legal permission to copy,
\par distribute and/or modify the software.
\par 
\par   Also, for each author's protection and ours, we want to make certain
\par that everyone understands that there is no warranty for this free
\par software.  If the software is modified by someone else and passed on, we
\par 
\par want its recipients to know that what they have is not the original, so
\par that any problems introduced by others will not reflect on the original
\par authors' reputations.
\par 
\par   Finally, any free program is threatened constantly by software
\par patents.  We wish to avoid the danger that redistributors of a free
\par program will individually obtain patent licenses, in effect making the
\par program proprietary.  To prevent this, we have made it clear that any
\par patent must be licensed for everyone's free use or not licensed at all.
\par 
\par   The precise terms and conditions for copying, distribution and
\par modification follow.
\par 
\par                     GNU GENERAL PUBLIC LICENSE
\par    TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION
\par 
\par   0. This License applies to any program or other work which contains
\par a notice placed by the copyright holder saying it may be distributed
\par under the terms of this General Public License.  The "Program", below,
\par refers to any such program or work, and a "work based on the Program"
\par 
\par means either the Program or any derivative work under copyright law:
\par that is to say, a work containing the Program or a portion of it,
\par either verbatim or with modifications and/or translated into another
\par language.  (Hereinafter, translation is included without limitation in
\par the term "modification".)  Each licensee is addressed as "you".
\par 
\par Activities other than copying, distribution and modification are not
\par covered by this License; they are outside its scope.  The act of
\par 
\par running the Program is not restricted, and the output from the Program
\par is covered only if its contents constitute a work based on the
\par Program (independent of having been made by running the Program).
\par Whether that is true depends on what the Program does.
\par 
\par   1. You may copy and distribute verbatim copies of the Program's
\par source code as you receive it, in any medium, provided that you
\par conspicuously and appropriately publish on each copy an appropriate
\par copyright notice and disclaimer of warranty; keep intact all the
\par 
\par notices that refer to this License and to the absence of any warranty;
\par and give any other recipients of the Program a copy of this License
\par along with the Program.
\par 
\par You may charge a fee for the physical act of transferring a copy, and
\par you may at your option offer warranty protection in exchange for a fee.
\par 
\par   2. You may modify your copy or copies of the Program or any portion
\par of it, thus forming a work based on the Program, and copy and
\par distribute such modifications or work under the terms of Section 1
\par 
\par above, provided that you also meet all of these conditions:
\par 
\par     a) You must cause the modified files to carry prominent notices
\par     stating that you changed the files and the date of any change.
\par 
\par     b) You must cause any work that you distribute or publish, that in
\par     whole or in part contains or is derived from the Program or any
\par     part thereof, to be licensed as a whole at no charge to all third
\par     parties under the terms of this License.
\par 
\par     c) If the modified program normally reads commands interactively
\par 
\par     when run, you must cause it, when started running for such
\par     interactive use in the most ordinary way, to print or display an
\par     announcement including an appropriate copyright notice and a
\par     notice that there is no warranty (or else, saying that you provide
\par     a warranty) and that users may redistribute the program under
\par     these conditions, and telling the user how to view a copy of this
\par     License.  (Exception: if the Program itself is interactive but
\par 
\par     does not normally print such an announcement, your work based on
\par     the Program is not required to print an announcement.)
\par 
\par These requirements apply to the modified work as a whole.  If
\par identifiable sections of that work are not derived from the Program,
\par and can be reasonably considered independent and separate works in
\par themselves, then this License, and its terms, do not apply to those
\par sections when you distribute them as separate works.  But when you
\par distribute the same sections as part of a whole which is a work based
\par 
\par on the Program, the distribution of the whole must be on the terms of
\par this License, whose permissions for other licensees extend to the
\par entire whole, and thus to each and every part regardless of who wrote it.
\par 
\par Thus, it is not the intent of this section to claim rights or contest
\par your rights to work written entirely by you; rather, the intent is to
\par exercise the right to control the distribution of derivative or
\par collective works based on the Program.
\par 
\par In addition, mere aggregation of another work not based on the Program
\par 
\par with the Program (or with a work based on the Program) on a volume of
\par a storage or distribution medium does not bring the other work under
\par the scope of this License.
\par 
\par   3. You may copy and distribute the Program (or a work based on it,
\par under Section 2) in object code or executable form under the terms of
\par Sections 1 and 2 above provided that you also do one of the following:
\par 
\par     a) Accompany it with the complete corresponding machine-readable
\par     source code, which must be distributed under the terms of Sections
\par 
\par     1 and 2 above on a medium customarily used for software interchange; or,
\par 
\par     b) Accompany it with a written offer, valid for at least three
\par     years, to give any third party, for a charge no more than your
\par     cost of physically performing source distribution, a complete
\par     machine-readable copy of the corresponding source code, to be
\par     distributed under the terms of Sections 1 and 2 above on a medium
\par     customarily used for software interchange; or,
\par 
\par     c) Accompany it with the information you received as to the offer
\par 
\par     to distribute corresponding source code.  (This alternative is
\par     allowed only for noncommercial distribution and only if you
\par     received the program in object code or executable form with such
\par     an offer, in accord with Subsection b above.)
\par 
\par The source code for a work means the preferred form of the work for
\par making modifications to it.  For an executable work, complete source
\par code means all the source code for all modules it contains, plus any
\par associated interface definition files, plus the scripts used to
\par 
\par control compilation and installation of the executable.  However, as a
\par special exception, the source code distributed need not include
\par anything that is normally distributed (in either source or binary
\par form) with the major components (compiler, kernel, and so on) of the
\par operating system on which the executable runs, unless that component
\par itself accompanies the executable.
\par 
\par If distribution of executable or object code is made by offering
\par access to copy from a designated place, then offering equivalent
\par 
\par access to copy the source code from the same place counts as
\par distribution of the source code, even though third parties are not
\par compelled to copy the source along with the object code.
\par 
\par   4. You may not copy, modify, sublicense, or distribute the Program
\par except as expressly provided under this License.  Any attempt
\par otherwise to copy, modify, sublicense or distribute the Program is
\par void, and will automatically terminate your rights under this License.
\par However, parties who have received copies, or rights, from you under
\par 
\par this License will not have their licenses terminated so long as such
\par parties remain in full compliance.
\par 
\par   5. You are not required to accept this License, since you have not
\par signed it.  However, nothing else grants you permission to modify or
\par distribute the Program or its derivative works.  These actions are
\par prohibited by law if you do not accept this License.  Therefore, by
\par modifying or distributing the Program (or any work based on the
\par Program), you indicate your acceptance of this License to do so, and
\par 
\par all its terms and conditions for copying, distributing or modifying
\par the Program or works based on it.
\par 
\par   6. Each time you redistribute the Program (or any work based on the
\par Program), the recipient automatically receives a license from the
\par original licensor to copy, distribute or modify the Program subject to
\par these terms and conditions.  You may not impose any further
\par restrictions on the recipients' exercise of the rights granted herein.
\par You are not responsible for enforcing compliance by third parties to
\par 
\par this License.
\par 
\par   7. If, as a consequence of a court judgment or allegation of patent
\par infringement or for any other reason (not limited to patent issues),
\par conditions are imposed on you (whether by court order, agreement or
\par otherwise) that contradict the conditions of this License, they do not
\par excuse you from the conditions of this License.  If you cannot
\par distribute so as to satisfy simultaneously your obligations under this
\par License and any other pertinent obligations, then as a consequence you
\par 
\par may not distribute the Program at all.  For example, if a patent
\par license would not permit royalty-free redistribution of the Program by
\par all those who receive copies directly or indirectly through you, then
\par the only way you could satisfy both it and this License would be to
\par refrain entirely from distribution of the Program.
\par 
\par If any portion of this section is held invalid or unenforceable under
\par any particular circumstance, the balance of the section is intended to
\par apply and the section as a whole is intended to apply in other
\par 
\par circumstances.
\par 
\par It is not the purpose of this section to induce you to infringe any
\par patents or other property right claims or to contest validity of any
\par such claims; this section has the sole purpose of protecting the
\par integrity of the free software distribution system, which is
\par implemented by public license practices.  Many people have made
\par generous contributions to the wide range of software distributed
\par through that system in reliance on consistent application of that
\par 
\par system; it is up to the author/donor to decide if he or she is willing
\par to distribute software through any other system and a licensee cannot
\par impose that choice.
\par 
\par This section is intended to make thoroughly clear what is believed to
\par be a consequence of the rest of this License.
\par 
\par   8. If the distribution and/or use of the Program is restricted in
\par certain countries either by patents or by copyrighted interfaces, the
\par original copyright holder who places the Program under this License
\par 
\par may add an explicit geographical distribution limitation excluding
\par those countries, so that distribution is permitted only in or among
\par countries not thus excluded.  In such case, this License incorporates
\par the limitation as if written in the body of this License.
\par 
\par   9. The Free Software Foundation may publish revised and/or new versions
\par of the General Public License from time to time.  Such new versions will
\par be similar in spirit to the present version, but may differ in detail to
\par 
\par address new problems or concerns.
\par 
\par Each version is given a distinguishing version number.  If the Program
\par specifies a version number of this License which applies to it and "any
\par later version", you have the option of following the terms and conditions
\par either of that version or of any later version published by the Free
\par Software Foundation.  If the Program does not specify a version number of
\par this License, you may choose any version ever published by the Free Software
\par Foundation.
\par 
\par   10. If you wish to incorporate parts of the Program into other free
\par programs whose distribution conditions are different, write to the author
\par to ask for permission.  For software which is copyrighted by the Free
\par Software Foundation, write to the Free Software Foundation; we sometimes
\par make exceptions for this.  Our decision will be guided by the two goals
\par of preserving the free status of all derivatives of our free software and
\par of promoting the sharing and reuse of software generally.
\par 
\par                             NO WARRANTY
\par 
\par   11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY
\par FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN
\par OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES
\par PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED
\par OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
\par MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS
\par 
\par TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE
\par PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,
\par REPAIR OR CORRECTION.
\par 
\par   12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
\par WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR
\par REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,
\par INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING
\par OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED
\par 
\par TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY
\par YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER
\par PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE
\par POSSIBILITY OF SUCH DAMAGES.
\par 
\par                      END OF TERMS AND CONDITIONS
\par 
\par         Appendix: How to Apply These Terms to Your New Programs
\par 
\par   If you develop a new program, and you want it to be of the greatest
\par possible use to the public, the best way to achieve this is to make it
\par 
\par free software which everyone can redistribute and change under these terms.
\par 
\par   To do so, attach the following notices to the program.  It is safest
\par to attach them to the start of each source file to most effectively
\par convey the exclusion of warranty; and each file should have at least
\par the "copyright" line and a pointer to where the full notice is found.
\par 
\par     <one line to give the program's name and a brief idea of what it does.>
\par     Copyright (C) 19yy  <name of author>
\par 
\par     This program is free software; you can redistribute it and/or modify
\par     it under the terms of the GNU General Public License as published by
\par     the Free Software Foundation; either version 2 of the License, or
\par     (at your option) any later version.
\par 
\par     This program is distributed in the hope that it will be useful,
\par     but WITHOUT ANY WARRANTY; without even the implied warranty of
\par     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
\par     GNU General Public License for more details.
\par 
\par     You should have received a copy of the GNU General Public License
\par     along with this program; if not, write to the Free Software
\par     Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
\par 
\par Also add information on how to contact you by electronic and paper mail.
\par 
\par If the program is interactive, make it output a short notice like this
\par when it starts in an interactive mode:
\par 
\par     Gnomovision version 69, Copyright (C) 19yy name of author
\par     Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.
\par 
\par     This is free software, and you are welcome to redistribute it
\par     under certain conditions; type `show c' for details.
\par 
\par The hypothetical commands `show w' and `show c' should show the appropriate
\par parts of the General Public License.  Of course, the commands you use may
\par be called something other than `show w' and `show c'; they could even be
\par mouse-clicks or menu items--whatever suits your program.
\par 
\par You should also get your employer (if you work as a programmer) or your
\par 
\par school, if any, to sign a "copyright disclaimer" for the program, if
\par necessary.  Here is a sample; alter the names:
\par 
\par   Yoyodyne, Inc., hereby disclaims all copyright interest in the program
\par   `Gnomovision' (which makes passes at compilers) written by James Hacker.
\par 
\par   <signature of Ty Coon>, 1 April 1989
\par   Ty Coon, President of Vice
\par 
\par This General Public License does not permit incorporating your program into
\par proprietary programs.  If your program is a subroutine library, you may
\par 
\par consider it more useful to permit linking proprietary applications with the
\par library.  If this is what you want to do, use the GNU Library General
\par Public License instead of this License. 
\par \page }{\super #{\footnote\ftnalt \pard\plain \s30\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs20\lang1036\langfe1033\cgrid\langnp1036\langfenp1033 {\lang1033\langfe1033\langnp1033 #}{\cs89\fs24\up6\lang1033\langfe1033\langnp1033 \tab }{
\f1\lang1031\langfe1033\langnp1031 ID_SYSTEMREQUIREMENTS}}}{\cs89\fs24\up6\lang1033\langfe1033\super\langfenp1033 ${\footnote\ftnalt \pard\plain \s30\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 
\f11\fs20\lang1036\langfe1033\cgrid\langnp1036\langfenp1033 {\lang1033\langfe1033\langnp1033 $}{\cs89\fs24\up6\lang1033\langfe1033\langnp1033 \tab }{\f1\lang1031\langfe1033\langnp1031 System Requirements}}}{\b\fs28\cf18 System Requirements}{
\par  
\par }\pard\plain \s20\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs16\lang1033\langfe1036\cgrid\langnp1033\langfenp1036 {These are the minimum requirements of Dev-C++: 
\par }{\cf17 - Microsoft Windows 95, 98, NT 4, 2000, XP 
\par - 8 MB RAM with a big swapfile 
\par }{\cf17\lang1036\langfe1036\langnp1036 - 100 Mhz Intel compatible CPU 
\par }{\cf17 - 30 MB free disk space}{
\par }\pard\plain \s20\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs16\lang1033\langfe1036\cgrid\langnp1033\langfenp1036 {
\par These are the recommended requirements of Dev-C++:
\par }{\cf17 - Microsoft Windows 2000, XP
\par - 32 MB RAM 
\par }{\cf17\lang1036\langfe1036\langnp1036 - 400 Mhz Intel compatible CPU 
\par }{\cf17 - 200 MB free disk space
\par }{
\par \page }{\cs88\fs24\up6 #{\footnote \pard\plain \s20\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs88\up6 #}{\fs16  ID_CREDITS}}${\footnote \pard\plain 
\s20\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs88\up6 $}{\fs16  Credits}}}{\b\fs28\cf18 Credits}{
\par }\pard\plain \s20\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs16\lang1033\langfe1036\cgrid\langnp1033\langfenp1036 {\cf9 Developers }{: Colin Laplace, Hongli Lai, Mike Berg, Yiannis Mandravellos
\par }{\cf9 Mingw compiler system :}{Mumit Khan, J.J. Var Der Heidjen, Colin Hendrix and GNU developers
\par }{\cf9 Update system and initial work on the help file : }{Kip Warner
\par }{\cf9 New Look theme :}{Gerard Caulfield: 
\par }{\cf9 Gnome icons :}{Gnome designers
\par }{\cf9 Blue theme :}{Thomas Thron
\par }\pard\plain \s20\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\fs16\cf9 Introduction to C :}{\fs16 University of Leicester}{
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs16\lang1033\langfe1036\cgrid\langnp1033\langfenp1036 {\page }{\cs88\fs24\up6 #{\footnote \pard\plain \s20\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 
\f11\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs88\up6 #}{\fs16  ID_CREATEPROJECT}}${\footnote \pard\plain \s20\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs88\up6 $}{\fs16 
 Creating a Project}}K{\footnote \pard\plain \s20\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs88\up6 K}{\fs16  create;project;}}}{\b\fs28\cf18 Creating a Project}{
\par }\pard\plain \s20\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs16\lang1033\langfe1036\cgrid\langnp1033\langfenp1036 {
\par }{\cf9 What is a Dev-C++ Project ?
\par }{
\par A Project is a center for managing your different source files and options inside Dev-C++. It helps you navigate 
\par through your code, and easily set different parameters, like the type of program you are doing (GUI, console, DLL ...).
\par 
\par }{\cf9 When to use Dev-C++ Projects ?
\par }{
\par - If you have more than one source file, you must create a project in order for Dev-C++ to link all your source files together,
\par after they were compiled. 
\par - If you need to create a DLL or static library, or want to use Resources files in your program
\par }\pard\plain \s20\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs16\lang1033\langfe1036\cgrid\langnp1033\langfenp1036 {\cf9 How can i create a Dev-C++ Project ? 
\par }{
\par Go to the }{\i File}{ menu and click on }{\i New}{, then }{\i Project}{. A dialog opens, containing different Project types.
\par 
\par \{bmc newproj.bmp\}
\par 
\par Here are the different basic projects type :
\par 
\par - Windows application :  creates a Windows program, using the Win32 API. 
\par - Console application : creates a console program
\par - Static library : creates an empty project with the options needed for building a static library
\par - DLL : creates a Win32 Dynamic Link Library
\par 
\par Now that you selected your project type, fill the name of your project in the corresponding edit box, select the language you
\par will be using (C or C++), and click on OK. 
\par \page }{\cs88\fs24\up6 #{\footnote \pard\plain \s20\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs88\up6 #}{\fs16  ID_ADDREMPROJECT}}${\footnote \pard\plain 
\s20\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs88\up6 $}{\fs16  Adding/Removing files}}K{\footnote \pard\plain \s20\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 
\f11\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs88\up6 K}{\fs16  project;add;remove;}}}{\b\fs28\cf18  Adding and Removing files}{
\par }{\b\fs28\cf18 
\par }{Adding and removing files is very easy. You can add multiple files in the same time by clicking on }{\i Project}{ menu,
\par then on }{\i Add to Project}{.
\par 
\par  \{bmc project_add.bmp\}
\par 
\par You have different ways for removing files from your project. Either click on }{\i Project}{ menu, then on }{\i Remove from Project}{ 
\par and select the file you want to remove in the list, or right-click on the file you want to remove in the Project Manager, and click on }{\i Remove file }{
\par }{\i 
\par }{\i  }{\{bmc project_remove.bmp\}
\par \page }{\cs88\fs24\up6 #{\footnote \pard\plain \s20\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs88\up6 #}{\fs16  ID_MANAGEPROJECT}}${\footnote \pard\plain 
\s20\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs88\up6 $}{\fs16  Managing Project options}}K{\footnote \pard\plain \s20\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 
\f11\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs88\up6 K}{\fs16  manage;project;options;}}}{\b\fs28\cf18 Project options overview}{
\par }{\b\fs28\cf18 
\par }{You can load the Project Options dialog by clicking on the }{\i Project}{ menu, then on }{\i Options }{(shortcut :Alt+P).
\par 
\par }{\b\i General sheet : 
\par }{\fs20 
\par \{bmc projopt_general.bmp\}
\par }\pard\plain \s23\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f2\fs20\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {\f11 
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs16\lang1033\langfe1036\cgrid\langnp1033\langfenp1036 {\cf9 Name}{: Modify here the name of your project.
\par 
\par }{\cf9 Icon}{\cf18  }{: You can assign an icon to your program, either by selecting one in the Icon Library, or by giving your own icon using the Browse button.
\par 
\par }{\cf9 Type}{\cf18  }{: This is an important settings which indicates which project type you are making. Select :
\par }\pard \ql \li705\ri0\nowidctlpar\faauto\rin0\lin705\itap0 {\b - Win32 GUI}{: if your application is a graphical Windows program
\par }{\b - Win32 Console }{: if your application needs a console window (MS-Dos window)
\par }{\b - Win32 Static Lib }{: if you are creating a static library
\par }{\b - Win32 DLL }{: if you are creating a dynamic link library (DLL)}{\v ID_LINKLIB}{
\par }\pard\plain \s23\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f2\fs20\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {\f11 
\par 
\par 
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs16\lang1033\langfe1036\cgrid\langnp1033\langfenp1036 {\b\i Files sheet : 
\par }{\fs20 
\par \{bmc projopt_files.bmp\}
\par 
\par }{This window enables you to modify the compilation commands and options for each source file.
\par 
\par }{\cf9 Build priority : }{Increment this value in order to have the source file compiled in priority of the others
\par 
\par }{\cf9 Include in compilation : }{If not set, your file will not be compiled
\par 
\par }{\cf9 Include in linking : }{Add the object file generated from the source file to the linking stage
\par 
\par }{\cf9 Compile file as C++ : }{Check this flag if it is a C++ source file
\par 
\par }{\cf9 Override build command : }{For experimented users only. You can change there the command used by Dev-C++ to compile your file
\par }\pard\plain \s23\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f2\fs20\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {\f11 
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs16\lang1033\langfe1036\cgrid\langnp1033\langfenp1036 {\b\i 
\par Compiler sheet : 
\par }{\fs20 
\par }{\{bmc projopt_comp.bmp\}
\par 
\par See }{\uldb\lang1024\langfe1024\noproof Compiler Options}{\lang1024\langfe1024\noproof ID_COMPILEROPTIONS}{
\par }\pard\plain \s23\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f2\fs20\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {\f11\cf9 
\par 
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs16\lang1033\langfe1036\cgrid\langnp1033\langfenp1036 {\b\i Parameters sheet : 
\par }{\fs20 
\par }{\{bmc projopt_lib.bmp\}
\par 
\par You can provide here command line arguments to the C/C++ compilers and linker.
\par Use the linker parameters box to specify libraries to link with your project. For more information, please }{\uldb\lang1024\langfe1024\noproof read this}{\lang1024\langfe1024\noproof ID_LINKLIB.}{
\par }\pard\plain \s23\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f2\fs20\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {\f11 
\par 
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs16\lang1033\langfe1036\cgrid\langnp1033\langfenp1036 {\b\i Directories sheet : 
\par }{\fs20 
\par \{bmc projopt_dirs.bmp\}
\par 
\par }{You can provide here a list of Includes, Resources and Libraries directories to be searched when compiling/linking.
\par }{\fs20 
\par 
\par }{\b\i Build Options sheet : 
\par }{\fs20 
\par \{bmc projopt_build.bmp\}
\par 
\par }{\cf9 Executable output directory}{\cf18  }{: Specify here the directory where your executable will be created (default is project\rquote s directory)}{\cf18 .}{
\par }{\cf18 
\par }{\cf9 Object file output directory}{\cf18  }{: Specify here the directory where your object files will be created (default is source file\rquote s directory).
\par 
\par }{\cf9 Override output filename : }{You may change the output filename of your program here.
\par 
\par }{\fs20 
\par }{\b\i Makefile sheet : 
\par }{\fs20 
\par \{bmc projopt_make.bmp\}
\par }\pard\plain \s20\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par }{\fs16 Dev-C++ automatically creates a Makefile for taking care of the building process. If you are experienced with makefiles and want to add other lines, you can do it here.}{
\par 
\par 
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs16\lang1033\langfe1036\cgrid\langnp1033\langfenp1036 {\b\i Version Info sheet : 
\par }{\fs20 
\par \{bmc projopt_info.bmp\}
\par }\pard\plain \s20\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par }{\fs16 You can specify version information for your program here.}{
\par \page }{\cs88\up6 #{\footnote \pard\plain \s20\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs88\up6 #}{\fs16  ID_LINKLIB}}${\footnote \pard\plain 
\s20\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs88\up6 $}{\fs16  Linking libraries with your project}}K{\footnote \pard\plain \s20\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 
\f11\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs88\up6 K}{\fs16  libraries;library;link;linking;}}}{\b\fs28\cf18 Linking libraries with your project}{
\par 
\par 
\par }{\b\fs16 A little history : }{\b 
\par }{\fs16 Library filenames under the GNU system are in the form }{\i\fs16 libNAME.a}{\fs16  (with NAME the name of the library, like wsock32).}{
\par }{\fs16 Thus if for example you want to use the wsock32 (winsock) library, the filename will be }{\i\fs16 libwsock32.a}{
\par }{\fs16 The GCC parameter for linking a library is }{\b\i\fs16 \endash NAME}{\fs16 , so for linking with the wsock32 library we would give GCC the \endash lwsock32 parameter.}{
\par 
\par }{\b\fs16 Linking your library}{\fs16 :}{
\par }{\fs16 Click on }{\i\fs16 Project }{\fs16 menu then on }{\i\fs16 Options}{\fs16 . Now click on the }{\i\fs16 Parameters}{\fs16  sheet}{\i\fs16 .}{
\par }{\i 
\par }{\fs16 \{bmc projopt_lib.bmp\}}{
\par 
\par }{\fs16 In the }{\i\fs16 Linker}{\fs16  edit box, you can specify as many libraries as you need. You can also pass the complete filename of the library. }{
\par }{\fs16 Example : }{\i\fs16 -}{\fs16 lwx \endash lm \endash lwsock32 c:\\libs\\mylib.a c:\\objs\\myobj.o}{
\par 
\par }{\fs16 You may also use the }{\i\fs16 Add Library or Object}{\fs16  button  \{bmc icon_addlib.bmp\}  to select your library from a list.}{
\par 
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs16\lang1033\langfe1036\cgrid\langnp1033\langfenp1036 {\fs20 
\par \page }{\cs88\fs24\up6 #{\footnote \pard\plain \s20\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs88\up6 #}{\fs16  ID_COMPILELINK}}${\footnote \pard\plain 
\s20\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs88\up6 $}{\fs16  Compiling and linking process}}K{\footnote \pard\plain \s20\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 
\f11\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs88\up6 K}{\fs16  compile;linking;compiling;link;}}}{\fs20  }{\b\fs28\cf18 Compiling and linking process}{
\par }{\fs20 
\par }\pard\plain \s22\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \b\f11\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\fs16 How does the compile and link process works ?}{
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs16\lang1033\langfe1036\cgrid\langnp1033\langfenp1036 {\b 
\par }\pard\plain \s20\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\fs16 The process can be globally divided into several programs :}{
\par }\pard \s20\ql \li360\ri0\nowidctlpar\faauto\rin0\lin360\itap0 {\fs16\cf9 - Preprocessor}{\fs16 : process the source file before actually compiling it. It will for example check and replace macros and include files in your source.}{
\par }{\fs16\cf9 - Compiler : }{\fs16 transform your source file into assembly code (processor language \endash  human readable)}{
\par }{\fs16\cf9 - Assembler :}{\fs16 takes the assembly code and generate machine-readable code (binary object code)}{
\par }{\fs16\cf9 - Linker : }{\fs16 assembles and resolves object codes together to create a single executable.}{
\par }\pard \s20\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {\cf9 
\par }{\b\fs16 How to do this in Dev-C++ ?}{\b 
\par 
\par }{\fs16 Just go to the }{\i\fs16 Execute }{\fs16 menu and click }{\i\fs16 Compile}{\fs16   \{bmc icon_compile.bmp\} (shortcut : Ctrl+F9), and Dev-C++ will take care of calling the compiler and linker.}{
\par }{\fs16 Look at the bottom panel of Dev-C++, you should get something like this :}{
\par 
\par }{\fs16\lang1036\langfe1033\langnp1036 \{bmc comp_log.bmp\}}{\lang1036\langfe1033\langnp1036 
\par 
\par }{\fs16 This log window shows you what Dev-C++ is doing (the program it executes, the files it is creating, ...).}{
\par }{\fs16 In case your program compiled, you will see the message \lquote Compilation successful\rquote  in this window.}{
\par 
\par }{\fs16 If compiling or linking fails, you will see a list of the errors on the bottom panel :}{
\par 
\par }{\fs16 \{bmc comp_errors.bmp\}}{
\par 
\par }{\fs16 You can directly jump to the line in your code where the error appear by double-clicking on its item.}{
\par }{\fs16 To note: a \lquote parse error\rquote  is a syntax error (like a missing semicolon at the end of an instruction, etc...).}{
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs16\lang1033\langfe1036\cgrid\langnp1033\langfenp1036 {\page }{\cs88\fs24\up6 #{\footnote \pard\plain \s20\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 
\f11\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs88\up6 #}{\fs16  ID_EXECUTE}}${\footnote \pard\plain \s20\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs88\up6 $}{\fs16 
 Executing your program}}K{\footnote \pard\plain \s20\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs88\up6 K}{\fs16  executing;execute;program;}}}{\fs28\cf18  }{\b\fs28\cf18 
Executing your program}{
\par }{\fs20 
\par }\pard\plain \s22\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \b\f11\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\fs16 Basics :}{
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs16\lang1033\langfe1036\cgrid\langnp1033\langfenp1036 {\fs20 
\par }{Executing your program is as simply as clicking on the }{\i Execute}{ menu, then }{\i Run}{  \{bmc icon_run.bmp\} (shortcut : Ctrl+F10).
\par You can also use }{\i Compile and Run}{  \{bmc icon_compilerun.bmp\} (shortcut : F9) to build your program before executing it.
\par If you need to pass parameters to your program, you can use }{\i Execute}{ menu, then }{\i Parameters}{ to provide them.
\par 
\par 
\par }\pard\plain \s22\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \b\f11\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\fs16 Profiling :}{
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs16\lang1033\langfe1036\cgrid\langnp1033\langfenp1036 {\b 
\par }{This process reports you what happens in your program (function calls, execution time, ...) when you execute it.
\par You must enable \lquote Generate profiling info for analysis\rquote  in Compiler Options, Code Generation sheet. Then compile your project as usual, and run it (profiling information are generated/refreshed each time you execute your program). 
\par When you are done, click the }{\i Execute}{ menu, then }{\i Profile analysis}{. The profiling window will appear and show you a profile of the execution of your program.
\par }{\fs20 
\par \page }{\cs88\fs24\up6 #{\footnote \pard\plain \s20\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs88\up6 #}{\fs16  ID_INTRODEBUG}}${\footnote \pard\plain 
\s20\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs88\up6 $}{\fs16  Introduction to Debugging}}K{\footnote \pard\plain \s20\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 
\f11\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs88\up6 K}{\fs16  debug;introduction;}}}{\fs20  }{\b\fs28\cf18 Introduction to debugging}{
\par }{\b\fs28\cf18 
\par }{It is a known fact that sometimes developers make errors when making a program. Those errors commonly called \lquote bugs\rquote 
 can be very tricky to find and correct, thus the debugger has been created to help developers investigate their program while it is running.
\par 
\par A debugger basically runs a program while
 keeping track of its functions, variables and instructions. It is capable of stopping your program at a given moment, which is called breakpointing. You can set breakpoints anywhere in your code : once your program reaches that code during execution, the
 debugger will stop and let you examine the current data in your program. 
\par You probably already understand how useful a debugger may be when trying to correct bugs, so you may go to the}{\uldb  }{\uldb\lang1024\langfe1024\noproof next section }{\lang1024\langfe1024\noproof ID_DEBUGPROCESS to learn}{
 how to use Dev-C++ integrated debugging.
\par 
\par  
\par \page }{\cs88\fs24\up6 #{\footnote \pard\plain \s20\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs88\up6 #}{\fs16  ID_DEBUGPROCESS}}${\footnote \pard\plain 
\s20\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs88\up6 $}{\fs16  Debug Process}}K{\footnote \pard\plain \s20\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 
\f11\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs88\up6 K}{\fs16  debug;}}}{\fs28\cf18  }{\b\fs28\cf18 Debugging your program}{
\par }{\fs20 
\par }{Launching your program into the debugger is easy. Just go to the }{\i Debug}{ menu and click on }{\i Debug}{  \{bmc icon_debug.bmp\} (shortcut : F8).
\par If you do not have debugging information set in your project, Dev-C++ will ask you if you want to rebuild your program with these information enabled. You can manually select that option in Compiler Option in the Linker section. After your project has bee
n rebuild, you can launch Debug again. 
\par 
\par The debugger has now loaded your program and runs it. but until that you can learn to control several aspects of the debugger :
\par 
\par {\listtext\pard\plain\fs16\lang1024\langfe1024\noproof \hich\af0\dbch\af0\loch\f0 -\tab}}\pard \ql \fi-360\li720\ri0\nowidctlpar\faauto\ls1\rin0\lin720\itap0 {\uldb\lang1024\langfe1024\noproof\langfenp1033 Setting Breakpoints in your code}{
\lang1024\langfe1024\noproof\langfenp1033 ID_BREAKPOINT
\par {\listtext\pard\plain\fs16\lang1024\langfe1024\noproof \hich\af0\dbch\af0\loch\f0 -\tab}}{\uldb\lang1024\langfe1024\noproof\langfenp1033 Stepping in your code}{\lang1024\langfe1024\noproof\langfenp1033 ID_STEPDEBUG
\par {\listtext\pard\plain\fs16\lang1024\langfe1024\noproof \hich\af0\dbch\af0\loch\f0 -\tab}}{\uldb\lang1024\langfe1024\noproof\langfenp1033 Displaying variables value and classes/structures members}{\lang1024\langfe1024\noproof\langfenp1033 ID_DISPLAYDEBUG

\par {\listtext\pard\plain\fs16\lang1024\langfe1024\noproof \hich\af0\dbch\af0\loch\f0 -\tab}}{\uldb\lang1024\langfe1024\noproof\langfenp1033 Backtracing}{\lang1024\langfe1024\noproof\langfenp1033 ID_BACKTRACE
\par {\listtext\pard\plain\fs16\lang1024\langfe1024\noproof \hich\af0\dbch\af0\loch\f0 -\tab}}{\uldb\lang1024\langfe1024\noproof\langfenp1033 Using the CPU Window}{\lang1024\langfe1024\noproof\langfenp1033 ID_CPUWINDOW
\par }\pard \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {
\par The output Dev-C++ receives from GDB is displayed in the }{\i Debug Output}{ sheet at the bottom of Dev-C++.
\par This output is probably only interesting if you are familiar with GDB. You can also send commands directly to it (if you do not know GDB, you can type the }{\i help}{
 command for to have a list) by using the edit box just above the output (see screenshot below).
\par 
\par \{bmc debug_log.bmp\}
\par \page }{\cs88\fs24\up6 #{\footnote \pard\plain \s20\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs88\up6 #}{\fs16  ID_BREAKPOINT}}${\footnote \pard\plain 
\s20\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs88\up6 $}{\fs16  Setting Breakpoints}}K{\footnote \pard\plain \s20\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 
\f11\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs88\up6 K}{\fs16  breakpoint;debug;debugging;setting;}}}{\fs28\cf18  }{\b\fs28\cf18 Setting Breakpoints}{
\par }{\fs20 
\par }{You can use breakpoints to pause your program at a certain instruction (line of code). 
\par To add a breakpoint, first select the line of code where you want to break by simply positioning the text cursor on it. Now, click on the }{\i Debug}{ menu, then on }{\i Toggle Breakpoint}{
 (shortcut : Ctrl+F5). Clicking on the gutter (at the left of the editor) in front of your line will have the same effect :
\par 
\par \{bmc debug_breakpoint.bmp\}
\par 
\par When you will }{\uldb\lang1024\langfe1024\noproof load the debugger}{\lang1024\langfe1024\noproof ID_DEBUGPROCESS, if your program executes the line of code you breakpointed, Dev-C++ will warn you that you\rquote 
re breakpoint was reached by changing the line color to blue :}{
\par }{\lang1024\langfe1024\noproof\langfenp1033 
\par }{\lang1024\langfe1024\noproof \{bmc debug_current.bmp\}}{
\par 
\par You can now }{\uldb\lang1024\langfe1024\noproof examine the data in your program}{\lang1024\langfe1024\noproof ID_DISPLAYDEBUG.or }{\uldb\lang1024\langfe1024\noproof step through your program.}{\lang1024\langfe1024\noproof ID_STEPDEBUG}{
\par }{\fs20 
\par \page }{\cs88\fs24\up6 #{\footnote \pard\plain \s20\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs88\up6 #}{\fs16  ID_STEPDEBUG}}${\footnote \pard\plain 
\s20\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs88\up6 $}{\fs16  Stepping in your program}}K{\footnote \pard\plain \s20\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 
\f11\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs88\up6 K}{\fs16  code;continue;debug;into;step;program;}}}{\fs20  }{\b\fs28\cf18 Stepping in your program}{
\par }{\b\fs28\cf18 
\par }{Once a breakpoint has been reached, you can step into the code of your application in different ways :
\par }\pard\plain \s20\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs16\lang1033\langfe1036\cgrid\langnp1033\langfenp1036 {- }{\b Next Step}{  \{bmc icon_nextstep.bmp\} (shortcut : F7) : 
\par 
\par }\pard \ql \fi708\li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {The debugger will step one instruction (line of code) in your program
\par }\pard \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {
\par - }{\b Step Into }{(shortcut : Shit+F7) : 
\par 
\par }\pard \ql \fi708\li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {The debugger will step one instruction. If that instruction is a function call it will jump into it.
\par }\pard \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {
\par - }{\b Continue }{\{bmc icon_continue.bmp\} (shortcut\~: Ctrl+F7) : 
\par 
\par }\pard \ql \fi708\li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {The debugger will continue the execution of your program until another breakpoint is reached}{\b .}{
\par }\pard\plain \s23\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f2\fs20\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {\f11 
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs16\lang1033\langfe1036\cgrid\langnp1033\langfenp1036 {\page }{\cs88\fs24\up6 #{\footnote \pard\plain \s20\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 
\f11\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs88\up6 #}{\fs16  ID_DISPLAYDEBUG}}${\footnote \pard\plain \s20\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs88\up6 $}{\fs16 
 Displaying variables value and classes/structures members}}K{\footnote \pard\plain \s20\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs88\up6 K}{\fs16 
 display;debug;value;variable;class;structure;member;show;}}}{\fs20  }{\b\fs28\cf18 Displaying variables value and classes/structures members}{
\par }{\fs20 
\par }{One of the other interest of debugging is the possibility to display the value of your variables at a given time.
\par Dev-C++ is able to show you in a convenient way the contents of your classes, strings, structures/unions, arrays and other variables, in the Debug Variable Browser, shown below :
\par 
\par \{bmc debug_browser.bmp\}
\par }{\fs20 
\par }{You can display your variables (after you reached a breakpoint) in two different ways :
\par - Click on the }{\i Add Watch }{\{bmc icon_addwatch.bmp\}
 ( shortcut : F4) button, type the name of your variable in the dialog, and press OK. If you select a word in the current source file and press F4, it will add a watch of the selected text without asking for a variable name.
\par - Point your mouse over a variable in your source code (if }{\i Watch variable under mouse}{ is enabled in }{\uldb\lang1024\langfe1024\noproof Environment Options}{\lang1024\langfe1024\noproof ID_ENVIRONMENT) and it will be added to the watch list.}{

\par 
\par }\pard\plain \s22\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \b\f11\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\fs16 Important Notes: }{
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs16\lang1033\langfe1036\cgrid\langnp1033\langfenp1036 {- When using pointers to structures or classes, if you want to display all the members of variable }{\i my_pointer }{
then you need to watch }{\i *my_pointer}{ (\lquote *\rquote  is the value-operator). Watching only }{\i my_pointer}{ would just display the address contained in }{\i my_pointer}{.
\par - Sometimes the debugger may not know the type of a pointer, and cannot display all of the members of the pointed structure or class. You can bypass this problem by casting your watched variable. For example, if the debugger cannot show the contents of }{
\i my_pointer}{ of type MyPointer, you could try adding the watch variable: }{\i *(MyPointer *)my_pointer}{
\par \page }{\cs88\fs24\up6 #{\footnote \pard\plain \s20\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs88\up6 #}{\fs16  ID_BACKTRACE}}${\footnote \pard\plain 
\s20\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs88\up6 $}{\fs16  Backtracing}}K{\footnote \pard\plain \s20\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 
\f11\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs88\up6 K}{\fs16  debug;backtrace;function;call;}}}{\fs20  }{\b\fs28\cf18 Backtracing}{
\par }{\b\fs28\cf18 
\par }{Backtracing is the debugging concept that tells you which functions were called before reaching a breakpoint or an interruption (like an access violation). 
\par Let\rquote s do a simple test, with the following code:
\par 
\par }{\cf19 #include <stdio.h>
\par }{
\par }{\b\f2 void}{\f2 test2()}{
\par }{\f2 \{
\par   printf(}{\f2\cf6 \'93hello\\n\'94}{\f2 );  }{\f2\cf9 /* Put a breakpoint on this line */}{
\par }{\f2 \}
\par }\pard\plain \s20\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\f2 
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs16\lang1033\langfe1036\cgrid\langnp1033\langfenp1036 {\b\f2 void}{\f2 test()
\par \{
\par }\pard\plain \s20\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\f2\fs16   test2();}{\f2 
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs16\lang1033\langfe1036\cgrid\langnp1033\langfenp1036 {\f2 \}
\par 
\par }{\b\f2 int}{\f2 main(}{\b\f2 int }{\f2 argc, }{\b\f2 char}{\f2  **argv)}{
\par }{\f2 \{
\par   test();
\par   }{\b\f2 return}{\f2  0;}{
\par }{\f2 \}
\par }{\fs20 
\par }{Put a breakpoint in function test2() on the printf() statement, and load the debugger. The breakpoint should be reached quite instantly, now go to the }{\i Debug}{ sheet and click on the }{\i Backtrace}{ button. The following list should appear:
\par 
\par \{bmc debug_backtrace.bmp\}
\par 
\par This correctly shows the list of functions that have been called (since the start of the program) before reaching the breakpoint. Clicking on a function in this list will bring you to it\rquote s implementation in your source code.
\par 
\par \page }{\cs88\fs24\up6 #{\footnote \pard\plain \s20\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs88\up6 #}{\fs16  ID_CPUWINDOW}}${\footnote \pard\plain 
\s20\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs88\up6 $}{\fs16  Using CPU windows}}K{\footnote \pard\plain \s20\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 
\f11\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs88\up6 K}{\fs16  debug;CPU;registers;display;}}}{\fs20  }{\b\fs28\cf18 Using CPU window}{
\par }{\fs20 
\par }{Dev-C++ provides a CPU window to expert developers who want access to the status of CPU registers and instructions. 
\par To show the CPU window, wait for a breakpoint or interruption to raise in your program and go to the }{\i Debug}{ menu, then click }{\i CPU Window}{. The following dialog will appear:
\par }{\fs20 
\par }{\{bmc debug_cpu.bmp\}}{\fs20  }{
\par }{\fs20 
\par }\pard\plain \s20\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\fs16 On the left, you can find the assembler instructions of the current func
tion. You can display the assembler code of any other function by typing its name in the }{\i\fs16 Function}{\fs16  field, then pressing the Enter key. You can also select the syntax of the assembler instructions: AT&T or Intel.}{
\par }{\fs16 On the right, the content of CPU registers is displayed.}{
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs16\lang1033\langfe1036\cgrid\langnp1033\langfenp1036 {\page }{\cs88\fs24\up6 #{\footnote \pard\plain \s20\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 
\f11\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs88\up6 #}{\fs16  ID_INTEGRATEDTEMPLATE}}${\footnote \pard\plain \s20\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs88\up6 $}{
\fs16  Integrated Templates}}K{\footnote \pard\plain \s20\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs88\up6 K}{\fs16  integrated;template;templates;}}}{\fs28\cf18  }{\b\fs28\cf18 
Integrated Templates}{
\par }{\fs20 
\par Dev-C++ uses a template system to be able to create specific projects on the fly. Templates usually contain a set of source files and pro
ject file which include the minimal code and all the compiler and linker options, which are necessary to compile the specific type of program. 
\par \page }{\cs88\fs24\up6 #{\footnote \pard\plain \s20\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs88\up6 #}{\fs16  ID_GETTINGPACKAGE}}${\footnote \pard\plain 
\s20\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs88\up6 $}{\fs16  Getting and installing Packages}}K{\footnote \pard\plain \s20\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 
\f11\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs88\up6 K}{\fs16  packages;installing;getting;}}}{\fs28\cf18  }{\b\fs28\cf18 Getting and installing Packages}{
\par }{\fs20 
\par to be implemented...
\par 
\par \page }{\cs88\fs24\up6 #{\footnote \pard\plain \s20\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs88\up6 #}{\fs16  ID_CREATEPACKAGES}}${\footnote \pard\plain 
\s20\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs88\up6 $}{\fs16  Creating your Packages}}K{\footnote \pard\plain \s20\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 
\f11\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs88\up6 K}{\fs16  creating;packages;}}}{\fs28\cf18  }{\b\fs28\cf18 Creating Packages}{
\par }\pard\plain \s23\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f2\fs20\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {\f11 
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs16\lang1033\langfe1036\cgrid\langnp1033\langfenp1036 {\fs20 to be implemented...
\par \page }{\cs88\fs24\up6 #{\footnote \pard\plain \s20\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs88\up6\lang1036\langfe1033\langnp1036 #}{\fs16\lang1036\langfe1033\langnp1036 
 ID_COMPILEROPTIONS}}${\footnote \pard\plain \s20\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs88\up6\lang1036\langfe1033\langnp1036 $}{\fs16\lang1036\langfe1033\langnp1036 
 Compiler Options}}K{\footnote \pard\plain \s20\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs88\up6\lang1036\langfe1033\langnp1036 K}{\fs16\lang1036\langfe1033\langnp1036  compiler;options;
}}}{\fs28\cf18  }{\b\fs28\cf18 Compiler Options}{
\par }{\fs20 
\par }{\loch\af1 \hich\af11\dbch\af0\loch\f1 To access the Compiler Options dialog, click on the }{\loch\af1 \loch\af1\dbch\af0\hich\f11 \lquote }{\loch\af1 \hich\af11\dbch\af0\loch\f1 Tools}{\loch\af1 \loch\af1\dbch\af0\hich\f11 \rquote }{\loch\af1 
\hich\af11\dbch\af0\loch\f1  menu, then on }{\loch\af1 \loch\af1\dbch\af0\hich\f11 \lquote }{\loch\af1 \hich\af11\dbch\af0\loch\f1 Compiler Options}{\loch\af1 \loch\af1\dbch\af0\hich\f11 \rquote }{\loch\af1 \hich\af11\dbch\af0\loch\f1 .
\par }{\b\f1 
\par Compiler
\par }{\i\f1 
\par Compiler set to configure
\par }{\f1  Here, you can maintain different compiler profiles. Each profile has it's own settings and options, so that you can easily s
witch between different presets (for example, MingW32 and Cygwin). The default compiler that comes bundled with Dev-C++ is MingW32.
\par  There are three buttons to add, delete and rename the compiler set.
\par  7
\par }{\i\f1 Add the following commands when calling compiler
\par }{\f1  Here you can specify additional command-line options to be passed to the GCC compiler when compiling your project or file. Check the MingW32 manual (available at the website, }{\field{\*\fldinst {HYPERLINK "http://www.mingw.org/" }{{\*\datafield 
00d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b2c00000068007400740070003a002f002f007700770077002e006d0069006e00670077002e006f00720067002f000000}}}{\fldrslt {\cs94\f1\fs24\ul\cf2 www.mingw.org}}}{\f1 
 for a list of command-line arguments.}{
\par }{\f1  
\par }{\i\f1 Add these commands to the linker command-line
\par }{\f1  Here you can specify options to be passed onto the linker (ld.exe). You can specify library files here.
\par  
\par }{\i\f1 Compile delay
\par }{\f1  This option is present to provide a delay before compiling. Normally, you will not use this. If make complains of the timestamp being invalid, try specifying a delay here.
\par  
\par }{\i\f1 Use fast but imperfect dependancy generation
\par }{\f1  By default, Dev-C++ will check all files and headers for dependancy information, and update the makefile accordingly. If you find that it's taking too much time, you can prevent this by enabling this option.
\par 
\par 
\par }{\b\f1 Settings / C compiler
\par }{\i\f1 
\par Support all ANSI standard C programs
\par }{\f1  Option -ansi: Will attempt to be as ANSI conformant as possible.
\par 
\par }{\i\f1 Attempt to support some aspects of traditional C pre-processors
\par }{\i\f1  }{\f1 Option -traditional-cpp : Will attempt to make the pre-processor behave as traditional ones do.}{
\par }{\f1 
\par }{\i\f1 Inhibit all warning messages
\par }{\f1  Option -w: No warnings will be displayed.
\par 
\par }{\b\f1 Settings / C++ compiler
\par 
\par }{\i\f1 Turn off all access checking
\par }{\f1  Option -fno-access-control
\par 
\par }{\i\f1 Accept $ in identifiers
\par }{\f1  Option -fdollar-in-identifiers: Will allow $ to be used in variable and function names. Cannot be used with GCC 3.2.
\par 
\par }{\i\f1 Use heuristics to compiler faster
\par }{\f1  Option -fsave-memoized
\par 
\par }{\b\f1 Settings / Code generation
\par 
\par }{\i\f1 Enable exception handling
\par }{\f1  Option -fexceptions
\par 
\par }{\i\f1 Use same size for double and float
\par }{\f1  Option -fshort-double
\par 
\par }{\i\f1 Put extra commentary information in the generated assembler
\par }{\f1  Option -fverbose-asm: The intermediary assembler files generated will have extra comments. Only useful if they're being saved (using the }{\b\f1 -S}{\f1  command-line option).}{
\par }{\f1 
\par }{\b\f1 Settings / Code profiling
\par }{\f1 
\par }{\i\f1 Generate profiling info for analysis
\par }{\f1  Option -pg: Writes extra information into the generated program files to use with the profiler. The profiler lets you see where maximum amount of the program's execution time is being spent, so that when you're optimizing t
he program, you optimize only the parts that make the difference. This option should be disabled when building retail/final versions. It should be used only in debug builds.
\par 
\par }{\b\f1 Settings / Linker
\par }{\f1 
\par }{\i\f1 Link an Objective C program
\par }{\f1  Option -lobjc
\par 
\par }{\i\f1 Generate debugging information
\par }{\f1  Option -g3: Writes debug information into the generate binaries. This lets you debug it with the integrated debugger.
\par 
\par }{\i\f1 Do not use standard system startup files or libraries
\par }{\f1  Option -nostdlib
\par 
\par }{\i\f1 Do not create a console window
\par }{\f1  Option -mwindows: Instructs GCC to build a Windows GUI application.
\par 
\par }{\b\f1 Settings / Optimization
\par 
\par }{\i\f1 Perform a number of minor optimizations
\par }{\i\f1  }{\f1 Option -fexpensive-optimizations}{
\par }{\f1 
\par }{\b\f1 Settings / Optimization / Further Optimizations
\par }{\f1 
\par Here, you can select the optimization level.
\par 
\par }{\i\f1 Optimize
\par }{\f1  Option -O1
\par 
\par }{\i\f1 Optimize more
\par }{\f1  Option -O2
\par 
\par }{\i\f1 Best optimization
\par }{\f1  Option -O3
\par 
\par }{\b\f1 Directories
\par }{\f1 
\par }{\i\f1 Binaries
\par }{\f1  Specifies the locations of the compiler (executables).
\par 
\par }{\i\f1 Libraries
\par }{\f1  Specifies the locations of the library files (*.a).
\par 
\par }{\i\f1 C includes
\par }{\f1  Specifies the locations of the headers (*.h) for C programs.
\par 
\par }{\i\f1 C++ includes
\par }{\f1  Specifies the locations of the headers (*.h, *.hpp) for C++ programs.
\par 
\par }{\b\f1 Programs
\par }{\f1 
\par Here you can specify the filenames of the different compiler executable components.
\par }{\i\f1 
\par }{\fs20 
\par \page }{\cs88\fs24\up6 #{\footnote \pard\plain \s20\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs88\up6\lang1036\langfe1033\langnp1036 #}{\fs16\lang1036\langfe1033\langnp1036  ID_ENVIR
ONMENT}}${\footnote \pard\plain \s20\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs88\up6\lang1036\langfe1033\langnp1036 $}{\fs16\lang1036\langfe1033\langnp1036  Environment Options}}K
{\footnote \pard\plain \s20\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs88\up6\lang1036\langfe1033\langnp1036 K}{\fs16\lang1036\langfe1033\langnp1036  environment;options;}}}{\fs28\cf18  }
{\b\fs28\cf18 Environment Options}{
\par }{\fs20 
\par }{\loch\af1 \hich\af11\dbch\af0\loch\f1 To access the Environment Options dialog, click on the }{\loch\af1 \loch\af1\dbch\af0\hich\f11 \lquote }{\loch\af1 \hich\af11\dbch\af0\loch\f1 Tools}{\loch\af1 \loch\af1\dbch\af0\hich\f11 \rquote }{\loch\af1 
\hich\af11\dbch\af0\loch\f1  menu, then on }{\loch\af1 \loch\af1\dbch\af0\hich\f11 \lquote }{\loch\af1 \hich\af11\dbch\af0\loch\f1 Environment Options}{\loch\af1 \loch\af1\dbch\af0\hich\f11 \rquote }{\loch\af1 \hich\af11\dbch\af0\loch\f1 .
\par }{\f1\fs20 
\par }{\b\f1 General
\par }{\f1 
\par }{\i\f1 Default to C++ on new project
\par }{\f1  When you create a new project, it is assumed by default to be in C++. Unselecting this will use C.
\par 
\par }{\i\f1 Create Backup files
\par }{\f1   If enabled, whenever you save a source file in Dev-C++, a backup copy will be saved along with it. This backup will be overwritten successively.
\par 
\par }{\i\f1 Minimize on run
\par }{\f1  If enabled, Dev-C++ will minimize itself when you execute your program from within it (using the `Run' command under `Execute'.
\par 
\par }{\i\f1 Show toolbars in Full-screen
\par }{\f1  By default, toolbars are hidden when Dev-C++ is made full-screen. If this option is enabled, they will be shown all the time.
\par 
\par }{\i\f1 Double-click to open project-manager files
\par }{\f1  If this option is enabled, you'll need to double-click on the nodes in project-manager to open them in the editor. Otherwise, you would single-click.
\par 
\par }{\i\f1 Auto-open...
\par }{\f1  Here, you can choose what files are automatically opened in the editor when you open a project.
\par 
\par }{\b\f1 Interface
\par 
\par }{\i\f1 Max files in re-open menu
\par }{\f1  Here, you can specify the number of files Dev-C++ keeps track of in the Reopen menu. Older files are forgotten first.
\par 
\par }{\i\f1 Language
\par }{\f1  Select your language here.
\par 
\par }{\i\f1 Message Window Tabs
\par }{\f1  Here, you can select the location of the tabs on the message windows (}{\i\f1 Compiler, Resources, Compile Log, Debug,}{\f1  etc.)}{
\par }{\f1 
\par }{\i\f1 Theme
\par }{\f1  Select the theme you want Dev-C++ to use.
\par 
\par }{\i\f1 No splash screen on startup
\par }{\f1  If enabled, it prevents Dev-C++ for displaying a logo when it is loading.
\par 
\par }{\i\f1 Use XP theme}{\f1 (WinXP only)}{
\par }{\f1  If enabled, it makes Dev-C++ use Windows XP themes (bitmap title-bars, buttons, etc.).
\par 
\par }{\i\f1 Open/Save dialog style
\par }{\f1  Here you can select the type of file open/save dialog you want to see.
\par 
\par }{\b\f1 Files and directories
\par 
\par }{\i\f1 User's default directory
\par }{\f1  Specifies the default location that Dev uses (when creating projects, opening, saving, etc.)
\par 
\par }{\i\f1 Templates
\par }{\f1  Specifies the location of the Dev-C++ project templates (the ones displayed when you click on `}{\i\f1 New Project}{\f1 ').}{
\par }{\f1 
\par }{\i\f1 Icon library path
\par }{\f1  Specifies the location of the icons for use in your projects.
\par 
\par }{\i\f1 Language Files path
\par }{\f1  Specifies the location of the Dev-C++ language files.
\par 
\par }{\i\f1 Splash screen image
\par }{\f1  You can specify an alternate splash-screen bitmap here.
\par 
\par }{\b\f1 File associations
\par 
\par }{\f1  Here, you can select one or more file types which Dev-C++ will associate itself with, so that the next time you open an associated file in Windows Explorer, Dev-C++ will open up automatically.
\par 
\par }{\b\f1 CVS
\par 
\par }{\i\f1 CVS program file
\par }{\f1  Enter the name of the CVS program executable.
\par 
\par }{\i\f1 Compression level
\par }{\f1  Specify the compression level to be used.
\par 
\par }{\i\f1 Use SSH instead of RSH
\par }{\i\f1  }{\f1 Use the SSH program to connect}{
\par \page }{\cs88\fs24\up6 #{\footnote \pard\plain \s20\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs88\up6 #}{\fs16  ID_EDITORSETTINGS}}${\footnote \pard\plain 
\s20\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs88\up6 $}{\fs16  Editor Settings}}K{\footnote \pard\plain \s20\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 
\f11\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs88\up6 K}{\fs16  editor;settings;}}}{\fs28\cf18  }{\b\fs28\cf18 Editor Settings}{
\par }\pard\plain \s23\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f2\fs20\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {\f11 
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs16\lang1033\langfe1036\cgrid\langnp1033\langfenp1036 {\fs20 to be implemented...
\par \page }{\cs88\fs24\up6 #{\footnote \pard\plain \s20\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs88\up6 #}{\fs16  ID_CLASSBROWSER}}${\footnote \pard\plain 
\s20\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs88\up6 $}{\fs16  Class Browser/Code Completion}}K{\footnote \pard\plain \s20\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 
\f11\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs88\up6 K}{\fs16  class;browser;code;completion;}}}{\fs28\cf18  }{\b\fs28\cf18 Class Browser / Code Completion}{
\par }{\fs20 
\par to be implemented...
\par \page }{\cs88\fs24\up6 #{\footnote \pard\plain \s20\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs88\up6 #}{\fs16  ID_FAQ}}${\footnote \pard\plain 
\s20\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs88\up6 $}{\fs16  FAQ (Frequently Asked Questions)}}K{\footnote \pard\plain \s20\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 
\f11\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs88\up6 K}{\fs16  faq;frequently;asked;questions;}}}{\fs28\cf18  }{\b\fs28\cf18 Frequently Asked Questions (FAQ)}{
\par }{\fs20 
\par }\pard\plain \s2\ql \li0\ri720\sb100\sa100\nowidctlpar\aspalpha\faauto\outlinelevel1\rin720\lin0\itap0 \b\f11\fs36\cf1\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\fs24 Why can't I use }{\i\fs24 conio.h}{\fs24  functions like clrsrc()?
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs16\lang1033\langfe1036\cgrid\langnp1033\langfenp1036 {Because conio.h is not part of the C standard. It is a Borland extension, and works }{\b only}{
 with Borland compilers (and perhaps some other commercial compilers). Dev-C++ uses }{\field{\*\fldinst {HYPERLINK "http://gcc.gnu.org/" }{{\*\datafield 
00d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b2800000068007400740070003a002f002f006700630063002e0067006e0075002e006f00720067002f000000}}}{\fldrslt {\cs94\fs24\ul\cf2 GCC}}}{
, the GNU Compiler Collection, as it's compiler. GCC is originally a UNIX compiler, and aims for portability and standards-compliance.\line \line If you really canot live without them, you can use Borland functions this way:\line 
Include conio.h to your source, and add the following file to your project : C:\\Dev-C++\\include\\conio.c (where C:\\Dev-C++ is where you installed Dev-C++).\line Please note that conio support is not complete.
\par 
\par }\pard\plain \s2\ql \li0\ri720\sb100\sa100\nowidctlpar\aspalpha\faauto\outlinelevel1\rin720\lin0\itap0 \b\f11\fs36\cf1\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\fs24 My window keeps closing, how do I change that ?
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs16\lang1033\langfe1036\cgrid\langnp1033\langfenp1036 {You can do it this way: 
\par }\pard\plain \s31\ql \li0\ri720\sb100\sa100\nowidctlpar\aspalpha\faauto\rin720\lin0\itap0 \f11\fs24\cf1\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\cs93\fs20\cf19\lang1033\langfe1033\loch\af2\langnp1033 \hich\af11\dbch\af0\loch\f2 
#include <stdio.h>}{\fs16\cf19 \line }{\fs16 \line }{\cs93\b\fs20\cf0\lang1033\langfe1033\loch\af2\langnp1033 \hich\af11\dbch\af0\loch\f2 int}{\cs93\fs20\cf0\lang1033\langfe1033\loch\af2\langnp1033 \hich\af11\dbch\af0\loch\f2 main(}{
\cs93\b\fs20\cf0\lang1033\langfe1033\loch\af2\langnp1033 \hich\af11\dbch\af0\loch\f2 int}{\cs93\fs20\cf0\lang1033\langfe1033\loch\af2\langnp1033 \hich\af11\dbch\af0\loch\f2  argc, }{\cs93\b\fs20\cf0\lang1033\langfe1033\loch\af2\langnp1033 
\hich\af11\dbch\af0\loch\f2 char}{\cs93\fs20\cf0\lang1033\langfe1033\loch\af2\langnp1033 \hich\af11\dbch\af0\loch\f2  **argv)}{\fs16 \line }{\cs93\fs20\cf0\lang1033\langfe1033\loch\af2\langnp1033 \{}{\fs16 \line }{
\cs93\fs20\cf0\lang1033\langfe1033\loch\af2\langnp1033 \~\~}{\cs93\fs20\cf0\lang1033\langfe1033\loch\af2\langnp1033 \hich\af11\dbch\af0\loch\f2 printf (}{\cs93\fs20\cf6\lang1033\langfe1033\loch\af2\langnp1033 \hich\af11\dbch\af0\loch\f2 
"Press ENTER to continue.\\n"}{\cs93\fs20\cf0\lang1033\langfe1033\loch\af2\langnp1033 \hich\af11\dbch\af0\loch\f2 );}{\fs16 \line }{\cs93\fs20\cf0\lang1033\langfe1033\loch\af2\langnp1033 \~\~}{\cs93\fs20\cf0\lang1033\langfe1033\loch\af2\langnp1033 
\hich\af11\dbch\af0\loch\f2 getchar (); }{\cs93\i\fs20\cf9\lang1033\langfe1033\loch\af2\langnp1033 \hich\af11\dbch\af0\loch\f2 /* wait for input */}{\fs16 \line }{\cs93\fs20\cf0\lang1033\langfe1033\loch\af2\langnp1033 \~\~}{
\cs93\fs20\cf0\lang1033\langfe1033\loch\af2\langnp1033 \hich\af11\dbch\af0\loch\f2 return 0;}{\fs16 \line }{\cs93\fs20\cf0\lang1033\langfe1033\loch\af2\langnp1033 \}\hich\af11\dbch\af0\loch\f2  }{\fs16 
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs16\lang1033\langfe1036\cgrid\langnp1033\langfenp1036 {Or this way: 
\par }\pard\plain \s31\ql \li0\ri720\sb100\sa100\nowidctlpar\aspalpha\faauto\rin720\lin0\itap0 \f11\fs24\cf1\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\cs93\fs16\cf19\lang1033\langfe1033\loch\af2\langnp1033 \hich\af11\dbch\af0\loch\f2 
#include <stdlib.h>}{\fs16 \line \line }{\cs93\b\fs20\cf0\lang1033\langfe1033\loch\af2\langnp1033 \hich\af11\dbch\af0\loch\f2 int}{\cs93\fs20\cf0\lang1033\langfe1033\loch\af2\langnp1033 \hich\af11\dbch\af0\loch\f2 main(}{
\cs93\b\fs20\cf0\lang1033\langfe1033\loch\af2\langnp1033 \hich\af11\dbch\af0\loch\f2 int}{\cs93\fs20\cf0\lang1033\langfe1033\loch\af2\langnp1033 \hich\af11\dbch\af0\loch\f2  argc, }{\cs93\b\fs20\cf0\lang1033\langfe1033\loch\af2\langnp1033 
\hich\af11\dbch\af0\loch\f2 char}{\cs93\fs20\cf0\lang1033\langfe1033\loch\af2\langnp1033 \hich\af11\dbch\af0\loch\f2  **argv)}{\fs16 \line }{\cs93\fs20\cf0\lang1033\langfe1033\loch\af2\langnp1033 \{}{\fs16 \line }{
\cs93\fs20\cf0\lang1033\langfe1033\loch\af2\langnp1033 \~\~}{\cs93\fs20\cf0\lang1033\langfe1033\loch\af2\langnp1033 \hich\af11\dbch\af0\loch\f2 system (}{\cs93\fs20\cf6\lang1033\langfe1033\loch\af2\langnp1033 \hich\af11\dbch\af0\loch\f2 "pause"}{
\cs93\fs20\cf0\lang1033\langfe1033\loch\af2\langnp1033 \hich\af11\dbch\af0\loch\f2 ); }{\cs93\i\fs20\cf9\lang1033\langfe1033\loch\af2\langnp1033 \hich\af11\dbch\af0\loch\f2 /* execute M$-DOS' pause command */}{\fs16 \line }{
\cs93\b\fs20\cf0\lang1033\langfe1033\loch\af2\langnp1033 \~\~}{\cs93\b\fs20\cf0\lang1033\langfe1033\loch\af2\langnp1033 \hich\af11\dbch\af0\loch\f2 return}{\cs93\fs20\cf0\lang1033\langfe1033\loch\af2\langnp1033 \hich\af11\dbch\af0\loch\f2 0;}{\fs16 \line 
}{\cs93\fs20\cf0\lang1033\langfe1033\loch\af2\langnp1033 \}\hich\af11\dbch\af0\loch\f2  }{
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs16\lang1033\langfe1036\cgrid\langnp1033\langfenp1036 { 
\par }\pard\plain \s2\ql \li0\ri720\sb100\sa100\nowidctlpar\aspalpha\faauto\outlinelevel1\rin720\lin0\itap0 \b\f11\fs36\cf1\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\fs24 After linking, i get an error like C:\\DEV-C++\\LIB\\\\
libmingw32.a(main.o)(.text+0x8e): undefined reference to `WinMain@16'
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs16\lang1033\langfe1036\cgrid\langnp1033\langfenp1036 {
\par You probably haven't declared any main() or WinMain() function in your program. 
\par 
\par }\pard\plain \s2\ql \li0\ri720\sb100\sa100\nowidctlpar\aspalpha\faauto\outlinelevel1\rin720\lin0\itap0 \b\f11\fs36\cf1\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\fs24 How can i provide a .def file for my DLL ?
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs16\lang1033\langfe1036\cgrid\langnp1033\langfenp1036 {
\par Put in Project Options, Parameters sheet, Linker box : --def yourfile.def 
\par 
\par 
\par }\pard\plain \s2\ql \li0\ri720\sb100\sa100\nowidctlpar\aspalpha\faauto\outlinelevel1\rin720\lin0\itap0 \b\f11\fs36\cf1\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\fs24 I am having strange problems under Windows XP
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs16\lang1033\langfe1036\cgrid\langnp1033\langfenp1036 {
\par Try to run Windows Update and make sure that you have the Program Compatibility updates. 
\par 
\par 
\par }\pard\plain \s2\ql \li0\ri720\sb100\sa100\nowidctlpar\aspalpha\faauto\outlinelevel1\rin720\lin0\itap0 \b\f11\fs36\cf1\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\fs24 How do i enable Debugging mode ?
\par }\pard\plain \s32\ql \li0\ri720\nowidctlpar\faauto\rin720\lin0\itap0 \f11\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par }{\fs16 Go to Compiler Options and click on the Compiler sheet. In the Linker section, put \'93Yes\'94 to 'Generate debugging information'. Do a 'Rebuild All' and you should be able to debug now.}{
\par  
\par 
\par }\pard\plain \s2\ql \li0\ri720\sb100\sa100\nowidctlpar\aspalpha\faauto\outlinelevel1\rin720\lin0\itap0 \b\f11\fs36\cf1\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\fs24 
When I launch Dev-C++ i get the message saying 'WININET.DLL' or 'MSCVRT.DLL' or \lquote SHFOLDER.DLL\rquote  not found
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs16\lang1033\langfe1036\cgrid\langnp1033\langfenp1036 {\lang2057\langfe1036\langnp2057 
\par }{You are missing a Windows DLL, which you can download from Microsoft site or }{\uldb here}{\v !ExecFile(\lquote http://www.rocketdownload.com/supfiles.htm\rquote )}{
\par 
\par }\pard\plain \s2\ql \li0\ri720\sb100\sa100\nowidctlpar\aspalpha\faauto\outlinelevel1\rin720\lin0\itap0 \b\f11\fs36\cf1\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\fs24 The size of the executable generated is huged, why ?
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs16\lang1033\langfe1036\cgrid\langnp1033\langfenp1036 {
\par Be sure you didn't check "Generate debugging information" in Compiler Options, Linker sheet 
\par 
\par }\pard\plain \s2\ql \li0\ri720\sb100\sa100\nowidctlpar\aspalpha\faauto\outlinelevel1\rin720\lin0\itap0 \b\f11\fs36\cf1\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\fs24 How to use assembly with Dev-C++ ?
\par }\pard\plain \s32\ql \li0\ri720\nowidctlpar\faauto\rin720\lin0\itap0 \f11\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\fs16 The "GNU as" assembler uses AT&T syntax (not Intel). \line Here's an example of such a syntax :\line \line 
// 2 global variables\line int AdrIO;\line static char ValIO;\line \line void MyFunction(..........)\line \{\line __asm("mov _AdrIO, %dx") ; // loading 16 bits register\line __asm("mov _ValIO, %al") ; // loading 8 bits register\line /* \line 
Don't forget the underscore _ before each global variable names !\line */\line __asm("mov %ax,%dx") ; // AX --> DX\line \} }{
\par 
\par }\pard\plain \s2\ql \li0\ri720\sb100\sa100\nowidctlpar\aspalpha\faauto\outlinelevel1\rin720\lin0\itap0 \b\f11\fs36\cf1\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\fs24 I am using Windows 98 and I cannot compile
\par }\pard\plain \ql \li0\ri720\nowidctlpar\faauto\rin720\lin0\itap0 \f11\fs16\lang1033\langfe1036\cgrid\langnp1033\langfenp1036 {Some users have report that you need to apply several patches to your system. Here is the list of them, they can be found on }{
\uldb Microsoft Windows 98 download site}{\v !ExecFile(\lquote http://www.microsoft.com/windows98/downloads/corporate.asp\rquote )}{\line \line 47569us.exe - labeled as Windows98SE shutdown\line dcom98.exe - see also this }{\uldb page}{\v !ExecFile(
\lquote http://www.microsoft.com/com/dcom/dcom98/dcom1_3.asp\rquote )}{\line DX81eng.exe - latest version of DirectX (this is 11MB, and cannot be uninstalled without reinstalling Windows 98. You might want to try this one last in case t
he other above didn't work, as it should update many parts of the system).
\par }\pard \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {\fs20 
\par 
\par \page }{\cs88\fs24\up6 #{\footnote \pard\plain \s20\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs88\up6 #}{\fs16  ID_MAILINGLIST}}${\footnote \pard\plain 
\s20\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs88\up6 $}{\fs16  Mailing List / Forum}}K{\footnote \pard\plain \s20\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 
\f11\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs88\up6 K}{\fs16  mailing;list;forum;}}}{\fs28\cf18  }{\b\fs28\cf18 Mailing List / Forum}{
\par }\pard\plain \s23\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f2\fs20\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {\f11 
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs16\lang1033\langfe1036\cgrid\langnp1033\langfenp1036 {If you have programming or Dev-C++ specific questions, you can post it on the forum or on the mailing list.
\par 
\par Bloodshed Software / Dev-C++ Forum : }{\uldb http://bloodshed.net/forum}{\v !ExecFile(\lquote http://bloodshed.net/forum\rquote )}{
\par Dev-C++ Mailing List : }{\uldb http://bloodshed.net/devcpp-ml.html}{\v !ExecFile(\lquote http://bloodshed.net/devcpp-ml.html\rquote )}{
\par }\pard\plain \s20\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs16\lang1033\langfe1036\cgrid\langnp1033\langfenp1036 {
\par }{\lang2057\langfe1036\langnp2057 \page }{\lang1036\langfe1036\super\langnp1036 #{\footnote\ftnalt \pard\plain \s30\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs20\lang1036\langfe1033\cgrid\langnp1036\langfenp1033 {#}{\cs89\fs24\up6 \tab }{
\f1\lang1031\langfe1033\langnp1031 Topic8}}}{\cs89\fs24\up6\lang1036\langfe1033\super\langnp1036\langfenp1033 ${\footnote\ftnalt \pard\plain \s30\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs20\lang1036\langfe1033\cgrid\langnp1036\langfenp1033 {$
}{\cs89\fs24\up6 \tab }{\f1\lang1031\langfe1033\langnp1031 FAQ}}}{\fs28\lang1036\langfe1036\langnp1036 Dev-C++ FAQ }{\lang1036\langfe1036\langnp1036 
\par 
\par 
\par Common Questions:
\par 
\par }{1. When I compile my dos program and execute it, Dev-C++ minimizes and then restore in a second but nothing appears?}{\v FAQ01}{
\par 
\par 2. When executing my dos program, it closes automatically. How I can change this ?}{\v FAQ02}{
\par 
\par 3. After linking, i get the error \'93C:\\DEV-C++\\LIB\\\\libmingw32.a(main.o)(.text+0x8e): undefined reference to `WinMain@16'}{\v FAQ03}{
\par 
\par 4. When I launch Dev-C++ i get the message saying \'93WININET.DLL not found\'94?}{\v FAQ04}{
\par 
\par 5. When I compile a file, I get a message saying "could not find <filename> "}{\v FAQ05}{
\par 
\par 6. The EXE files created are huge. What can i do to reduce the size ?}{\v FAQ06}{
\par 
\par 7. How can i use the OpenGL library and others?}{\v FAQ09}{
\par 
\par 8. When i compile a file that contains references to Windows filename (like <\\Mydir\\myfile.h>), i get an 'unrecognized escape sequence' message?}{\v FAQ10}{
\par 
\par 9. Is there any GUI library or packages available for Dev-C++?}{\v FAQ11}{
\par 
\par 10. I am having problems using Borland specific functions such as clrscr().}{\v FAQ12}{
\par 
\par 11. The toolbars icons are showing incorrectly.}{\v FAQ13}{
\par 
\par 12. It seems i've found a problem/bug that is not specified here. What should i do?}{\v FAQ14}{
\par 
\par 13. How to use assembly (ASM) with Dev-C++?}{\v FAQ16}{
\par 
\par 
\par }{\super #{\footnote\ftnalt \pard\plain \s30\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs20\lang1036\langfe1033\cgrid\langnp1036\langfenp1033 {#}{\cs89\fs24\up6 \tab }{\f1\lang1031\langfe1033\langnp1031 FAQ01}}}{
\cs89\fs24\up6\lang1033\langfe1033\super\langfenp1033 ${\footnote\ftnalt \pard\plain \s30\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs20\lang1036\langfe1033\cgrid\langnp1036\langfenp1033 {$}{\cs89\fs24\up6 \tab }{
\f1\lang1031\langfe1033\langnp1031 FAQ01}}}{\lang10331\langfe1036\langnp10331 . When I compile my dos program and execute it, Dev-C++ minimizes and then restore in a second but nothing appears ?}{
\par 
\par When creating a console application, be sure to uncheck \'93Do not create a console\'94 in Project Options (when working with source files only uncheck \'93Create for win32\'94 in
\par Compiler Options).
\par \page }{\super #{\footnote\ftnalt \pard\plain \s30\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs20\lang1036\langfe1033\cgrid\langnp1036\langfenp1033 {#}{\cs89\fs24\up6 \tab }{\f1\lang1031\langfe1033\langnp1031 FAQ02}}}{
\cs89\fs24\up6\lang1033\langfe1033\super\langfenp1033 ${\footnote\ftnalt \pard\plain \s30\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs20\lang1036\langfe1033\cgrid\langnp1036\langfenp1033 {$}{\cs89\fs24\up6 \tab }{
\f1\lang1031\langfe1033\langnp1031 FAQ02}}}{\lang10332\langfe1036\langnp10332 . When executing my dos program, it closes automatically. How I can change this ?}{
\par 
\par You can use an input function at the end of you source, like the following example :
\par 
\par #include <stdlib.h>
\par int main()
\par \{
\par system(\'93PAUSE\'94);
\par return 0;
\par \}
\par \page }{\super #{\footnote\ftnalt \pard\plain \s30\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs20\lang1036\langfe1033\cgrid\langnp1036\langfenp1033 {#}{\cs89\fs24\up6 \tab }{\f1\lang1031\langfe1033\langnp1031 FAQ03}}}{
\cs89\fs24\up6\lang1033\langfe1033\super\langfenp1033 ${\footnote\ftnalt \pard\plain \s30\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs20\lang1036\langfe1033\cgrid\langnp1036\langfenp1033 {$}{\cs89\fs24\up6 \tab }{
\f1\lang1031\langfe1033\langnp1031 FAQ03}}}{\lang10333\langfe1036\langnp10333 . After linking, i get the error \'93C:\\DEV-C++\\LIB\\\\libmingw32.a(main.o)(.text+0x8e): undefined reference to `WinMain@16'}{
\par 
\par You probably haven\rquote t declared any main() function in your program. Otherwise, try recompiling a second time.
\par \page }{\super #{\footnote\ftnalt \pard\plain \s30\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs20\lang1036\langfe1033\cgrid\langnp1036\langfenp1033 {#}{\cs89\fs24\up6 \tab }{\f1\lang1031\langfe1033\langnp1031 FAQ04}}}{
\cs89\fs24\up6\lang1033\langfe1033\super\langfenp1033 ${\footnote\ftnalt \pard\plain \s30\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs20\lang1036\langfe1033\cgrid\langnp1036\langfenp1033 {$}{\cs89\fs24\up6 \tab }{
\f1\lang1031\langfe1033\langnp1031 FAQ04}}}{\lang10334\langfe1036\langnp10334 . When I launch Dev-C++ i get the message saying \'93WININET.DLL not found\'94 ?}{
\par 
\par If you are missing WININET.DLL on your Windows system, you can download it at: http://www.rocketdownload.com/supfiles.htm
\par \page }{\super #{\footnote\ftnalt \pard\plain \s30\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs20\lang1036\langfe1033\cgrid\langnp1036\langfenp1033 {#}{\cs89\fs24\up6 \tab }{\f1\lang1031\langfe1033\langnp1031 FAQ05}}}{
\cs89\fs24\up6\lang1033\langfe1033\super\langfenp1033 ${\footnote\ftnalt \pard\plain \s30\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs20\lang1036\langfe1033\cgrid\langnp1036\langfenp1033 {$}{\cs89\fs24\up6 \tab }{
\f1\lang1031\langfe1033\langnp1031 FAQ05}}}{\lang10335\langfe1036\langnp10335 . When I compile a file, I get a message saying "could not find <filename> "}{
\par 
\par Make sure you included the directory where your include file resides in Project Options.
\par \page }{\super #{\footnote\ftnalt \pard\plain \s30\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs20\lang1036\langfe1033\cgrid\langnp1036\langfenp1033 {#}{\cs89\fs24\up6 \tab }{\f1\lang1031\langfe1033\langnp1031 FAQ06}}}{
\cs89\fs24\up6\lang1033\langfe1033\super\langfenp1033 ${\footnote\ftnalt \pard\plain \s30\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs20\lang1036\langfe1033\cgrid\langnp1036\langfenp1033 {$}{\cs89\fs24\up6 \tab }{
\f1\lang1031\langfe1033\langnp1031 FAQ06}}}{\lang10336\langfe1036\langnp10336 . The EXE files created are huge. What can i do to reduce the size ?}{
\par 
\par If you want to reduce your exe file size from 330 Ko to 12 Ko for example, go to compiler options. Then click on the Linker page and uncheck "Generate debug
\par information". This will remove debugging information (if you want to debug, uncheck it). You can also click on Optimization page and check "Best optimization".
\par 
\par \page }{\super #{\footnote\ftnalt \pard\plain \s30\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs20\lang1036\langfe1033\cgrid\langnp1036\langfenp1033 {#}{\cs89\fs24\up6 \tab }{\f1\lang1031\langfe1033\langnp1031 FAQ07}}}{
\cs89\fs24\up6\lang1033\langfe1033\super\langfenp1033 ${\footnote\ftnalt \pard\plain \s30\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs20\lang1036\langfe1033\cgrid\langnp1036\langfenp1033 {$}{\cs89\fs24\up6 \tab }{
\f1\lang1031\langfe1033\langnp1031 FAQ07}}}{\lang10337\langfe1036\langnp10337 . How can i use the OpenGL library and others ?}{
\par 
\par All the libraries that comes with Mingw reside in the Lib directory. They are all named in the following way: lib*.a
\par To link a library with your project, just add in Project options, Further option files :
\par -lopengl32
\par This is for including the libopengl32.a library. To add any other library, just follow the same syntax: 
\par Type -l (L in lowercase) plus the base name of the library (filename without "lib" and the ".a" extension).
\par 
\par \page }{\super #{\footnote\ftnalt \pard\plain \s30\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs20\lang1036\langfe1033\cgrid\langnp1036\langfenp1033 {#}{\cs89\fs24\up6 \tab }{\f1\lang1031\langfe1033\langnp1031 FAQ08}}}{
\cs89\fs24\up6\lang1033\langfe1033\super\langfenp1033 ${\footnote\ftnalt \pard\plain \s30\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs20\lang1036\langfe1033\cgrid\langnp1036\langfenp1033 {$}{\cs89\fs24\up6 \tab }{
\f1\lang1031\langfe1033\langnp1031 FAQ08}}}{\lang10338\langfe1036\langnp10338 . When i compile a file that contains references to Windows filename (like <\\Mydir\\myfile.h>), i get a 'unrecognized escape sequence' message ?}{
\par 
\par The Mingw compiler understands paths in the Unit style (/mydir/myfile.h). Try replacing the \\ in the filename by / 
\par \page }{\super #{\footnote\ftnalt \pard\plain \s30\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs20\lang1036\langfe1033\cgrid\langnp1036\langfenp1033 {#}{\cs89\fs24\up6 \tab }{\f1\lang1031\langfe1033\langnp1031 FAQ09}}}{
\cs89\fs24\up6\lang1033\langfe1033\super\langfenp1033 ${\footnote\ftnalt \pard\plain \s30\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs20\lang1036\langfe1033\cgrid\langnp1036\langfenp1033 {$}{\cs89\fs24\up6 \tab }{
\f1\lang1031\langfe1033\langnp1031 FAQ09}}}{\lang10339\langfe1036\langnp10339 . Is there any GUI library or packages available for Dev-C++ ? }{
\par 
\par You can download extra packages for Dev-C++ at http://www.bloodshed.net/dev/
\par \page }{\super #{\footnote\ftnalt \pard\plain \s30\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs20\lang1036\langfe1033\cgrid\langnp1036\langfenp1033 {#}{\cs89\fs24\up6 \tab }{\f1\lang1031\langfe1033\langnp1031 FAQ10}}}{
\cs89\fs24\up6\lang1033\langfe1033\super\langfenp1033 ${\footnote\ftnalt \pard\plain \s30\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs20\lang1036\langfe1033\cgrid\langnp1036\langfenp1033 {$}{\cs89\fs24\up6 \tab }{
\f1\lang1031\langfe1033\langnp1031 FAQ10}}}{. I am having problems using Borland specific functions such as clrscr() 
\par 
\par Include conio.h to your source, and add C:\\Dev-C++\\Lib\\conio.o to "Further Object Files" in Project Options (where C:\\Dev-C++ is where you installed Dev-C++)
\par 
\par \page }{\super #{\footnote\ftnalt \pard\plain \s30\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs20\lang1036\langfe1033\cgrid\langnp1036\langfenp1033 {#}{\cs89\fs24\up6 \tab }{\f1\lang1031\langfe1033\langnp1031 FAQ11}}}{
\cs89\fs24\up6\lang1033\langfe1033\super\langfenp1033 ${\footnote\ftnalt \pard\plain \s30\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs20\lang1036\langfe1033\cgrid\langnp1036\langfenp1033 {$}{\cs89\fs24\up6 \tab }{
\f1\lang1031\langfe1033\langnp1031 FAQ11}}}{. The toolbars icons are showing incorrectly.
\par 
\par On some screen resolutions, toolbars icons may show up incorrectly. You should try changing your screen resolution, or disable toolbars from the View menu in Dev-C++
\par \page }{\super #{\footnote\ftnalt \pard\plain \s30\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs20\lang1036\langfe1033\cgrid\langnp1036\langfenp1033 {#}{\cs89\fs24\up6 \tab }{\f1\lang1031\langfe1033\langnp1031 FAQ12}}}{
\cs89\fs24\up6\lang1033\langfe1033\super\langfenp1033 ${\footnote\ftnalt \pard\plain \s30\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs20\lang1036\langfe1033\cgrid\langnp1036\langfenp1033 {$}{\cs89\fs24\up6 \tab }{
\f1\lang1031\langfe1033\langnp1031 FAQ12}}}{. It seems i've found a problem/bug that is not specified here. What should i do ?
\par 
\par First, you should try doing a "Check for Dev-C++ update" (in Help menu) to know if a new version has come that may correct this problem. If there are no new version or
\par the problem wasn't fixed then please send an email describing the bug to : dev@bloodshed.net
\par 
\par \page }{\super #{\footnote\ftnalt \pard\plain \s30\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs20\lang1036\langfe1033\cgrid\langnp1036\langfenp1033 {#}{\cs89\fs24\up6 \tab }{\f1\lang1031\langfe1033\langnp1031 FAQ13}}}{
\cs89\fs24\up6\lang1033\langfe1033\super\langfenp1033 ${\footnote\ftnalt \pard\plain \s30\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs20\lang1036\langfe1033\cgrid\langnp1036\langfenp1033 {$}{\cs89\fs24\up6 \tab }{
\f1\lang1031\langfe1033\langnp1031 FAQ13}}}{. How to use assembly with Dev-C++ ?
\par 
\par The assembler uses AT&T (not Intel). Here's an example of such a syntax :
\par 
\par // 2 global variables
\par 
\par int AdrIO ;
\par static char ValIO ;
\par 
\par void MyFunction(..........) 
\par \{
\par __asm("mov %dx,_AdrIO") ; // loading 16 bits register
\par __asm("mov %al,_ValIO") ; // loading 8 bits register
\par 
\par /*
\par Don't forget the underscore _ before each global variable names !
\par */
\par __asm("mov %dx,%ax") ; // AX --> DX
\par \}
\par 
\par \page }{\super #{\footnote\ftnalt \pard\plain \s30\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs20\lang1036\langfe1033\cgrid\langnp1036\langfenp1033 {\lang1033\langfe1033\langnp1033 #}{\cs89\fs24\up6\lang1033\langfe1033\langnp1033 \tab }{
\f1\lang1031\langfe1033\langnp1031 Topic27}}}{\cs89\fs24\up6\lang1033\langfe1033\super\langfenp1033 ${\footnote\ftnalt \pard\plain \s30\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs20\lang1036\langfe1033\cgrid\langnp1036\langfenp1033 {
\lang1033\langfe1033\langnp1033 $}{\cs89\fs24\up6\lang1033\langfe1033\langnp1033 \tab }{\f1\lang1031\langfe1033\langnp1031 Making and Using Templates}}}{\fs28 Making and using Templates }{
\par 
\par 
\par Dev-C++ can create and manage template files. Those templates contains information for creating automatically specific projects of your own. Dev-C++ contains 5 default projects, but it lets you design your own too with templates.
\par 
\par 
\par Making templates:
\par 
\par To create a new template, click on the File menu and then on \'93New template file\'94.
\par This will bring you the Template Builder, which creates and registers template files in Dev-C++. 
\par 
\par 
\par Template Information: 
\par 
\par Enter the name, description and category of your template. You can also select an icon, which will be used by the executable generated after compiling a template project.
\par 
\par 
\par }{\b Editor information:}{Here you can set the cursor position that will be set when creating a template file. For example, if your templates contains the following default code:
\par int main()
\par \{
\par     
\par \}
\par you should put the following cursor position : 
\par Column = 4 (like for a TAB)
\par Row = 3 (points to the third line, where the text is empty).
\par You need to set cursor position for C and C++ codes.
\par 
\par      
\par Project information:
\par 
\par This is for setting the default options your template will generate for a project. They are the same as in Project Options.
\par 
\par 
\par Code: 
\par 
\par Type in the text fields the default C/C++ codes that will be used when creating a project from your template. Default code can be for example:
\par 
\par #include <stdio.h>
\par 
\par int main()
\par 
\par \{
\par 
\par     
\par 
\par \}
\par 
\par When you are ready to save and add your file to the Template list, click on the Save button, and type a filename in the dialog box that follows.
\par 
\par 
\par Using templates:
\par 
\par Creating a project from your template is the same as for creating usual projects. Click on the File menu in Dev-C++, then on \'93New Project\'85\'94. On the following dialog, click on the \'93Custom Templates\'94
 tab sheet, this will bring you the list of available templates to create a project from. Select a template and press the OK button (or double-click o
n the selected icon), and a new project will be created using the default options and code as you wrote in your template.
\par 
\par 
\par Deleting templates:
\par 
\par In the New Project dialog, select the template you are willing to delete and press the DEL (delete) button on your keyboard.
\par 
\par 
\par 
\par \page }{\super #{\footnote\ftnalt \pard\plain \s30\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs20\lang1036\langfe1033\cgrid\langnp1036\langfenp1033 {\lang1033\langfe1033\langnp1033 #}{\cs89\fs24\up6\lang1033\langfe1033\langnp1033 \tab }{
\f1\lang1031\langfe1033\langnp1031 Topic29}}}{\cs89\fs24\up6\lang1033\langfe1033\super\langfenp1033 ${\footnote\ftnalt \pard\plain \s30\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs20\lang1036\langfe1033\cgrid\langnp1036\langfenp1033 {
\lang1033\langfe1033\langnp1033 $}{\cs89\fs24\up6\lang1033\langfe1033\langnp1033 \tab }{\f1\lang1031\langfe1033\langnp1031 Compiling, Running, and Debugging}}}{\fs28 Compiling and Running }{
\par 
\par 
\par If you want to create the executable of your program and test it, this section will help you on how to do this.
\par 
\par 
\par Compiling:
\par 
\par When your sources are ready to be compiled into an executable, click on the Execute menu, then on Compile. The compilation will start and if it is successful (no errors in your program), then an executable with the name of your project will be created in 
your project\rquote s directory.
\par If you got errors after compile, the errors will be shown in the Compiler sheet.
\par 
\par 
\par Running:
\par 
\par If your project has been successfully compiled, you can execute it by clicking on the Execute menu, then on Run. 
\par 
\par \page }{\super #{\footnote\ftnalt \pard\plain \s30\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs20\lang1036\langfe1033\cgrid\langnp1036\langfenp1033 {\lang1033\langfe1033\langnp1033 #}{\cs89\fs24\up6\lang1033\langfe1033\langnp1033 \tab }{
\f1\lang1031\langfe1033\langnp1031 Topic30}}}{\cs89\fs24\up6\lang1033\langfe1033\super\langfenp1033 ${\footnote\ftnalt \pard\plain \s30\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs20\lang1036\langfe1033\cgrid\langnp1036\langfenp1033 {
\lang1033\langfe1033\langnp1033 $}{\cs89\fs24\up6\lang1033\langfe1033\langnp1033 \tab }{\f1\lang1031\langfe1033\langnp1031 Compiler Options}}}{\f28 Compiler Options }{
\par 
\par 
\par This section is about to explain you all the options available in Dev-C++ when running the compiler. The Compiler options dialog is available by clicking on the Options menu, then on \'93Compiler options\'94.
\par 
\par Most of the parameters description have been taken from the GCC help file.
\par 
\par 
\par }{\lang1036\langfe1036\langnp1036 Directories page:
\par 
\par \{bmc directories.bmp\}iex
\par 
\par }{You can add multiple directories to be searched for include files during compilation by checking the appropriate check box, and by typing your directory in the edit field (separate pathnames with a semicolon \'93;\'94).
\par 
\par Other compiler-specific parameters can be added by checking the check box \'93Add the following commands\'85\'94, and by typing your commands in the edit field (separate commands by spaces). These commands can be found at Mingw32 web site.
\par 
\par You can also change/add the different directories needed by Dev-C++ (separate folders with a semicolon, but only one Bin directory can be specified).
\par 
\par 
\par }{\lang1036\langfe1036\langnp1036 C/C++ compiler page:
\par 
\par }{\{bmc compiler.bmp\}
\par 
\par - Support all ANSI C standard programs }{\i (compiler parameter: -ansi)}{:
\par This turns off certain features of GNU C that are incompatible with ANSI C, such as the asm, inline and typeof keywords, and predefined macros such as unix and vax that identify the type o
f system you are using.  It also enables the undesirable and rarely used ANSI trigraph feature, and it disables recognition of C++ style // comments.
\par 
\par The alternate keywords __asm__, __extension__, __inline__ and __typeof__ continue to work despite -ansi. 
 You would not want to use them in an ANSI C program, of course, but it is useful to put them in header files that might be included in compilations done with -ansi.  Alternate predefined macros such as __unix__ and __vax__ are also available, with or wit
hout -ansi.
\par 
\par The -ansi option does not cause non-ANSI programs to be rejected gratuitously.  For that, -pedantic is required in addition to -ansi.  See Warning Options.
\par 
\par The macro __STRICT_ANSI__ is predefined when the -ansi option is used.  Some header fil
es may notice this macro and refrain from declaring certain functions or defining certain macros that the ANSI standard doesn't call for; this is to avoid interfering with any programs that might use these names for other things.
\par 
\par The functions alloca, abort, exit, and _exit are not builtin functions when -ansi is used.
\par 
\par 
\par - Try to support some aspects of the traditional C preprocessor }{\i (compiler parameter: -traditional)}{:
\par All extern declarations take effect globally even if they are written inside of a function definition.  This includes implicit declarations of functions.
\par 
\par The newer keywords typeof, inline, signed, const and volatile are not recognized.  (You can still use the alternative keywords such as __typeof__, __inline__, and so on.)
\par 
\par Comparisons between pointers and integers are always allowed. Integer types unsigned short and unsigned char promote to unsigned int.
\par 
\par Out-of-range floating point literals are not an error.
\par 
\par Certain constructs which ANSI regards as a single invalid preprocessing number, such as 0xe-0xd, are treated as expressions instead.
\par 
\par String \'93constants\'94 are not necessarily constant; they are stored in writable space, and identical looking constants are allocated separately.  (This is the same as the effect of \endash fwritable-strings.)
\par 
\par Ordinarily, GNU C follows ANSI C: automatic variables not declared volatile may be clobbered.
\par 
\par The character escape sequences \\x and \\a evaluate as the literal characters x and a respectively.  Without \endash traditional, \\x is a prefix for the hexadecimal representation of a character, and \\a produces a bell.
\par 
\par In C++ programs, assignment to this is permitted with \endash traditional.  (The option \endash fthis-is-variable also has this effect.) 
\par 
\par You may wish to use \endash fno-builtin as well as \endash traditional if your program uses names that are normally GNU C builtin functions for other purposes of its own.
\par 
\par You cannot use \endash traditional if you include any header files that rely on ANSI C features.  Some vendors are starting to ship systems with ANSI C header files and you cannot use \endash 
traditional on such systems to compile files that include any system headers.
\par 
\par }{\b - Show all warnings }{(compiler parameter : -w)}{\b :}{
\par This will tell the compiler to show warnings all the warnings.
\par 
\par }{\b - Turn off all access checking }{(compiler parameter : -fno-accesschecking)}{\b :}{
\par Turn off all access checking.  This switch is mainly useful for working around bugs in the access control code.
\par 
\par }{\b - Accept $ in identifiers }{(compiler parameter : -fdollars-in-identifier)}{\b :}{
\par Accept $ in identifiers. 
 You can also explicitly prohibit use of $ with the option -fno-dollars-in-identifiers.  (GNU C allows $ by default on most target systems, but there are a few exceptions.) Traditional C allowed the character $ to form part of identifiers.  However, ANSI 
C and C++ forbid $ in identifiers.
\par 
\par }{\b - Use heuristics to compile faster }{(compiler parameter : -fsave-memorized)}{\b : }{
\par Use heuristics to compile faster.  These heuristics are not enabled by default, since they are only effective for certain input files.  Other input files compile more slowly.
\par 
\par The first time the compiler must build a call to a member function (or reference to a data member), it must (1) determine whether the class implements member functions of that name; (2) resolve which member function to call 
(which involves figuring out what sorts of type conversions need to be made); and (3) check the visibility of the member function to the caller.  All of this adds up to slower compilation.  Normally, the second time a call is made to that member function 
(or reference to that data member), it must go through the same lengthy process again.  This means that code like this:
\par 
\par cout << "This " << p << " has " << n << " legs.\\n";
\par 
\par makes six passes through all three steps.  By using a software cache, a "hit" signi
ficantly reduces this cost.  Unfortunately, using the cache introduces another layer of mechanisms which must be implemented, and so incurs its own overhead.  -fmemoize-lookups enables the software cache.
\par 
\par Because access privileges (visibility) to members and member functions may differ from one function context to the next, G++ may need to flush the cache.  With the -fmemoize-lookups flag, the cache is flushed after every function that is compiled.  The -f
s
ave-memoized flag enables the same software cache, but when the compiler determines that the context of the last function compiled would yield the same access privileges of the next function to compile, it preserves the cache.  This is most helpful when d
efining many member functions for the same class: with the exception of member functions which are friends of other classes, each member function has exactly the same access privileges as every other, and the cache need not be flushed.
\par 
\par The code that implements these flags has rotted; you should probably avoid using them.
\par 
\par 
\par }{\lang1036\langfe1036\langnp1036 Code generation/Optimization page:
\par 
\par \{bmc code.bmp\}
\par \tab 
\par }{\b - Enable exception handling }{(compiler parameter: -fexceptions)}{\b :}{
\par \tab 
\par Enable exception handling, and generate extra code needed to propaga
te exceptions.  If you do not specify this option, GNU CC enables it by default for languages like C++ that normally require exception handling, and disabled for languages like C that do not normally require it.  However, when compiling C code that needs 
to interoperate properly with exception handlers written in C++, you may need to enable this option.  You may also wish to disable this option if you are compiling older C++ programs that don't use exception handling.
\par 
\par - Use the same size as double as for float }{\i (compiler parameter: -fshortdouble)}{
\par 
\par - Put extra information in generated assembly code }{\i (compiler parameter: -fverbose-asm)}{:
\par Put extra commentary information in the generated assembly code to make it more readable.  This option is generally only of use to those who actually need to read the generated assembly code (perhaps while debugging the compiler itself).
\par 
\par -fno-verbose-asm, the default, causes the extra information to be omitted and is useful when comparing two assembler files.
\par 
\par }{\b - Optimize }{(compiler parameter: -O)}{\b :}{
\par Optimize.  Optimizing compilation takes somewhat more time, and a lot more memory for a large function.
\par 
\par Without -O, the compiler's goal is to reduce the cost of compilation and to make debugging produce the expected results.  Statements
 are independent: if you stop the program with a breakpoint between statements, you can then assign a new value to any variable or change the program counter to any other statement in the function and get exactly the results you would expect from the sour
ce code.
\par 
\par Without -O, the compiler only allocates variables declared register in registers.  The resulting compiled code is a little worse than produced by PCC without -O.
\par 
\par With -O, the compiler tries to reduce code size and execution time.
\par 
\par When you specify -O, the compiler turns on -fthread-jumps and -fdefer-pop on all machines.  The compiler turns on -fdelayed-branch on machines that have delay slots, and -fomit-frame-pointer on machines that can support debugging even without a frame poin
ter.  On some machines the compiler also turns on other flags.
\par 
\par }{\b - Best optimization }{(compiler parameter: -O3)}{\b  :}{
\par Optimize even more. GNU CC performs nearly all supported optimizations that do not involve a space-speed tradeoff. As compared to -O, this option increases both compilation time and the performance of the generated code.
\par 
\par -O3 turns on all optional optimizations like for loop unrolling and function inlining.  It also turns on the -fforce-mem option on all machines and frame pointer elimination on ma
chines where doing so does not interfere with debugging and also turns on the inline-functions option.
\par 
\par }{\b - Perform a number of minor optimizations }{(compiler parameter: -fexpensive-optimizations)}{\b : }{
\par Perform a number of minor optimizations that are relatively expensive.
\par 
\par 
\par Linker Page:
\par 
\par \{bmc linker.bmp\}
\par 
\par - Link an objective C program }{\i (compiler parameter: -lobjc)}{:
\par You need this special case of the -l option in order to link an Objective C program.
\par 
\par - Generate debugging information (compiler parameter: -ggdb) :
\par Produce debugging information for use by GDB.  This means to use the most expressive format available (DWARF 2, stabs, or the native format if neither of those are supported), including GDB extensions if at all possible.
\par 
\par - Do not use standard system files or libraries
\par Do not use the standard system startup files or libraries when linking.  No startup files and only the libraries you specify will be passed to the linker.
\par 
\par One of the standard libraries bypassed by -nostdlib and -nodefaultlibs is libgcc.a, a li
brary of internal subroutines that GNU CC uses to overcome shortcomings of particular machines, or special needs for some languages. In most cases, you need libgcc.a even when you want to avoid other standard libraries.  In other words, when you specify -
nostdlib or -nodefaultlibs you should usually specify -lgcc as well.  This ensures that you have no unresolved references to internal GNU CC library subroutines.  (For example, __main, used to ensure C++ constructors will be called; see collect2.)
\par 
\par - Compile for Win32 \endash  no console }{\i (compiler parameter : -mwindows)}{:
\par This is used when working on source files (for projects, use \'93Do not create a console\'94 in Project Options). It will tell the linker to create a windows program with no dos console.
\par 
\par 
\par \page }{\super #{\footnote\ftnalt \pard\plain \s30\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs20\lang1036\langfe1033\cgrid\langnp1036\langfenp1033 {\lang1033\langfe1033\langnp1033 #}{\cs89\fs24\up6\lang1033\langfe1033\langnp1033 \tab }{
\f1\lang1031\langfe1033\langnp1031 Topic31}}}{\cs89\fs24\up6\lang1033\langfe1033\super\langfenp1033 ${\footnote\ftnalt \pard\plain \s30\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs20\lang1036\langfe1033\cgrid\langnp1036\langfenp1033 {
\lang1033\langfe1033\langnp1033 $}{\cs89\fs24\up6\lang1033\langfe1033\langnp1033 \tab }{\f1\lang1031\langfe1033\langnp1031 Introduction}}}{Help v1.02B
\par 
\par \{bmc splash.BMP\}
\par  
\par 
\par Bloodshed Software:
\par 
\par Bloodshed Software is a non-profit organization devoted to serve programmers and internet users by providing them free softwares and free internet services.
\par 
\par 
\par About Dev-C++:
\par 
\par Dev-C++ is a full-featured integrated development environment (IDE), which is able to create Windows (GUI, console, DLLs...) C/C++ programs using the }{\uldb Mingw}{\v !ExecFile(\lquote http://www.mingw.org\rquote )}{
 compiler system or theorically any GCC based compiler.}{\v !ExecFile(\lquote http://sources.redhat.com/cygwin/\rquote )}{
\par 
\par Bloodshed Software: }{\uldb http://www.bloodshed.net/}{\v !ExecFile(\lquote http://www.bloodshed.net\rquote )}{
\par 
\par 
\par About MinGW:
\par 
\par MinGW is a collection of header files and import libraries that allow one to use GCC and produce native Windows32 programs that do not rely on any 3rd-party DLLs. The current set of tools include }{\uldb GNU Compiler Collection (GCC)}{\v 
!ExecFile('http://gcc.gnu.org/')}{, }{\uldb GNU Binary Utilities (Binutils)}{\v !ExecFile('http://sourceware.cygnus.com/binutils/')}{, }{\uldb GNU debugger (Gdb)}{\v !ExecFile('http://sourceware.cygnus.com/gdb/')}{
 , GNU make, and a assorted other utilities. We are currently working on creating a complete set of Mingw-hosted GNU toolchain, and looking for volunteers. 
\par 
\par At the ba
sic level, MinGW is a set of include files and import libraries that allow a console-mode program to use Microsoft's standard C runtime library MSVCRT.DLL (available on all NT systems, and on all stock Win9x after the original Windows 95 release (for whic
h
 it can be installed separately). Using this basic runtime, you can write console-mode ANSI compliant programs using GCC and use some of the extensions offered by MS C runtime, but cannot use the features provided by the Windows32 API. The next critical p
i
ece is the w32api package, which is a set of includes and import libraries to enable the use of Windows32 API, and combined with the basic runtime, you (potentially) have full access to both the C Runtime (CRT) and Windows32 API functionality. Please see 
the licensing information on the various pieces. 
\par 
\par See }{\uldb here}{\v !ExecFile('http://www.mingw.org/x86-win32-ports.shtml')}{ for information on how Mingw differs from Red Hat/Cygnus Cygwin and AT&T UWIN.
\par 
\par If you see any errors on this help file, please contact either }{\uldb Kip}{\v !ExecFile(\lquote mailto:kip@zero47.com?subject=Dev-C++ 5 Help File\rquote )}{, or }{\uldb Colin}{\v !ExecFile(\lquote mailto:webmaster@bloodshed.ne
t?subject=Dev-C++ 5 Help File\rquote )}{.
\par 
\par 
\par Credits:
\par 
\par }\trowd \trftsWidth1\trpaddl28\trpaddr28\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3 \clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth4019 \cellx4019\clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone 
\clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth5387 \cellx9406\pard \ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {\uldb Colin Laplace}{\v !ExecFile('mailto:webmaster@bloodshed.net')}{
 Hongli Lai Mumit Khan Jan Jaap van der Heidjen Colin Hendrix GNU coders }{\uldb Kipling Warner}{\v !ExecFile('mailto:kip@zero47.com')}{ \cell 
Main Development... IDE updates, icons, templates... Mingw compiler Mingw compiler Mingw compiler Mingw compiler Splash screen, Help file, critic... \cell }\pard \ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {\trowd 
\trftsWidth1\trpaddl28\trpaddr28\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3 \clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth4019 \cellx4019\clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb
\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth5387 \cellx9406\row }\pard \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {
\par 
\par Dev-C++ IDE development:
\par Colin Laplace and Mike Berg : Main development
\par Kipling Warner: Help System, Splash Screen...
\par 
\par Mingw compiler system development:
\par Mumit Khan, J.J. Var Der Heidjen, Colin Hendrix and GNU coders...
\par 
\par VCL component authors (used in Dev-C++ IDE):
\par SynEdit : Powerful Editor, with syntax highlighting, exporting... http://synedit.sourceforge.net
\par 
\par 
\par \page }{\super #{\footnote\ftnalt \pard\plain \s30\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs20\lang1036\langfe1033\cgrid\langnp1036\langfenp1033 {\lang1033\langfe1033\langnp1033 #}{\cs89\fs24\up6\lang1033\langfe1033\langnp1033 \tab }{
\f1\lang1031\langfe1033\langnp1031 Topic32}}}{\cs89\fs24\up6\lang1033\langfe1033\super\langfenp1033 ${\footnote\ftnalt \pard\plain \s30\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs20\lang1036\langfe1033\cgrid\langnp1036\langfenp1033 {
\lang1033\langfe1033\langnp1033 $}{\cs89\fs24\up6\lang1033\langfe1033\langnp1033 \tab }{\f1\lang1031\langfe1033\langnp1031 Enviroment Options}}}{\fs28 Environment Options }{
\par 
\par The environment options are described for the following sheets :
\par 
\par 
\par Preferences:
\par 
\par \{bmc preferences.bmp\}
\par 
\par }{\b Default directory:}{You can select a directory that will be automatically use when creating, opening and saving files.
\par 
\par }{\b Create backup file:}{Check this if you want Dev-C++ to create a backup of the sources when saving.
\par 
\par }{\b Auto-save desktop and editor\rquote s position:}{If you want to use the same size of the editor and main window every time.
\par 
\par }{\b Save toolbars availability:}{Dev-C++ will restore the toolbars depending on latest session.
\par 
\par Auto-Arrange windows: Tile windows often.
\par 
\par }{\b Do not show project manager:}{Check this if you don\rquote t want to work with the Project Manager.
\par 
\par }{\b Make compile result window stay on top:}{ After compiling, if this option is checked the compile window result will remain stay on top.
\par 
\par }{\b Minimize during execution:}{Dev-C++ will minimize when executing your program.
\par 
\par }{\b Show exit code after running:}{Tells Dev-C++ to show the exit code of your program after executing it.
\par 
\par }{\b Give the following parameters when executing a compiled project:}{Use this to call your program with parameters, in case it needs some.
\par 
\par 
\par Editor:
\par 
\par \{bmc editor.bmp\}
\par 
\par }{\b Editor font, size and background color:}{You can set these options to work with what you are used to.
\par  
\par }{\b Show lines number:}{This shows line numbers in the left the editor.
\par 
\par }{\b Auto-Indent:}{Use Dev-C++ tab settings (intelligent tabs).
\par 
\par }{\b Tab indent:}{Select Tab size. You can only use this feature if \'93Auto-Ident\'94 is unchecked.
\par 
\par }{\b Show hint when scrolling:}{This will show a hint with the current line number when scrolling.
\par 
\par }{\b Do not show scrollbars:}{Check it if you don\rquote t want scrollbars in the editor.
\par 
\par 
\par }{\lang1036\langfe1036\langnp1036 Syntax colors:
\par 
\par \{bmc syntax.bmp\}
\par 
\par }{You can modify the different syntax color of the C and C++ grammar, by first clicking on the type you would like to change. Then, select a color by clicking, as well as a text attributes (optional).
\par 
\par You will be available to view your change in the editor in this sheet.
\par 
\par 
\par }{\lang1036\langfe1036\langnp1036 Code completion:
\par 
\par \{bmc completion.bmp\}
\par 
\par }{
Code completion is for speeding up your coding time. By pressing Ctrl+Space in the editor, a dialog will open containing a list of your usual coding text. Then you will be able to select a code and after pressing Enter it will be automatically inserted in
 the editor. You can edit them by modifying the text field on the sheet.
\par 
\par 
\par Misc.:
\par 
\par \{bmc misc.bmp\}
\par 
\par }{\b Assign .dev files with Dev-C++:}{This is set by default. It allows you to open Dev-C++ project files by double-clicking in the Windows Explorer.
\par 
\par }{\b Assign .c and .cpp files with Dev-C++:}{This is set by default. It allows you to open .c and .cpp files by double-clicking in the Windows Explorer.
\par 
\par }{\b Buttons:}{By clicking on these buttons you will be able to reset the default options of Dev-C++ and remove files associations.
\par 
\par }{\b Default code when creating new source files:}{Type in the editor the code you would like to have when creating new source files.
\par 
\par \page }{\super #{\footnote\ftnalt \pard\plain \s30\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs20\lang1036\langfe1033\cgrid\langnp1036\langfenp1033 {\lang1033\langfe1033\langnp1033 #}{\cs89\fs24\up6\lang1033\langfe1033\langnp1033 \tab }{
\f1\lang1031\langfe1033\langnp1031 Topic34}}}{\cs89\fs24\up6\lang1033\langfe1033\super\langfenp1033 ${\footnote\ftnalt \pard\plain \s30\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs20\lang1036\langfe1033\cgrid\langnp1036\langfenp1033 {
\lang1033\langfe1033\langnp1033 $}{\cs89\fs24\up6\lang1033\langfe1033\langnp1033 \tab }{\f1\lang1031\langfe1033\langnp1031 Help Files}}}{\fs28 Help Files }{
\par 
\par 
\par A tutorial for making projects as well as the complete Standard Template Library guide are available by clicking on the Help menu in Dev-C++.
\par 
\par These files are a good way to learn more about Dev-C++ and the C++ programming language.
\par Help files for the Mingw compiler are available at Mingw or Mumit Khan\rquote s site: 
\par 
\par }{\uldb http://www.mingw.org/}{\v !ExecFile(\lquote http://www.mingw.org/\rquote )}{
\par 
\par }{\uldb http://www.xraylith.wisc.edu/~khan/software/gnu-win32/}{\v !ExecFile(\lquote http://www.xraylith.wisc.edu/~khan/software/gnu-win32/\rquote )}{
\par 
\par 
\par 
\par 
\par 
\par \page }{\super #{\footnote\ftnalt \pard\plain \s30\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs20\lang1036\langfe1033\cgrid\langnp1036\langfenp1033 {\lang1033\langfe1033\langnp1033 #}{\cs89\fs24\up6\lang1033\langfe1033\langnp1033 \tab }{
\f1\lang1031\langfe1033\langnp1031 Topic35}}}{\cs89\fs24\up6\lang1033\langfe1033\super\langfenp1033 ${\footnote\ftnalt \pard\plain \s30\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs20\lang1036\langfe1033\cgrid\langnp1036\langfenp1033 {
\lang1033\langfe1033\langnp1033 $}{\cs89\fs24\up6\lang1033\langfe1033\langnp1033 \tab }{\f1\lang1031\langfe1033\langnp1031 Mailing List}}}{\fs28 Mailing list }{
\par 
\par 
\par The purpose of this mailing list is to ask and answer questions about Dev-C++ and C++ programming. Please note that you may receive a few messages from the list everyday.
\par You can subscribe to the Dev-C++ mailing list by going to the following address, where you will get all the information needed:
\par 
\par }{\uldb http://www.bloodshed.net/devcpp-ml.html}{\v !ExecFile(\lquote http://www.bloodshed.net/devcpp-ml.html\rquote )}{
\par 
\par 
\par 
\par 
\par \page }{\cs88\fs24\up6 #{\footnote \pard\plain \s20\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs88\up6 #}{\fs16  ID_AUTHORS}}${\footnote \pard\plain 
\s20\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs88\up6 $}{\fs16  Contacting authors}}K{\footnote \pard\plain \s20\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 
\f11\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs88\up6 K}{\fs16  authors;contact;forum;}}}{\super #{\footnote\ftnalt \pard\plain \s30\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 
\f11\fs20\lang1036\langfe1033\cgrid\langnp1036\langfenp1033 {\lang1033\langfe1033\langnp1033 #}{\cs89\fs24\up6\lang1033\langfe1033\langnp1033 \tab }{\f1\lang1031\langfe1033\langnp1031 Topic36}}}{\cs89\fs24\up6\lang1033\langfe1033\super\langfenp1033 $
{\footnote\ftnalt \pard\plain \s30\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs20\lang1036\langfe1033\cgrid\langnp1036\langfenp1033 {\lang1033\langfe1033\langnp1033 $}{\cs89\fs24\up6\lang1033\langfe1033\langnp1033 \tab }{
\f1\lang1031\langfe1033\langnp1031 Contacting the Author}}}{ }{\b\fs28\cf18 Contacting Authors}{
\par  
\par 
\par Suggestions, remarks are always welcome, but please try to look at the FAQ or the Bloodshed forum (}{\uldb http://www.bloodshed.net/forum}{\v !ExecFile('http://www.bloodshed.net/forum')}{
) before asking help on a problem (90 % of problems are described there, and you can also find the last updated FAQ at (}{\uldb http://www.bloodshed.net/dev/faq.html}{\v !ExecFile('http://www.bloodshed.net/dev/faq.html')}{).
\par 
\par Colin Laplace at }{\uldb haiku@bloodshed.net}{\v !ExecFile('mailto:haiku@bloodshed.net')}{
\par 
\par Hongli Lai at }{\uldb h.lai@chello.nl}{\v !ExecFile('mailto:h.lai@chello.nl')}{
\par 
\par Yiannis Mandravellos at }{\uldb mandrav@supergoal.gr}{\v !ExecFile('mailto:mandrav@supergoal.gr')}{
\par 
\par Bloodshed Software homepage : }{\uldb http://www.bloodshed.net}{\v !ExecFile(\'93http://www.bloodshed.net\'94)}{
\par Mingw homepage : }{\uldb http://www.mingw.org/}{\v !ExecFile('http://www.mingw.org/')}{
\par 
\par \page }{\super #{\footnote\ftnalt \pard\plain \s30\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs20\lang1036\langfe1033\cgrid\langnp1036\langfenp1033 {\lang1033\langfe1033\langnp1033 #}{\cs89\fs24\up6\lang1033\langfe1033\langnp1033 \tab }{
\f1\lang1031\langfe1033\langnp1031 Topic37}}}{\cs89\fs24\up6\lang1033\langfe1033\super\langfenp1033 ${\footnote\ftnalt \pard\plain \s30\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs20\lang1036\langfe1033\cgrid\langnp1036\langfenp1033 {
\lang1033\langfe1033\langnp1033 $}{\cs89\fs24\up6\lang1033\langfe1033\langnp1033 \tab }{\f1\lang1031\langfe1033\langnp1031 Step1}}}{\fs28 Step 1 }{
\par 
\par 
\par This tutorial covers step-by-step the creation of a C++ Windows project, as well as managing its options.
\par 
\par To create a new project, click on the File menu, then on "New project".
\par In the project type dialog, select "Windows application" and make sure the C++ button is checked. Click on OK to continue.
\par 
\par }{\uldb Step 2}{Topic38
\par \page }{\super #{\footnote\ftnalt \pard\plain \s30\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs20\lang1036\langfe1033\cgrid\langnp1036\langfenp1033 {\lang1033\langfe1033\langnp1033 #}{\cs89\fs24\up6\lang1033\langfe1033\langnp1033 \tab }{
\f1\lang1031\langfe1033\langnp1031 Topic38}}}{\cs89\fs24\up6\lang1033\langfe1033\super\langfenp1033 ${\footnote\ftnalt \pard\plain \s30\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs20\lang1036\langfe1033\cgrid\langnp1036\langfenp1033 {
\lang1033\langfe1033\langnp1033 $}{\cs89\fs24\up6\lang1033\langfe1033\langnp1033 \tab }{\f1\lang1031\langfe1033\langnp1031 Step2}}}{\f28 Step 2 }{
\par 
\par 
\par Type a name for your project in the next dialog, like "Project 1" and click on OK.
\par You will have then to save your project in a directory. You can save it for example in c:\\My Documents\\
 and then click on Save. All the necessary files will be created in the directory you selected and your project will be opened in Dev-C++, with a new source file inside (the code inside it is the base for a win32 program).
\par 
\par }{\uldb Step 3}{Topic39
\par \page }{\super #{\footnote\ftnalt \pard\plain \s30\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs20\lang1036\langfe1033\cgrid\langnp1036\langfenp1033 {\lang1033\langfe1033\langnp1033 #}{\cs89\fs24\up6\lang1033\langfe1033\langnp1033 \tab }{
\f1\lang1031\langfe1033\langnp1031 Topic39}}}{\cs89\fs24\up6\lang1033\langfe1033\super\langfenp1033 ${\footnote\ftnalt \pard\plain \s30\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs20\lang1036\langfe1033\cgrid\langnp1036\langfenp1033 {
\lang1033\langfe1033\langnp1033 $}{\cs89\fs24\up6\lang1033\langfe1033\langnp1033 \tab }{\f1\lang1031\langfe1033\langnp1031 Step3}}}{\f28 Step 3 }{
\par 
\par 
\par Now we are going to compile the project, and create a Windows executable.
\par Click on the Execute menu, and click on "Compile". A dialog will ask you where do you want to save your file. Select a directory as well as a filename for your file and click on Save. A windows titled "Please wait while compiling..." will appear. Dev-C++ 
is currently compiling the file. If you don't get any compile errors, you can click on the Execute button to launch the executable of your program.
\par 
\par If any error occurs, it will be displayed in the Compiler output panel (at the bottom of Dev-C++). You can then double-click on it to go to the error in your source.
\par 
\par }{\uldb Step 4}{Topic40
\par \page }{\super #{\footnote\ftnalt \pard\plain \s30\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs20\lang1036\langfe1033\cgrid\langnp1036\langfenp1033 {\lang1033\langfe1033\langnp1033 #}{\cs89\fs24\up6\lang1033\langfe1033\langnp1033 \tab }{
\f1\lang1031\langfe1033\langnp1031 Topic40}}}{\cs89\fs24\up6\lang1033\langfe1033\super\langfenp1033 ${\footnote\ftnalt \pard\plain \s30\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs20\lang1036\langfe1033\cgrid\langnp1036\langfenp1033 {
\lang1033\langfe1033\langnp1033 $}{\cs89\fs24\up6\lang1033\langfe1033\langnp1033 \tab }{\f1\lang1031\langfe1033\langnp1031 Step4}}}{\f28 Step 4 }{
\par 
\par 
\par You can now do the following things with your project:
\par 
\par -Create a new file : click on Project menu, then "New unit in project"
\par 
\par -Add a file to your project : click on Project menu, then "Add unit to project"
\par 
\par -Remove a file from your project : right-click on the file you would like to remove in the Project Manager, and click on "Remove from project" (this can also be accessed by the Project menu)
\par 
\par -Rename a file in your project : right-click on the file you would like to rename in the Project Manager, and click "Rename file"
\par 
\par -Set Project Options : follow }{\uldb Step 5}{\v Topic41}{
\par 
\par -Modify the resource file of your program : follow }{\uldb Step 6}{\v Topic42}{
\par \page }{\super #{\footnote\ftnalt \pard\plain \s30\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs20\lang1036\langfe1033\cgrid\langnp1036\langfenp1033 {\lang1033\langfe1033\langnp1033 #}{\cs89\fs24\up6\lang1033\langfe1033\langnp1033 \tab }{
\f1\lang1031\langfe1033\langnp1031 Topic41}}}{\cs89\fs24\up6\lang1033\langfe1033\super\langfenp1033 ${\footnote\ftnalt \pard\plain \s30\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs20\lang1036\langfe1033\cgrid\langnp1036\langfenp1033 {
\lang1033\langfe1033\langnp1033 $}{\cs89\fs24\up6\lang1033\langfe1033\langnp1033 \tab }{\f1\lang1031\langfe1033\langnp1031 Step5}}}{\f28 Step 5 }{
\par 
\par 
\par Managing project options:
\par 
\par To open the Project Options dialog, click on the Project menu, then on "Project options".
\par 
\par 
\par Options are described here:
\par 
\par -Project icon : you can modify the default icon for your application, either by loading an existing   \tab icon from your hard disk (click on "Load Icon...", or either by selecting an icon in the Icon Library  (click on "Icon Library").
\par 
\par -Object files : Add object files to be linked with your project, as well as libraries and compiler options.
\par 
\par -Extra compiler options : You can add here compiler parameters that will be used when compiling. 
\par 
\par -Extra include directories : You can specify here your project's include directories.
\par 
\par -Resource files : Add further resource file to your project
\par 
\par -Do not create a console : Check this if you are willing to make a Windows program
\par 
\par -Compile for C++ : Compile C++ files or not
\par 
\par -Create a DLL : Check this is you want to create a DLL instead of an EXE file.
\par 
\par }{\uldb Step 6}{Topic42
\par \page }{\super #{\footnote\ftnalt \pard\plain \s30\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs20\lang1036\langfe1033\cgrid\langnp1036\langfenp1033 {\lang1033\langfe1033\langnp1033 #}{\cs89\fs24\up6\lang1033\langfe1033\langnp1033 \tab }{
\f1\lang1031\langfe1033\langnp1031 Topic42}}}{\cs89\fs24\up6\lang1033\langfe1033\super\langfenp1033 ${\footnote\ftnalt \pard\plain \s30\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs20\lang1036\langfe1033\cgrid\langnp1036\langfenp1033 {
\lang1033\langfe1033\langnp1033 $}{\cs89\fs24\up6\lang1033\langfe1033\langnp1033 \tab }{\f1\lang1031\langfe1033\langnp1031 Step6}}}{\f28 Step 6 }{
\par 
\par 
\par Modifying the resource file:
\par 
\par To open the Resource Editor, click on the Project menu, then on "Edit resource file".
\par Then, you will be able to modify your resource file. The Resource Editor can also easily add menus, bitmaps, fonts and icons to your resourc
e file, by clicking on the appropriate buttons in the  dialog. When creating menus, you should take a look at the WinMenu example included with Dev-C++ to know how to set the menu in your program.
\par 
\par 
\par 
\par \page }{\f1\fs20\up6 #$}{Using integrated debugger
\par 
\par todo
\par 
\par \page }{\super #{\footnote\ftnalt \pard\plain \s30\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs20\lang1036\langfe1033\cgrid\langnp1036\langfenp1033 {\lang1033\langfe1033\langnp1033 #}{\cs89\fs24\up6\lang1033\langfe1033\langnp1033 \tab }{
\f1\lang1031\langfe1033\langnp1031 Topic56}}}{\cs89\fs24\up6\lang1033\langfe1033\super\langfenp1033 ${\footnote\ftnalt \pard\plain \s30\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs20\lang1036\langfe1033\cgrid\langnp1036\langfenp1033 {
\lang1033\langfe1033\langnp1033 $}{\cs89\fs24\up6\lang1033\langfe1033\langnp1033 \tab }{\f1\lang1031\langfe1033\langnp1031 Running C Programs}}}{\fs28 Introduction to C Programming }{
\par 
\par 
\par So you want to learn C? We hope to provide you with an easy step by step guide to programming in C. The course is split up into several sections, or lessons,
\par which include C example programs for you to demonstrate what has been taught. Although the ordering of the sections does not have to be strictly followed, the
\par sections become progressively more involved and assume background knowledge attained from previous sections. Good Luck! 
\par 
\par 
\par Before you start:
\par 
\par    1.Please read this Introduction. 
\par    2.It is a long course and will take you quite a while to complete. If you use the Hotlist or Bookmark feature of your browser you will be able to return to the place
\par      where you left off at or to return to a particular section. 
\par    3.This tutorial should be viewable on any WWW browser - if you have any problems please let us know!. 
\par 
\par 
\par The Course Section Topics:
\par 
\par    1.Overview of C.}{\v Topic58}{
\par         a.Why use C? 
\par         b.Uses of C 
\par         c.A Brief History of C 
\par         d.C for Personal Computers 
\par 
\par    2.Running C Programs.}{\v Topic59}{
\par         a.Using Microsoft C. 
\par         b.Unix System. 
\par 
\par    3.Structure of C Programs.}{\v Topic60}{
\par         a.C's Character Set 
\par         b.The form of a C Program 
\par         c.The layout of C Programs 
\par         d.Preprocessor Directives 
\par 
\par    4.Your First Program.}{\v Topic61}{
\par         a.Commenting Programs. 
\par 
\par    5.Data Types - Part I.}{\v Topic62}{
\par         a.Integer Number Variables. 
\par         b.Decimal Number Variables. 
\par         c.Character Variables. 
\par         d.Assignment Statement. 
\par         e.Arithmetic Ordering. 
\par         f.Something To Declare. 
\par 
\par    6.Input and Output}{\v Topic63}{
\par         a.printf. 
\par         b.The % Format Specifiers. 
\par         c.Formatting Your Output. 
\par         d.scanf. 
\par 
\par    7.Control Loops}{\v Topic64}{
\par         a.The while and do while Loops. 
\par         b.Conditions, or Logical Expression. 
\par         c.The for Loop. 
\par 
\par    8.Conditional Execution}{\v Topic65}{
\par         a.Program Control - if , if else etc.. 
\par         b.Using break and continue Within Loops. 
\par         c.Select Paths with switch. 
\par 
\par    9.Structure and Nesting}{\v Topic66}{
\par 
\par   10.Functions and Prototypes}{\v Topic67}{
\par         a.Functions - C's Building Blocks. 
\par         b.Functions and Local Variables. 
\par         c.Getting the Value of Variables into Functions. 
\par         d.Functions and Prototypes. 
\par         e.What is ANSI C?. 
\par         f.Standard Library Functions. 
\par 
\par   11.Data Types - Part II}{\v Topic68}{
\par         a.Global Variables. 
\par         b.Constant Data Types. 
\par 
\par   }{\uldb 12.Arrays}{\v Topic69}{
\par 
\par   13.Pointers}{\v Topic70}{
\par         a.Point To Point. 
\par         b.Swap Shop. 
\par         c.Pointers Linked To Arrays. 
\par 
\par   }{\uldb 14.Strings}{\v Topic71}{
\par         a.Stringing Along. 
\par         b.As easy as... B or C?. 
\par         c.A Sort OF Bubble Program. 
\par 
\par   15.Structures}{\v Topic72}{
\par         a.Defining A New Type. 
\par         b.Structures and Functions. 
\par         c.Pointers To Structures. 
\par         d.Malloc. 
\par         e.Structures and Linked Lists. 
\par         f.Structures and C++. 
\par         g.Header Files. 
\par 
\par   16.File Handling}{\v Topic73}{
\par         a.Stream Files. 
\par         b.Text File Functions. 
\par         c.Binary File Functions. 
\par         d.File System Functions. 
\par         e.Command Line Parameters. 
\par 
\par   17.Recommended Books}{\v Topic74}{
\par 
\par   18.Appendix: C's functions}{\v Topic57}{
\par 
\par 
\par You've now reached the end of this online tutorial. We have covered a lot of ground - but this has been a first course in C and there is still plenty to learn. However, as long as you keep in
\par mind that C is an essentially simple language and how new features are built from this simplicity you shouldn't have many problems.
\par 
\par You also need to be aware of the fact that C is a very low-level language and as a result allows programmers to confuse data types and muck around with the bit
\par patterns of the data in a way that higher level languages would disown! You probably need to make sure that you understand binary and the way that values are
\par represented to get the best from C.
\par 
\par 
\par \page }{\super #{\footnote\ftnalt \pard\plain \s30\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs20\lang1036\langfe1033\cgrid\langnp1036\langfenp1033 {\lang1033\langfe1033\langnp1033 #}{\cs89\fs24\up6\lang1033\langfe1033\langnp1033 \tab }{
\f1\lang1031\langfe1033\langnp1031 Topic58}}}{\cs89\fs24\up6\lang1033\langfe1033\super\langfenp1033 ${\footnote\ftnalt \pard\plain \s30\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs20\lang1036\langfe1033\cgrid\langnp1036\langfenp1033 {
\lang1033\langfe1033\langnp1033 $}{\cs89\fs24\up6\lang1033\langfe1033\langnp1033 \tab }{\f1\lang1031\langfe1033\langnp1031 Overview of C}}}{\f28\fs28 Overview of C }{
\par 
\par 
\par Objectives:
\par 
\par This section is designed to give you a general overview of the C programming language. Although much of this section will be expanded in later sections it gives you
\par a taste of what is to come.
\par 
\par 
\par Why use C?:
\par 
\par C has been used successfully for every type of programming problem imaginable from operating systems to spreadsheets to expert systems - and efficient compilers are available for
\par machines ranging in power from the Apple Macintosh to the Cray supercomputers. The largest measure of C's success seems to be based on purely practical considerations:
\par 
\par      the portability of the compiler; 
\par      the standard library concept; 
\par      a powerful and varied repertoire of operators; 
\par      an elegant syntax; 
\par      ready access to the hardware when needed; 
\par      and the ease with which applications can be optimized by hand-coding isolated procedures 
\par 
\par C is often called a "Middle Level" programming language. This is not a reflection on its lack of programming power but more a reflection on its capability to access
\par the system's low level functions. Most high-level languages (e.g. Fortran) provides everything the programmer might want to do already built into the language. A low
\par level language (e.g. assembler) provides nothing other than access to the machines basic instruction set. A middle level language, such as C, probably doesn't supply
\par all the constructs found in high-languages - but it provides you with all the building blocks that you will need to produce the results you want! 
\par 
\par 
\par Uses of C
\par 
\par C was initially used for system development work, in particular the programs that make-up the operating system. Why use C? Mainly because it produces code that runs nearly as fast as
\par code written in assembly language. Some examples of the use of C might be:
\par 
\par      Operating Systems 
\par      Language Compilers 
\par      Assemblers 
\par      Text Editors 
\par      Print Spoolers 
\par      Network Drivers 
\par      Modern Programs 
\par      Data Bases 
\par      Language Interpreters 
\par      Utilities 
\par 
\par In recent years C has been used as a general-purpose language because of its popularity with programmers. It is not the world's easiest language to learn and you
\par will certainly benifit if you are not learning C as your first programming language! C is trendy (I nearly said sexy) - many well established programmers are switching to
\par C for all sorts of reasons, but mainly because of the portability that writing standard C programs can offer. 
\par 
\par 
\par A Brief History of C:
\par 
\par C is a general-purpose language which has been closely associated with the UNIX operating system for which it was developed - since the system and most of the programs that run it are
\par written in C. 
\par 
\par Many of the important ideas of C stem from the language BCPL, developed by Martin Richards. The influence of BCPL on C proceeded indirectly through the
\par language B, which was written by Ken Thompson in 1970 at Bell Labs, for the first UNIX system on a DEC PDP-7. BCPL and B are "typeless" languages whereas C
\par provides a variety of data types. 
\par 
\par In 1972 Dennis Ritchie at Bell Labs writes C and in 1978 the publication of The C Programming Language by Kernighan & Ritchie caused a revolution in the
\par computing world. 
\par 
\par In 1983, the American National Standards Institute (ANSI) established a committee to provide a modern, comprehensive definition of C. The resulting definition, the
\par ANSI standard, or "ANSI C", was completed late 1988. 
\par 
\par A Rough Guide to Programming Languages is available on-line for those of you that are interested. 
\par 
\par 
\par C for Personal Computers:
\par 
\par With regards to personal computers Microsoft C for IBM (or clones) PC's. and Borlands C are seen to be the two most commonly used systems. However, the latest version of Microsoft
\par C is now considered to be the most powerful and efficient C compiler for personal computers.
\par \page }{\super #{\footnote\ftnalt \pard\plain \s30\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs20\lang1036\langfe1033\cgrid\langnp1036\langfenp1033 {\lang1033\langfe1033\langnp1033 #}{\cs89\fs24\up6\lang1033\langfe1033\langnp1033 \tab }{
\f1\lang1031\langfe1033\langnp1031 Topic59}}}{\cs89\fs24\up6\lang1033\langfe1033\super\langfenp1033 ${\footnote\ftnalt \pard\plain \s30\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs20\lang1036\langfe1033\cgrid\langnp1036\langfenp1033 {
\lang1033\langfe1033\langnp1033 $}{\cs89\fs24\up6\lang1033\langfe1033\langnp1033 \tab }{\f1\lang1031\langfe1033\langnp1031 Running C Programs}}}{\fs28 Running C Programs }{
\par 
\par 
\par Objectives:
\par 
\par Having read this section you should be able to:
\par 
\par    1.Edit, link and run your C programs 
\par 
\par 
\par 
\par This section is primarily aimed at the beginner who as no or little experience of using compiled languages. We cover the various stages of program development. The basic principles of this
\par section will apply to what ever C compiler you choose to use, the stages are nearly always the same
\par 
\par 
\par The Edit-Compile-Link-Execute Process:
\par 
\par Developing a program in a compiled language such as C requires at least four steps: 
\par 
\par    1.editing (or writing) the program 
\par    2.compiling it 
\par    3.linking it 
\par    4.executing it 
\par 
\par We will now cover each step separately.
\par 
\par 
\par Editing:
\par 
\par You write a computer program with words and symbols that are understandable to human beings. This is the edit part of the development cycle. You type the program directly into a
\par window on the screen and save the resulting text as a separate file. This is often referred to as the source file (you can read it with the TYPE command in DOS or the cat command in unix).
\par The custom is that the text of a C program is stored in a f ile with the extension .c for C programming language
\par 
\par 
\par Compiling:
\par 
\par You cannot directly execute the source file. To run on any computer system, the source file must be translated into binary numbers understandable to the computer's Central Procesing Unit
\par (for example, the 80*87 microprocessor). This process produces an intermediate object file - with the extension .obj, the .obj stands for Object.
\par 
\par 
\par 
\par Linking:
\par 
\par The first question that comes to most peoples minds is Why is linking necessary? The main reason is that many compiled languages come with library rountines which can be added to your
\par program. Theses routines are written by the manufacturer of the compiler to perform a variety of tasks, from input/output to complicated mathematical functions. In the case of C the standard
\par input and output functions are contained in a library (stdio.h) so even the most basic program will require a lib rary function. After linking the file extension is .exe which are executable
\par files.
\par 
\par 
\par Executable files:
\par 
\par Thus the text editor produces .c source files, which go to the compiler, which produces .obj object files, which go to the linker, which produces .exe executable file. You can then run
\par .exe files as you can other applications, simply by typing their names at the DOS prompt or run using windows menu. 
\par 
\par 
\par Using Microsoft C:
\par 
\par Edit stage: 
\par      Type program in using one of the Microsoft Windows editing packages.
\par 
\par Compile and link: 
\par      Select Building from Make menu. Building option allows you to both compile and link in the same option.
\par 
\par Execute: 
\par      Use the Run menu and select Go option.
\par 
\par Errors: 
\par      First error highlighted. Use Next Error from Search menu for further errors if applicable. 
\par 
\par If you get an error message, or you find that the program doesn't work when you finally run it (at least not in the way you anticipated) you will have to go back to the source file - the .c file -
\par to make changes and go through the whole development process again! 
\par 
\par 
\par Unix systems:
\par 
\par The University's central irix Service is a Silicon Graphics Inc. Challenge XL system which runs a Unix-like operating sysem called IRIX. The basic information to run a C program on this
\par system is covered in document HT.SI.05 - How To... Run C Programs On The irix Service. Although this document refers to the IRIX operating system many of the command options will
\par be common to all Unix systems. 
\par 
\par On all Unix systems further help on the C compiler can be obtained from the on-line manual. Type 
\par 
\par man cc 
\par 
\par on your local Unix system for more information. 
\par 
\par Please note that Unix is a case sensitive operating system and files named firstprog.c and FIRSTPROG.c are treated as two separate files on these system. By default the Unix system
\par compiles and links a program in one step, as follows:
\par 
\par cc firstprog.c 
\par 
\par This command creates an executable file called a.out that overwrites any existing file called a.out. Executable files on Unix are run by typing their name. In this case the program is run as
\par follows:
\par 
\par a.out
\par 
\par To change the name of the executable file type:
\par 
\par cc -o firstprog.c
\par 
\par This produces an executable file called firstprog which is run as follows:
\par 
\par firstprog
\par \page }{\super #{\footnote\ftnalt \pard\plain \s30\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs20\lang1036\langfe1033\cgrid\langnp1036\langfenp1033 {\lang1033\langfe1033\langnp1033 #}{\cs89\fs24\up6\lang1033\langfe1033\langnp1033 \tab }{
\f1\lang1031\langfe1033\langnp1031 Topic60}}}{\cs89\fs24\up6\lang1033\langfe1033\super\langfenp1033 ${\footnote\ftnalt \pard\plain \s30\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs20\lang1036\langfe1033\cgrid\langnp1036\langfenp1033 {
\lang1033\langfe1033\langnp1033 $}{\cs89\fs24\up6\lang1033\langfe1033\langnp1033 \tab }{\f1\lang1031\langfe1033\langnp1031 Structure of C Programs}}}{\fs28 Structure of C Programs }{
\par 
\par 
\par Objectives:
\par 
\par Having completed this section you should know about: 
\par 
\par    1.C's character set 
\par    2.C's keywords 
\par    3.the general structure of a C program 
\par    4.that all C statement must end in a ; 
\par    5.that C is a free format language 
\par    6.all C programs us header files that contain standard library functions. 
\par 
\par 
\par C's Character Set:
\par 
\par C does not use, nor requires the use of, every character found on a modern computer keyboard. The only characters required by the C Programming Language are as follows:
\par 
\par      A - Z 
\par      a -z 
\par      0 - 9 
\par      space . , : ; ' $ " 
\par      # % & ! _ \{\} [] () < > | 
\par      + - / * = 
\par 
\par The use of most of this set of characters will be dicussed throughout the course. 
\par 
\par 
\par The form of a C Program:
\par 
\par All C programs will consist of at least one function, but it is usual (when your experience grows) to write a C program that comprises several functions. The only function that has to be
\par present is the function called main. For more advanced programs the main function will act as a controling function calling other functions in their turn to do the dirty work! The main
\par function is the first function that is called when your program executes. 
\par 
\par C makes use of only 32 keywords which combine with the formal syntax to the form the C programming language. Note that all keywords are written in lower case - C, like UNIX, uses
\par upper and lowercase text to mean different things. If you are not sure what to use then always use lowercase text in writing your C programs. A keyword may not be used for any other
\par purposes. For example, you cannot have a variable called auto. 
\par 
\par 
\par The layout of C Programs:
\par 
\par The general form of a C program is as follows (don't worry about what everything means at the moment - things will be explained later): 
\par 
\par preprocessor directives
\par global declarations
\par main()
\par \{
\par    local variables to function main ;
\par    statements associated with function main ;
\par \}
\par f1()
\par \{
\par    local variables to function 1 ;
\par    statements associated with function 1 ;
\par \}
\par f2()
\par \{
\par    local variables to function f2 ;
\par    statements associated with function 2 ;
\par \}
\par .
\par .
\par .
\par etc
\par 
\par Note the use of the bracket set () and \{\}. () are used in conjunction with function names whereas \{\} are used as to delimit the C statements that are associated with that function. Also note
\par the semicolon - yes it is there, but you might have missed it! a semicolon (;) is used to terminate C statements. C is a free format language and long statements can be continued, without
\par truncation, onto the next line. The semicolon informs the C compiler that the end of the statement has been reached. Free format also means that you can add as many spaces as you like to
\par improve the look of your programs. 
\par 
\par A very common mistake made by everyone, who is new to the C programming language, is to miss off the semicolon. The C compiler will concatinate the various lines of the program
\par together and then tries to understand them - which it will not be able to do. The error message produced by the compiler will relate to a line of you program which could be some distance
\par from the initial mistake. 
\par 
\par 
\par Preprocessor Directives:
\par 
\par C is a small language but provides the programmer with all the tools to be able to write powerful programs. Some people don't like C because it is too primitive! Look again at the set of
\par keywords that comprises the C language and see if you can find a command that allows you to print to the computer's screen the result of, say, a simple calculation. Don't look too hard
\par because it dosen't exist. 
\par 
\par It would be very tedious, for all of us, if everytime we wanted to communicate with the computer we all had to write our own output functions. Fortunately, we do not have to. C uses
\par libraries of standard functions which are included when we build our programs. For the novice C programmer one of the many questions always asked is does a function already exist for
\par what I want to do? Only experience will help here but we do include a function listing as part of this course. 
\par 
\par All programs you will write will need to communicate to the outside world - I don't think I can think of a program that doesn't need to tell someone an answer. So all our C programs will
\par need at least one of C's standard libraries which deals with standard inputting and outputting of data. This library is called stdio.h and it is declared in our programs before the main
\par function. The .h extension indicates that this is a header file. 
\par 
\par I have already mentioned that C is a free format language and that you can layout your programs how you want to using as much white space as you like. The only exception are statements
\par associated with the preprocessor. 
\par 
\par All preprocessor directives begin with a # and the must start in the first column. The commonest directive to all C programs is: 
\par 
\par #include <stdio.h> 
\par 
\par Note the use of the angle brackets (< and >) around the header's name. These indicate that the header file is to be looked for on the system disk which stores the rest of the C program
\par application. Some text books will show the above statement as follows: 
\par 
\par #include "stdio.h" 
\par 
\par The double quotes indicate that the current working directory should be searched for the required header file. This will be true when you write your own header files but the standard header
\par files should always have the angle brackets around them. 
\par 
\par NOTE: just to keep you on your toes - preprocessor statements, such as include, DO NOT use semi-colons as delimiters! But don't forget the # must be in the first column. 
\par 
\par Thats enough background to C programs - lets get on with our first program which will start to bring together some of the ideas outlined above.
\par \page }{\super #{\footnote\ftnalt \pard\plain \s30\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs20\lang1036\langfe1033\cgrid\langnp1036\langfenp1033 {\lang1033\langfe1033\langnp1033 #}{\cs89\fs24\up6\lang1033\langfe1033\langnp1033 \tab }{
\f1\lang1031\langfe1033\langnp1031 Topic61}}}{\cs89\fs24\up6\lang1033\langfe1033\super\langfenp1033 ${\footnote\ftnalt \pard\plain \s30\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs20\lang1036\langfe1033\cgrid\langnp1036\langfenp1033 {
\lang1033\langfe1033\langnp1033 $}{\cs89\fs24\up6\lang1033\langfe1033\langnp1033 \tab }{\f1\lang1031\langfe1033\langnp1031 Your First Program}}}{\fs28 Your First Program}{
\par 
\par 
\par Objectives:
\par 
\par Having read this section you should have an understanding of: 
\par 
\par    1.a preprocessor directive that must be present in all your C programs. 
\par    2.a simple C function used to write information to your screen. 
\par    3.how to add comments to your programs 
\par 
\par Now that you've seen the compiler in action it's time for you to write your very own first C program. You can probably guess what it's going to be - the program that everyone writes just to
\par check they understand the very, very, very basics of what is going on in a new language.
\par 
\par Yes - it's the ubiquitous "Hello World" program. All your first program is going to do is print the message "Hello World" on the screen. 
\par 
\par The program is a short one, to say the least. Here it is:
\par 
\par 
\par #include <stdio.h>
\par int main()
\par \{
\par     printf("Hello World\\n");
\par     return 0;
\par \}
\par 
\par 
\par The first line is the standard start for all C programs - main(). After this comes the program's only instruction enclosed in curly brackets \{\}. The curly brackets mark the start and end of the
\par list of instructions that make up the program - in this case just one instruction.
\par 
\par Notice the semicolon marking the end of the instruction. You might as well get into the habit of ending every C instruction with a semicolon - it will save you a lot of trouble! Also notice that
\par the semicolon marks the end of an instruction - it isn't a separator as is the custom in other languages.
\par 
\par If you're puzzled about why the curly brackets are on separate lines I'd better tell you that it's just a layout convention to help you spot matching brackets. C is very unfussy about the way
\par you lay it out. For example, you could enter the Hello World program as:
\par 
\par main()\{printf("Hello World\\n");\}
\par 
\par but this is unusual. 
\par 
\par The printf function does what its name suggest it does: it prints, on the screen, whatever you tell it to. The "\\n" is a special symbols that forces a new line on the screen.
\par 
\par OK, that's enough explanation of our first program! Type it in and save it as Hello.c.Then use the compiler to compile it, then the linker to link it and finally run it. The output is as follows:
\par 
\par Hello World 
\par 
\par 
\par Add Comments to a Program:
\par 
\par A comment is a note to yourself (or others) that you put into your souce code. All comments are ignored by the compiler. They exist solely for your benefit. Comments are used primarily to
\par document the meaning and purpose of your source code, so that you can remember later how it functions and how to use it. You can also use a comment to temporarily remove a line of
\par code. Simply surround the line(s) with the comment symbols.
\par 
\par In C, the start of a comment is signaled by the /* character pair. A comment is ended by */. For example, this is a syntactically correct C comment:
\par 
\par /* This is a comment. */
\par 
\par Comments can extend over several lines and can go anywhere except in the middle of any C keyword, function name or variable name. In C you can't have one comment within another
\par comment. That is comments may not be nested. Lets now look at our first program one last time but this time with comments:
\par 
\par 
\par main() /* main function heading */
\par \{
\par     printf("\\n Hello, World! \\n");  /* Display message on */
\par \}                                   /* the screen */ 
\par 
\par This program is not large enough to warrant comment statements but the principle is still the same.
\par 
\par \page }{\super #{\footnote\ftnalt \pard\plain \s30\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs20\lang1036\langfe1033\cgrid\langnp1036\langfenp1033 {\lang1033\langfe1033\langnp1033 #}{\cs89\fs24\up6\lang1033\langfe1033\langnp1033 \tab }{
\f1\lang1031\langfe1033\langnp1031 Topic62}}}{\cs89\fs24\up6\lang1033\langfe1033\super\langfenp1033 ${\footnote\ftnalt \pard\plain \s30\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs20\lang1036\langfe1033\cgrid\langnp1036\langfenp1033 {
\lang1033\langfe1033\langnp1033 $}{\cs89\fs24\up6\lang1033\langfe1033\langnp1033 \tab }{\f1\lang1031\langfe1033\langnp1031 Data Types - Part I}}}{\fs28 Data Types }{
\par 
\par 
\par Objectives:
\par 
\par Having read this section you should be able to: 
\par 
\par    1.declare (name) a local variable as being one of C's five data types 
\par    2.initialise local variables 
\par    3.perform simple arithemtic using local variables 
\par 
\par Now we have to start looking into the details of the C language. How easy you find the rest of this section will depend on whether you have ever programmed before - no matter what the
\par language was. There are a great many ideas common to programming in any language and C is no exception to this rule. 
\par 
\par So if you haven't programmed before, you need to take the rest of this section slowly and keep going over it until it makes sense. If, on the other hand, you have programmed before you'll be
\par wondering what all the fuss is about It's a lot like being able to ride a bike! 
\par 
\par The first thing you need to know is that you can create variables to store values in. A variable is just a named area of storage that can hold a single value (numeric or character). C is very
\par fussy about how you create variables and what you store in them. It demands that you declare the name of each variable that you are going to use and its type, or class, before you actually
\par try to do anything with it. 
\par 
\par In this section we are only going to be discussing local variables. These are variables that are used within the current program unit (or function) in a later section we will looking at global
\par variables - variables that are available to all the program's functions. 
\par 
\par 
\par There are five basic data types associated with variables:
\par 
\par      int - integer: a whole number. 
\par      float - floating point value: ie a number with a fractional part. 
\par      double - a double-precision floating point value. 
\par      char - a single character. 
\par      void - valueless special purpose type which we will examine closely in later sections. 
\par 
\par One of the confusing things about the C language is that the range of values and the amount of storage that each of these types takes is not defined. This is because in each case the 'natural'
\par choice is made for each type of machine.You can call variables what you like, although it helps if you give them sensible names that give you a hint of what they're being used for - names
\par like sum, total, average and so on. If you are translating a formular then use variable names that reflect the elements used in the formula. For example, 2&188;r (that should read as "2 pi
\par r" but that depends upon how your browser has been set-up) would give local variables names of pi and r. Remember, C programmers tend to prefer short names! 
\par 
\par Note: all C's variables must begin with a letter or a "_" (underscore) character. 
\par 
\par 
\par Integer Number Variables:
\par 
\par The first type of variable we need to know about is of class type int - short for integer. An int variable can store a value in the range -32768 to +32767. You can think of it as a largish
\par positive or negative whole number: no fractional part is allowed. To declare an int you use the instruction:
\par 
\par int variable name;
\par 
\par For example:
\par 
\par int a;
\par 
\par declares that you want to create an int variable called a. 
\par 
\par To assign a value to our integer variable we would use the following C statement: 
\par 
\par a=10; 
\par 
\par The C programming language uses the "=" character for assignment. A statement of the form a=10; should be interpreted as take the numerical value 10 and store it in a memory
\par location associated with the integer variable a. The "=" character should not be seen as an equality otherwise writing statements of the form: 
\par 
\par a=a+10; 
\par 
\par will get mathematicians blowing fuses! This statement should be interpreted as take the current value stored in a memory location associated with the integer variable a; add the
\par numerical value 10 to it and then replace this value in the memory location associated with a. 
\par 
\par 
\par Decimal Number Variables:
\par 
\par As described above, an integer variable has no fractional part. Integer variables tend to be used for counting, whereas real numbers are used in arithmetic. C uses one of two keywords to
\par declare a variable that is to be associated with a decimal number: float and double. They are each offer a different level of precision as outlined below. 
\par 
\par float 
\par      A float, or floating point, number has about seven digits of precision and a range of about 1.E-36 to 1.E+36. A float takes four bytes to store.
\par 
\par double 
\par      A double, or double precision, number has about 13 digits of precision and a range of about 1.E-303 to 1.E+303. A double takes eight bytes to store. 
\par 
\par For example: 
\par 
\par float total; 
\par 
\par double sum; 
\par 
\par To assign a numerical value to our floating point and double precision variables we would use the following C statement: 
\par 
\par total=0.0; 
\par 
\par sum=12.50; 
\par 
\par 
\par Character Variables:
\par 
\par C only has a concept of numbers and characters. It very often comes as a surprise to some programmers who learnt a beginner's language such as BASIC that C has no understanding of
\par strings but a string is only an array of characters and C does have a concept of arrays which we shall be meeting later in this course. 
\par 
\par To declare a variable of type character we use the keyword char. - A single character stored in one byte. 
\par 
\par For example: 
\par 
\par char c; 
\par 
\par To assign, or store, a character value in a char data type is easy - a character variable is just a symbol enclosed by single quotes. For example, if c is a char variable you can store the letter
\par A in it using the following C statement: 
\par 
\par c='A' 
\par 
\par Notice that you can only store a single character in a char variable. Later we will be discussing using character strings, which has a very real potential for confusion because a string constant
\par is written between double quotes. But for the moment remember that a char variable is 'A' and not "A". 
\par 
\par 
\par Assignment Statement:
\par 
\par Once you've declared a variable you can use it, but not until it has been declared - attempts to use a variable that has not been defined will cause a compiler error. Using a variable means
\par storing something in it. You can store a value in a variable using:
\par 
\par name = value;
\par 
\par For example:
\par 
\par a=10;
\par 
\par stores the value 10 in the int variable a. What could be simpler? Not much, but it isn't actually very useful! Who wants to store a known value like 10 in a variable so you can use it later? It
\par is 10, always was 10 and always will be 10. What makes variables useful is that you can use them to store the result of some arithmetic. 
\par 
\par Consider four very simple mathematical operations: add, subtract, multiply and divide. Let us see how C would use these operations on two float variables a and b. 
\par 
\par add 
\par      a+b 
\par subtract 
\par      a-b 
\par multiply 
\par      a*b 
\par divide 
\par      a/b 
\par 
\par Note that we have used the following characters from C's character set: 
\par 
\par 
\par +     for add
\par -     for subtract
\par *     for multiply
\par /     for divide
\par 
\par BE CAREFUL WITH ARITHMETIC!!! What is the answer to this simple calculation? 
\par 
\par a=10/3 
\par 
\par The answer depends upon how a was declared. If it was declared as type int the answer will be 3; if a is of type float then the answer will be 3.333. It is left as an exercise to the reader
\par to find out the answer for a of type char. 
\par 
\par Two points to note from the above calculation: 
\par 
\par    1.C ignores fractions when doing integer division! 
\par    2.when doing float calculations integers will be converted into float. We will see later how C handles type conversions. 
\par 
\par 
\par Arithmetic Ordering:
\par 
\par Whilst we are dealing with arithmetic we want to remind you about something that everyone learns at junior school but then we forget it. Consider the following calculation: 
\par 
\par a=10.0 + 2.0 * 5.0 - 6.0 / 2.0 
\par 
\par What is the answer? If you think its 27 go to the bottom of the class! Perhaps you got that answer by following each instruction as if it was being typed into a calculator. A computer doesn't
\par work like that and it has its own set of rules when performing an arithmetic calculation. All mathematical operations form a hierachy which is shown here. In the above calculation the
\par multiplication and division parts will be evaluated first and then the addition and subtraction parts. This gives an answer of 17. 
\par 
\par Note: To avoid confusion use brackets. The following are two different calculations: 
\par 
\par a=10.0 + (2.0 * 5.0) - (6.0 / 2.0) 
\par a=(10.0 + 2.0) * (5.0 - 6.0) / 2.0 
\par 
\par You can freely mix int, float and double variables in expressions. In nearly all cases the lower precision values are converted to the highest precision values used in the expression. For
\par example, the expression f*i, where f is a float and i is an int, is evaluated by converting the int to a float and then multiplying. The final result is, of course, a float but this may be
\par assigned to another data type and the conversion will be made automatically. If you assign to a lower precision type then the value is truncated and not rounded. In other words, in nearly all
\par cases you can ignore the problems of converting between types. 
\par 
\par This is very reasonable but more surprising is the fact that the data type char can also be freely mixed with ints, floats and doubles. This will shock any programmer who has used
\par another language, as it's another example of C getting us closer than is customary to the way the machine works. A character is represented as an ASCII or some other code in the range O
\par to 255, and if you want you can use this integer code value in arithmetic. Another way of thinking about this is that a char variable is just a single-byte integer variable that can hold a number
\par in the range O to 255, which can optionally be interpreted as a character. Notice, however, that C gives you access to memory in the smallest chunks your machine works with, i.e. one byte
\par at a time, with no overheads. 
\par 
\par 
\par Something To Declare:
\par 
\par Before you can use a variable you have to declare it. As we have seen above, to do this you state its type and then give its name. For example, int i; declares an integer variable. You
\par can declare any number of variables of the same type with a single statement. For example:
\par 
\par int a, b, c;
\par 
\par declares three integers: a, b and c. You have to declare all the variables that you want to use at the start of the program. Later you will discover that exactly where you declare a variable
\par makes a difference, but for now you should put variable declarations after the opening curly bracket of the main program.
\par 
\par Here is an example program that includes some of the concepts outlined above. It includes a slightly more advanced use of the printf function which will covered in detail in the next part of
\par this course: 
\par 
\par /*
\par /*
\par     Program#int.c
\par 
\par     Another simple program
\par     using int and printf
\par */
\par 
\par #include 
\par 
\par main()
\par \{
\par     int a,b,average;
\par     a=10;
\par     b=6;
\par     average = ( a+b ) / 2 ;
\par     printf("Here ");
\par     printf("is ");
\par     printf("the ");
\par     printf("answer... ");
\par     printf("\\n");
\par     printf("%d.",average);
\par \}
\par 
\par 
\par More On Initialising Variables:
\par 
\par You can assign an initial value to a variable when you declare it. For example:
\par 
\par int i=1;
\par 
\par sets the int variable to one as soon as it's created. This is just the same as:
\par 
\par 
\par int i;
\par i=l;
\par 
\par 
\par but the compiler may be able to speed up the operation if you initialise the variable as part of its declaration. Don't assume that an uninitialised variable has a sensible value stored in it. Some
\par C compilers store 0 in newly created numeric variables but nothing in the C language compels them to do so. 
\par 
\par 
\par Summary:
\par 
\par Variable names:
\par 
\par      -should be lowercase for local variables 
\par      -should be UPPERCASE for symbolic constants (to be dicsussed later) 
\par      -only the first 31 characters of a variables name are significant 
\par      -must begin with a letter or _ (under score) character
\par 
\par 
\par \page }{\super #{\footnote\ftnalt \pard\plain \s30\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs20\lang1036\langfe1033\cgrid\langnp1036\langfenp1033 {\lang1033\langfe1033\langnp1033 #}{\cs89\fs24\up6\lang1033\langfe1033\langnp1033 \tab }{
\f1\lang1031\langfe1033\langnp1031 Topic63}}}{\cs89\fs24\up6\lang1033\langfe1033\super\langfenp1033 ${\footnote\ftnalt \pard\plain \s30\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs20\lang1036\langfe1033\cgrid\langnp1036\langfenp1033 {
\lang1033\langfe1033\langnp1033 $}{\cs89\fs24\up6\lang1033\langfe1033\langnp1033 \tab }{\f1\lang1031\langfe1033\langnp1031 Input and Output}}}{\fs28 Input and Output Functions }{
\par 
\par 
\par Objectives:
\par 
\par Having read this section you should have a clearer idea of one of C's: 
\par 
\par    1.input functions, called scanf 
\par    2.output functions, called printf 
\par 
\par 
\par On The Run:
\par 
\par Even with arithmetic you can't do very much other than write programs that are the equivalent of a pocket calculator. The real break through comes when you can read values into variables
\par as the program runs. Notice the important words here: "as the program runs". You can already store values in variables using assignment. That is:
\par 
\par a=100; 
\par 
\par stores 100 in the variable a each time you run the program, no matter what you do. Without some sort of input command every program would produce exactly the same result every time it
\par was run. This would certainly make debugging easy! But in practice, of course, we need programs to do different jobs each time they are run. There are a number of different C input
\par commands, the most useful of which is the scanf command. To read a single integer value into the variable called a you would use: 
\par 
\par scanf("%d",&a); 
\par 
\par For the moment don't worry about what the %d or the >&a means - concentrate on the difference between this and: 
\par 
\par a=100; 
\par 
\par When the program reaches the scanf statement it pauses to give the user time to type something on the keyboard and continues only when users press <Enter>, or <Return>, to signal
\par that he, or she, has finished entering the value. Then the program continues with the new value stored in a. In this way, each time the program is run the user gets a chance to type in a
\par different value to the variable and the program also gets the chance to produce a different result! 
\par 
\par The final missing piece in the jigsaw is using the printf function, the one we have already used to print "Hello World", to print the value currently being stored in a variable. To display the
\par value stored in the variable a you would use: 
\par 
\par printf("The value stored in a is %d",a); 
\par 
\par The %d, both in the case of scanf and printf, simply lets the compiler know that the value being read in, or printed out, is a decimal integer - that is, a few digits but no decimal point. 
\par 
\par Note: the scanf function does not prompt for an input. You should get in the habit of always using a printf function, informing the user of the program what they should type, before a
\par scanf function. 
\par 
\par 
\par Input and Output Functions in More Detail:
\par 
\par One of the advantages of C is that essentially it is a small language. This means that you can write a complete description of the language in a few pages. It doesn't have many keywords or
\par data types for that matter. What makes C so powerful is the way that these low-level facilities can be put together to make higher level facilities. 
\par 
\par The only problem with this is that C programmers have a tendency to reinvent the wheel each time they want to go for a ride. It is also possible to write C programs in a variety of styles
\par which depend on the particular tricks and devices that a programmer chooses to use. Even after writing C for a long time you will still find the occasionally construction which makes you
\par think, "I never thought of that!" or, "what is that doing?" 
\par 
\par One attempt to make C a more uniform language is the provision of standard libraries of functions that perform common tasks. We say standard but until the ANSI committee actually
\par produced a standard there was, and still is, some variation in what the standard libraries contained and exactly how the functions worked. Having said that we had better rush in quickly with
\par the reassurance that in practice the situation isn't that bad and most of the functions that are used frequently really are standard on all implementations. In particular the I/O functions vary very
\par little. 
\par 
\par It is now time to look at exactly how scanf and printf work and what they can do - you might be surprised at just how complex they really are! 
\par 
\par The original C specification did not include commands for input and output. Instead the compiler writers were supposed to implement library functions to suit their machines. In practice all
\par chose to implement printf and scanf and after a while C programmers started to think of them as if these functions were I/O keywords! It sometimes helps to remember that they are
\par functions on a par with any other functions you may care to define. If you want to you can provide your own implementations of printf or scanf or any of the other standard functions -
\par we'll discover how later. 
\par 
\par 
\par printf:
\par 
\par The printf (and scanf) functions do differ from the sort of functions that you will created for yourself in that they can take a variable number of parameters. In the case of printf the first
\par parameter is always a string (c.f. "Hello World") but after that you can include as many parameters of any type that you want to. That is, the printf function is usually of the form: 
\par 
\par printf(string,variable,variable,variable...) 
\par 
\par where the ... means you can carry on writing a list of variables separated by commas as long as you want to. The string is all-important because it specifies the type of each variable in the
\par list and how you want it printed. The string is usually called the control string or the format string. The way that this works is that printf scans the string from left to right and prints on the
\par screen, or any suitable output device, any characters it encounters - except when it reaches a % character. The % character is a signal that what follows it is a specification for how the next
\par variable in the list of variables should be printed. printf uses this information to convert and format the value that was passed to the function by the variable and then moves on to process
\par the rest of the control string and anymore variables it might specify. For example: 
\par 
\par printf("Hello World"); 
\par 
\par only has a control string and, as this contains no % characters it results in Hello World being displayed and doesn't need to display any variable values. The specifier %d means convert the
\par next value to a signed decimal integer and so: 
\par 
\par printf("Total = %d",total); 
\par 
\par will print Total = and then the value passed by >total as a decimal integer. 
\par 
\par If you are familiar other programming languages then you may feel happy about the printf function because something like:
\par 
\par printf("Total = %d",total);
\par 
\par looks like the sort of output command you might have used before. For example, in BASIC you would write: 
\par 
\par PRINT "Total = ",total 
\par 
\par but the C view of output is at a lower level than you might expect. The %d isn't just a format specifier, it is a conversion specifier. It indicates the data type of the variable to be printed and
\par how that data type should be converted to the characters that appear on the screen. That is %d says that the next value to be printed is a signed integer value (i.e. a value that would be stored
\par in a standard int variable) and this should be converted into a sequence of characters (i.e. digits) representing the value in decimal. If by some accident the variable that you are trying to
\par display happens to be a float or a double then you will still see a value displayed - but it will not correspond to the actual value of the float or double. 
\par 
\par The reason for this is twofold. 
\par 
\par    1.The first difference is that an int uses two bytes to store its value, while a float uses four and a double uses eight. If you try to display a float or a double using %d then only the
\par      first two bytes of the value are actually used. 
\par    2.The second problem is that even if there wasn't a size difference ints, floats and doubles use a different binary representation and %d expects the bit pattern to be a simple signed
\par      binary integer. 
\par 
\par This is all a bit technical, but that's in the nature of C. You can ignore these details as long as you remember two important facts:
\par 
\par    1.The specifier following % indicates the type of variable to be displayed as well as the format in which that the value should be displayed; 
\par    2.If you use a specifier with the wrong type of variable then you will see some strange things on the screen and the error often propagates to other items in the printf list. 
\par 
\par If this seems complicated then I would agree but I should also point out that the benefit is being able to treat what is stored in a variable in a more flexible way than other languages allow.
\par Other languages never let on to the programmer that what is in fact stored in a variable is a bit pattern, not the decimal value that appears to be stored there when you use a printf (or
\par whatever) statement. Of course whether you view this as an advantage depends on what you are trying to do. It certainly brings you closer to the way the machine works. 
\par 
\par You can also add an 'l' in front of a specifier to mean a long form of the variable type and h to indicate a short form (long and short will be covered later in this course). For example, %ld
\par means a long integer variable (usually four bytes) and %hd means short int. Notice that there is no distinction between a four-byte float and an eight-byte double. The reason is that a
\par float is automatically converted to a double precision value when passed to printf - so the two can be treated in the same way. (In pre-ANSI all floats were converted to double
\par when passed to a function but this is no longer true.) The only real problem that this poses is how to print the value of a pointer? The answer is that you can use %x to see the address in hex
\par or %o to see the address in octal. Notice that the value printed is the segment offset and not the absolute address - to understand what we am going on about you need to know something
\par about the structure of your processor. 
\par 
\par 
\par The % Format Specifiers:
\par 
\par The % specifiers that you can use in ANSI C are: 
\par 
\par       Usual variable type           Display
\par 
\par %c        char                     single character
\par %d (%i)   int                      signed integer
\par %e (%E)   float or double          exponential format
\par %f        float or double          signed decimal
\par %g (%G)   float or double          use %f or %e as required
\par %o        int                      unsigned octal value
\par %p        pointer                  address stored in pointer
\par %s        array of char            sequence of characters
\par %u        int                      unsigned decimal
\par %x (%X)   int                      unsigned hex value
\par 
\par 
\par Formatting Your Output:
\par 
\par The type conversion specifier only does what you ask of it - it convert a given bit pattern into a sequence of characters that a human can read. If you want to format the characters then you
\par need to know a little more about the printf function's control string. 
\par 
\par Each specifier can be preceded by a modifier which determines how the value will be printed. The most general modifier is of the form: 
\par 
\par flag width.precision 
\par 
\par The flag can be any of:
\par 
\par flag          meaning
\par  
\par    -         left justify
\par    +         always display sign
\par    space     display space if there is no sign
\par    0         pad with leading zeros
\par    #         use alternate form of specifier
\par 
\par 
\par The width specifies the number of characters used in total to display the value and precision indicates the number of characters used after the decimal point. 
\par 
\par For example, %10.3f will display the float using ten characters with three digits after the decimal point. Notice that the ten characters includes the decimal point, and a - sign if there is one.
\par If the value needs more space than the width specifies then the additional space is used - width specifies the smallest space that will be used to display the value. (This is quiet reassuring,
\par you won't be the first programmer whose program takes hours to run but the output results can't be viewed because the wrong format width has been specified!) 
\par 
\par The specifier %-1Od will display an int left justified in a ten character space. The specifier %+5d will display an int using the next five character locations and will add a + or - sign to the
\par value. 
\par 
\par The only complexity is the use of the # modifier. What this does depends on which type of format it is used with: 
\par 
\par 
\par %#o    adds a leading 0 to the octal value
\par %#x    adds a leading 0x to the hex value
\par %#f or
\par %#e    ensures decimal point is printed
\par %#g    displays trailing zeros
\par 
\par Strings will be discussed later but for now remember: if you print a string using the %s specifier then all of the characters stored in the array up to the first null will be printed. If you use a
\par width specifier then the string will be right justified within the space. If you include a precision specifier then only that number of characters will be printed. 
\par 
\par For example: 
\par 
\par printf("%s,Hello") 
\par 
\par will print Hello, 
\par 
\par printf("%25s ,Hello") 
\par 
\par will print 25 characters with Hello right justified and 
\par 
\par printf("%25.3s,Hello") 
\par 
\par will print Hello right justified in a group of 25 spaces. 
\par 
\par Also notice that it is fine to pass a constant value to printf as in printf("%s,Hello"). 
\par 
\par Finally there are the control codes: 
\par 
\par 
\par \\b       backspace
\par \\f       formfeed
\par \\n       new line
\par \\r       carriage return
\par \\t       horizontal tab
\par \\'       single quote
\par \\0       null
\par 
\par 
\par If you include any of these in the control string then the corresponding ASCII control code is sent to the screen, or output device, which should produce the effect listed. In most cases you
\par only need to remember \\n for new line. 
\par 
\par 
\par scanf:
\par 
\par Now that we have mastered the intricacies of printf you should find scanf very easy. The scanf function works in much the same way as the printf. That is it has the general form: 
\par 
\par scanf(control string,variable,variable,...) 
\par 
\par In this case the control string specifies how strings of characters, usually typed on the keyboard, should be converted into values and stored in the listed variables. However there are a
\par number of important differences as well as similarities between scanf and printf. 
\par 
\par The most obvious is that scanf has to change the values stored in the parts of computers memory that is associated with parameters (variables). 
\par 
\par To understand this fully you will have to wait until we have covered functions in more detail. But, just for now, bare with us when we say to do this the scanf function has to have the
\par addresses of the variables rather than just their values. This means that simple variables have to be passed with a preceding >&. (Note for future reference: There is no need to do this
\par for strings stored in arrays because the array name is already a pointer.) 
\par 
\par The second difference is that the control string has some extra items to cope with the problems of reading data in. However, all of the conversion specifiers listed in connection with
\par printf can be used with scanf. 
\par 
\par The rule is that scanf processes the control string from left to right and each time it reaches a specifier it tries to interpret what has been typed as a value. If you input multiple values then
\par these are assumed to be separated by white space - i.e. spaces, newline or tabs. This means you can type: 
\par 
\par 3 4 5 
\par 
\par or 
\par 
\par 
\par 3
\par 4
\par 5
\par 
\par 
\par and it doesn't matter how many spaces are included between items. For example:
\par 
\par scanf("%d %d",&i,&j);
\par 
\par will read in two integer values into i and j. The integer values can be typed on the same line or on different lines as long as there is at least one white space character between them. 
\par 
\par The only exception to this rule is the %c specifier which always reads in the next character typed no matter what it is. You can also use a width modifier in scanf. In this case its effect is to
\par limit the number of characters accepted to the width. 
\par 
\par For example: 
\par 
\par scanf("%lOd",&i) 
\par 
\par would use at most the first ten digits typed as the new value for i. 
\par 
\par There is one main problem with scanf function which can make it unreliable in certain cases. The reason being is that scanf tends to ignore white spaces, i.e. the space character. If you
\par require your input to contain spaces this can cause a problem. Therefore for string data input the function getstr() may well be more reliable as it records spaces in the input text and
\par treats them as an ordinary characters. 
\par 
\par 
\par Custom Libraries:
\par 
\par If you think printf and scanf don't seem enough to do the sort of job that any modern programmer expects to do, you would be right. In the early days being able to print a line at a time
\par was fine but today we expect to be able to print anywhere on the screen at any time. 
\par 
\par The point is that as far as standard C goes simple I/O devices are stream-oriented - that is you send or get a stream of characters without any notion of being able to move the current
\par position in the stream. If you want to move backwards and forwards through the data then you need to use a direct access file. In more simple terms, C doesn't have a Tab(X,Y) or
\par Locate(X,Y) function or command which moves the cursor to the specified location! How are you ever going to write your latest block buster game, let alone build your sophisticated input
\par screens? 
\par 
\par Well you don't have to worry too much because although C may not define them as standard, all C implementations come with an extensive graphics/text function library that allows you to
\par do all of this and more. Such a library isn't standard, however the principles are always the same. The Borland and Microsoft offerings are usually considered as the two facto standards. 
\par 
\par 
\par Summing It Up:
\par 
\par Now that we have arithmetic, a way of reading values in and a way of displaying them, it's possible to write a slightly more interesting program than "Hello World". Not much more
\par interesting, it's true, but what do you expect with two instructions and some arithmetic? 
\par 
\par Let's write a program that adds two numbers together and prints the result. (I told you it wasn't that much more interesting!) Of course, if you want to work out something else like fahrenheit
\par to centigrade, inches to centimetres or the size of your bank balance, then that's up to you - the principle is the same. 
\par 
\par The program is a bit more complicated than you might expect, but only because of the need to let the user know what is happening: 
\par 
\par 
\par #include <stdio.h>
\par main()
\par  \{
\par    int a,b,c;
\par    printf("\\nThe first number is ");
\par    scanf("%d",&a);
\par    printf("The second number is ");
\par    }{\lang1036\langfe1036\langnp1036 scanf("%d",&b);
\par    }{c=a+b;
\par    printf("The answer is %d \\n",c);
\par  \}
\par 
\par 
\par The first instruction declares three integer variables: a, b and c. The first two printf statements simply display message on the screen asking the user for the values. The scanf functions
\par then read in the values from the keyboard into a and b. These are added together and the result in c is displayed on the screen with a suitable message. Notice the way that you can include a
\par message in the printf statement along with the value. 
\par 
\par Type the program in, compile it and link it and the result should be your first interactive program. Try changing it so that it works out something a little more adventurous. Try changing the
\par messages as well. All you have to remember is that you cannot store values or work out results greater than the range of an integer variable or with a fractional part.
\par 
\par 
\par \page }{\super #{\footnote\ftnalt \pard\plain \s30\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs20\lang1036\langfe1033\cgrid\langnp1036\langfenp1033 {\lang1033\langfe1033\langnp1033 #}{\cs89\fs24\up6\lang1033\langfe1033\langnp1033 \tab }{
\f1\lang1031\langfe1033\langnp1031 Topic64}}}{\cs89\fs24\up6\lang1033\langfe1033\super\langfenp1033 ${\footnote\ftnalt \pard\plain \s30\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs20\lang1036\langfe1033\cgrid\langnp1036\langfenp1033 {
\lang1033\langfe1033\langnp1033 $}{\cs89\fs24\up6\lang1033\langfe1033\langnp1033 \tab }{\f1\lang1031\langfe1033\langnp1031 Control Loops}}}{\fs28 Control Loops }{
\par 
\par 
\par Objectives:
\par 
\par Having read this section you should have an idea about C's: 
\par 
\par    1.Conditional, or Logical, Expressions as used in program control 
\par    2.the do while loop 
\par    3.the while loop 
\par    4.the for loop 
\par 
\par 
\par Go With The Flow:
\par 
\par Our programs are getting a bit more sophisticated, but they still lack that essential something that makes a computer so necessary. Exactly what they lack is the most difficult part to describe
\par to a beginner. There ar
\par e only two great ideas in computing. The first is the variable and you've already met that. The second is flow of control. 
\par 
\par When you write a list of instructions for someone to perform you usually expect them to follow the list from the top to the bottom, one at a time. This is the simple default flow of control
\par through a program. The C programs we have written so far use this one-after-another default flow of control. 
\par 
\par This is fine and simple, but it limits the running time of any program we can write. Why? Simply because there is a limit to the number of instructions you can write and it doesn't take long for
\par a computer to read though and obey your list. So how is it that we have programs that run for hours on end if need be? The answer is statements that alter the one-after-another order of
\par obeying instructions. Perhaps the most useful is the loop. 
\par 
\par Suppose we ask you to display "Hello World!" five times on the screen. Easy! you'd say: 
\par 
\par 
\par #include <stdio.h>
\par main()
\par  \{
\par    printf("Hello World!\\n");
\par    printf("Hello World!\\n");
\par    printf("Hello World!\\n");
\par    printf("Hello World!\\n");
\par    printf("Hello World!\\n");
\par  \}
\par 
\par Indeed, this does exactly what was asked. But now we up the bet and ask you to do the same job for 100 hellos or, if you're still willing to type that much code, maybe 1,000 Hello World's,
\par 10,000 Hello World's, or whatever it takes you to realise this isn't a sensible method! 
\par 
\par What you really need is some way of repeating the printf statements without having to write it out each time. The solution to this problem is the while loop or the do while loop. 
\par 
\par 
\par The while and do while Loops:
\par 
\par You can repeat any statement using either the while loop: 
\par 
\par while(condition) compound statement;
\par 
\par or the do while loop: 
\par 
\par do compound statement while(condition); 
\par 
\par The condition is just a test to control how long you want the compound statement to carry on repeating. 
\par 
\par Each line of a C program up to the semicolon is called a statement. The semicolon is the statement's terminator. The braces \{ and \} which have appeared at the beginning and end of our
\par program unit can also be used to group together related declarations and statements into a compound statement or a block. 
\par 
\par In the case of the while loop before the compound statement is carried out the condition is checked, and if it is true the statement is obeyed one more time. If the condition turns
\par out to be false, the looping isn't obeyed and the program moves on to the next statement. So you can see that the instruction really means while something or other is true keep on doing
\par the statement. 
\par 
\par In the case of the do while loop it will always execute the code within the loop at least once, since the condition controlling the loop is tested at the bottom of the loop. The do while
\par loop repeats the instruction while the condition is true. If the condition turns out to be false, the looping isn't obeyed and the program moves on to the next statement. 
\par 
\par 
\par Conditions or Logical Expressions:
\par 
\par The only detail we need to clear up is what the condition (or Logical Expression) can be. How, for example, do we display 100 or 10,000 "Hello World!" messages? The condition
\par can be any test of one value against another. For example: 
\par 
\par a>0 
\par 
\par is true if a contains a value greater than zero; 
\par 
\par b<0 
\par 
\par is true if b contains a value less than zero. 
\par 
\par The only complication is that the test for 'something equals something else' uses the character sequence == and not =. That's right: a test for equality uses two equal-signs, as in a==0, while
\par an assignment, as in a=0, uses one. This use of the double or single equal sign to mean slightly different things is a cause of many a program bug for beginner and expert alike! 
\par 
\par So what about answering the question? What about the 100 "Hello World"s? Well, for the moment we know easily how to produce an infinite number of Hello World!"s using while loop: 
\par 
\par 
\par #include <stdio.h>
\par   main()
\par    \{
\par     while (1 == 1) printf("Hello World!\\n");
\par    \}
\par 
\par and using the do while loop: 
\par 
\par 
\par #include <stdio.h>
\par   main()
\par    \{
\par     do
\par       printf("Hello World!\\n");
\par     while (1 == 1) 
\par    \}
\par 
\par If you type either of these programs in and run it you will find that your screen fills with a never ending list of "Hello World!"s. Why? Because the condition to keep the repeat going is ( 1 ==
\par 1 ), one equals one in plain English, which is always true! So how do we stop the loop? In some cases it could be by pulling the plug out - but usually you can stop an infinite loop by
\par pressing Ctrl-Break or Ctrl-C. 
\par 
\par An infinite loop is sometimes useful - I certainly hope the program controlling the nearest nuclear power station is an infinite loop that never receives a Ctrl-Break signal! Most loops,
\par however, have to stop some time. 
\par 
\par To solve our problem of printing 100 "Hello World!"s we need a counter and a test for when that counter reaches 100. A counter is a simple variable that has one added to it each time
\par through the loop, using an instruction like this: 
\par 
\par a=a+1; 
\par 
\par This always confuses beginners, because they aren't used to seeing the variable on both sides of the equal-sign. All this means is that a has one added to it to produce a new value, and this
\par value is stored back in the location called <B>a. If you're worried, try thinking about it as: 
\par 
\par 
\par temp = a+l;
\par a    = temp;
\par 
\par 
\par The two approaches are more or less the same. C is a language where anything that's used often can be said concisely, so it lets you say "add one to a variable" using the shorter notation: 
\par 
\par ++a; 
\par 
\par The double plus is read "increment a by one". Make sure you know that ++a; and a=a+1; are the same thing because you will often see both in typical C programs. 
\par 
\par The increment operator ++ and the equivalent decrement operator --, can be used as either prefix (before the variable) or postfix (after the variable). Note: ++a increments a before using
\par its value; whereas a++ which means use the value in a then increment the value stored in a. 
\par 
\par Now it is easy to print "Hello World!" 100 times using the while loop:
\par 
\par 
\par #include <stdio.h>
\par  main()
\par   \{
\par    int count;
\par    count=0;
\par    while (count < 100)
\par     \{
\par       ++count;
\par       printf("Hello World!\\n");
\par     \}
\par   \}
\par 
\par [program] 
\par 
\par or the do while loop:
\par 
\par 
\par #include <stdio.h>
\par  main()
\par   \{
\par    int count;
\par    count=0;
\par    do
\par     \{
\par       ++count;
\par       printf("Hello, World!\\n");
\par     \} while (count < 100) 
\par   \}
\par 
\par 
\par Note: the use of the \{ and \} to form a compound statement; all statements between the braces will be executed before the loop check is made. 
\par 
\par The integer variable count is declared and then set to zero, ready to count the number of times we have gone round the loop. Each time round the loop the value of count is checked against
\par 100. As long as it is less, the loop carries on. Each time the loop carries on, count is incremented and "Hello World!" is printed - so eventually count does reach 100 and the loop stops.
\par These little programs are just a bit more subtle than you might think. Ask yourself, do they really print exactly 100 times? Ask yourself: what is the final value of count? If you want to make
\par sure you are right change the printf to: 
\par 
\par printf("count is %d",count); 
\par 
\par and add a printf after the loop: 
\par 
\par printf("final value is %d",count); 
\par 
\par Make sure you understand why you get the results that you do. What would happen if you changed the initial value of count to be one rather than zero? 
\par 
\par 
\par Looping the Loop:
\par 
\par We have seen that any list of statements enclosed in curly brackets is treated as a single statement, a compound statement. So to repeat a list of statements all you have to do is put them
\par inside a pair of curly brackets as in: 
\par 
\par 
\par while (condition)
\par  \{
\par    statementl;
\par    statement2;
\par    statement3;
\par  \}
\par 
\par which repeats the list while the condition is true. Notice that the statements within the curly brackets have to be terminated by semicolons as usual. Notice also that as the while statement
\par is a complete statement it too has to be terminated by a semi-colon - except for the influence of one other punctuation rule. You never have to follow a right curly bracket with a
\par semi-colon. This rule was introduced to make C look tidier by avoiding things like 
\par 
\par \};\};\};\} 
\par 
\par at the end of a complicated program. You can write the semi-colon after the right bracket if you want to, but most C programmers don't. You can use a compound statement anywhere you
\par can use a single statement. 
\par 
\par 
\par The for Loop:
\par 
\par The while, and do-while, loop is a completely general way of repeating a section of program over and over again - and you don't really need anything else but... The while loop repeats a
\par list of instructions while some condition or other is true and often you want to repeat something a given number of times. 
\par 
\par The traditional solution to this problem is to introduce a variable that is used to count the number of times that a loop has been repeated and use its value in the condition to end the loop. For
\par example, the loop: 
\par 
\par 
\par i=l;
\par while (i<10)
\par  \{
\par    printf("%d \\n",i);
\par    ++i;
\par  \}
\par 
\par repeats while i is less than 10. As the ++ operator is used to add one to i each time through the loop you can see that i is a loop counter and eventualy it will get bigger than 10, i.e. the loop
\par will end. 
\par 
\par The question is how many times does the loop go round? More specifically what values of i is the loop carried out for? If you run this program snippet you will find that it prints 1,2,3... and
\par finishes at 10. That is, the loop repeats 10 times for values of i from 1 to 10. This sort of loop - one that runs from a starting value to a finishing value going up by one each time - is so
\par common that nearly all programming languages provide special commands to implement it. In C this special type of loop can be implemented as a for loop. 
\par 
\par 
\par for ( counter=start_value; counter <= finish_value; ++counter )
\par   compound statement
\par 
\par 
\par which is entirely equivalent to: 
\par 
\par 
\par counter=start;
\par while (couner <= finish)
\par  \{
\par   statements;
\par   ++counter;
\par  \}
\par 
\par 
\par The condition operator <= should be interpreted as less than or equal too. We will be covering all of C's conditions , or logical expressions, in the next section. 
\par 
\par For example to print the numbers 1 to 100 you could use: 
\par 
\par for ( i=l; i <= 100; ++i ) printf("%d \\n",i); 
\par 
\par You can, of course repeat a longer list of instructions simply by using a compound statement. 
\par 
\par The C for loop is much more flexible than this simple description. Indeed, many would be horrified at the way we have described the for loop without displaying its true generality, but
\par keep in mind that there is more to come. 
\par 
\par In the meantime consider the following program, it does a temperature conversion, but it also introduces one or two new concepts: 
\par 
\par    1.our counter does not have to be incremented (deremented) by 1; we can use any value. 
\par    2.we can do calculations within the printf statement. 
\par 
\par 
\par #include <stdio.h>
\par 
\par main()
\par \{
\par     int fahr;
\par 
\par     for ( fahr = 0 ; fahr <= 300 ; fahr = fahr + 20)
\par         printf("%4d %6.1f\\n" , fahr , (5.0/9.0)*(fahr-32));
\par 
\par \}
\par 
\par and here's another one for you to look at: 
\par 
\par 
\par #include <stdio.h>
\par 
\par main()
\par \{
\par     int lower , upper , step;
\par     float fahr , celsius;
\par 
\par     lower = 0  ;
\par     upper = 300;
\par     step  = 20 ;
\par 
\par     fahr  = lower;
\par 
\par     while ( fahr <= upper ) \{
\par                              }{\lang1036\langfe1036\langnp1036 celsius = (5.0 / 9.0) * (fahr - 32.0);
\par                              printf("%4.0f %6.1f\\n" , fahr , celsius);
\par                              }{fahr = fahr + step;
\par                             \}
\par \}
\par \page }{\super #{\footnote\ftnalt \pard\plain \s30\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs20\lang1036\langfe1033\cgrid\langnp1036\langfenp1033 {\lang1033\langfe1033\langnp1033 #}{\cs89\fs24\up6\lang1033\langfe1033\langnp1033 \tab }{
\f1\lang1031\langfe1033\langnp1031 Topic65}}}{\cs89\fs24\up6\lang1033\langfe1033\super\langfenp1033 ${\footnote\ftnalt \pard\plain \s30\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs20\lang1036\langfe1033\cgrid\langnp1036\langfenp1033 {
\lang1033\langfe1033\langnp1033 $}{\cs89\fs24\up6\lang1033\langfe1033\langnp1033 \tab }{\f1\lang1031\langfe1033\langnp1031 Conditional Execution}}}{\fs28 Conditional Execution }{
\par 
\par 
\par Objectives:
\par 
\par Having read this section you should be able to: 
\par 
\par    1.Program control with if , if-else and switch structures 
\par    2.have a better idea of what C understands as true and false. 
\par 
\par 
\par Program Control:
\par 
\par It is time to turn our attention to a different problem - conditional execution. We often need to be able to choose which set of instructions are obeyed according to a condition. For
\par example, if you're keeping a total and you need to display the message 'OK' if the value is greater than zero you would need to write something like:
\par 
\par if (total>O) printf("OK");
\par 
\par This is perfectly reasonable English, if somewhat terse, but it is also perfectly good C. The if statement allows you to evaluate a >condition and only carry out the statement, or compound
\par statement, that follows if the condition is true. In other words the printf will only be obeyed if the condition total > O is true. 
\par 
\par If the condition is false then the program continues with the next instruction. In general the if statement is of the following form: 
\par 
\par if (condition) statement;
\par 
\par and of course the statement can be a compound statement. 
\par 
\par Here's an example program using two if statements: 
\par 
\par 
\par 
\par #include <stdio.h>
\par 
\par main()
\par \{
\par     int a , b;
\par 
\par     do \{
\par 
\par         printf("\\nEnter first number: ");
\par         scanf("%d" , &a);
\par 
\par         printf("\\nEnter second number: ");
\par         }{\lang1036\langfe1036\langnp1036 scanf("%d" , &b);
\par 
\par         }{if (a<b) printf("\\n\\nFirst number is less than second\\n\\n");
\par         if (b<a) printf("Second number is less than first\\n\\n");
\par 
\par        \} while (a < 999);
\par \}
\par 
\par Here's another program using an if keyword and a compound statement or a block: 
\par 
\par #include <stdio.h>
\par 
\par main()
\par \{
\par     int a , b;
\par 
\par     do \{
\par 
\par         printf("\\nEnter first number: ");
\par         scanf("%d" , &a);
\par 
\par         printf("\\nEnter second number: ");
\par         }{\lang1036\langfe1036\langnp1036 scanf("%d" , &b);
\par 
\par         }{if (a<b) \{
\par                   printf("\\n\\nFirst number is less than second\\n");
\par                   printf("Their difference is : %d\\n" , b-a);
\par                   printf("\\n");
\par                  \}
\par 
\par         printf("\\n");
\par 
\par        \} while (a < 999);
\par \}
\par 
\par The if statement lets you execute or skip an instruction depending on the value of the condition. Another possibility is that you might want to select one of two possible statements - one
\par to be obeyed when the condition is true and one to be obeyed when the condition is false. You can do this using the 
\par 
\par 
\par if (condition) statement1;
\par else statement2;
\par 
\par form of the if statement. 
\par 
\par In this case statement1 is carried out if the condition is true and statement2 if the condition is false. 
\par 
\par Notice that it is certain that one of the two statements will be obeyed because the condition has to be either true or false! You may be puzzled by the semicolon at the end of the if part
\par of the statement. The if (condition) statement1 part is one statement and the else statement2 part behaves like a second separate statement, so there has to be semi-colon
\par terminating the first statement. 
\par 
\par 
\par Logical Expressions:
\par 
\par So far we have assumed that the way to write the conditions used in loops and if statements is so obvious that we don't need to look more closely. In fact there are a number of
\par deviations from what you might expect. To compare two values you can use the standard symbols:
\par 
\par >   (greater than)
\par 
\par <   (less than)
\par    
\par >=  (for greater than or equal to )
\par <=  (for less than or equal to)
\par ==  (to test for equality).
\par 
\par The reason for using two equal signs for equality is that the single equals sign always means store a value in a variable - i.e. it is the assignment operator. This causes beginners lots of
\par problems because they tend to write: 
\par 
\par if (a = 10) instead of if (a == 10) 
\par 
\par The situation is made worse by the fact that the statement if (a = 10) is legal and causes no compiler error messages! It may even appear to work at first because, due to a logical quirk
\par of C, the assignment actually evaluates to the value being assigned and a non-zero value is treated as true (see below). Confused? I agree it is confusing, but it gets easier. . . 
\par 
\par Just as the equals condition is written differently from what you might expect so the non-equals sign looks a little odd. You write not equals as !=. For example: 
\par 
\par if (a != 0) 
\par 
\par is 'if a is not equal to zero'. 
\par 
\par An example program showing the if else construction now follows:
\par 
\par 
\par #include <stdio.h>
\par 
\par main ()
\par  \{
\par    int num1, num2;
\par 
\par    printf("\\nEnter first number ");
\par    }{\lang1036\langfe1036\langnp1036 scanf("%d",&num1);
\par 
\par    }{printf("\\nEnter second number ");
\par    }{\lang1036\langfe1036\langnp1036 scanf("%d",&num2);
\par 
\par    }{if (num2 ==0) printf("\\n\\nCannot devide by zero\\n\\n");
\par    else          printf("\\n\\nAnswer is %d\\n\\n",num1/num2);
\par  \}
\par 
\par This program uses an if and else statement to prevent division by 0 from occurring. 
\par 
\par 
\par True and False in C:
\par 
\par Now we come to an advanced trick which you do need to know about, but if it only confuses you, come back to this bit later. Most experienced C programmers would wince at the
\par expression if(a!=0). 
\par 
\par The reason is that in the C programming language dosen't have a concept of a Boolean variable, i.e. a type class that can be either true or false. Why bother when we can use numerical
\par values. In C true is represented by any numeric value not equal to 0 and false is represented by 0. This fact is usually well hidden and can be ignored, but it does allow you to write 
\par 
\par if(a != 0) just as if(a) 
\par 
\par because if a isn't zero then this also acts as the value true. It is debatable if this sort of shortcut is worth the three characters it saves. Reading something like 
\par 
\par if(!done) 
\par 
\par as 'if not done' is clear, but if(!total) is more dubious. 
\par 
\par 
\par Using break and continue Within Loops:
\par 
\par The break statement allows you to exit a loop from any point within its body, bypassing its normal termination expression. When the break statement is encountered inside a loop, the loop
\par is imediately terminated, and program control resumes at the next statement following the loop. The break statement can be used with all three of C's loops. You can have as many
\par statements within a loop as you desire. It is generally best to use the break for special purposes, not as your normal loop exit. break is also used in conjunction with functions and >case
\par statements which will be covered in later sections. 
\par 
\par The continue statement is somewhat the opposite of the break statement. It forces the next iteration of the loop to take place, skipping any code in between itself and the test condition of
\par the loop. In while and do-while loops, a continue statement will cause control to go directly to the test condition and then continue the looping process. In the case of the for loop, the
\par increment part of the loop continues. One good use of continue is to restart a statement sequence when an error occurs. 
\par 
\par 
\par #include <stdio.h>
\par 
\par main()
\par \{
\par     int x ;
\par 
\par     for ( x=0 ; x<=100 ; x++) \{
\par                                if (x%2) continue;
\par                                printf("%d\\n" , x);
\par                               \}
\par \}
\par 
\par 
\par Here we have used C's modulus operator: %. A expression: 
\par 
\par a % b 
\par 
\par produces the remainder when a is divided by b; and zero when there is no remainder. 
\par 
\par Here's an example of a use for the break statement: 
\par 
\par 
\par #include <stdio.h>
\par 
\par }{\lang1036\langfe1036\langnp1036 main()
\par \{
\par     int t ;
\par 
\par     for ( ; ; ) \{
\par                  scanf("%d" , &t)   ;
\par                  }{if ( t==10 ) break ;
\par                 \}
\par     printf("End of an infinite loop...\\n");
\par 
\par \}
\par 
\par 
\par Select Paths with switch:
\par 
\par While if is good for choosing between two alternatives, it quickly becomes cumbersome when several alternatives are needed. C's solution to this problem is the switch statement. The
\par switch statement is C's multiple selection statement. It is used to select one of several alternative paths in program execution and works like this: A variable is successively tested against a
\par list of integer or character constants. When a match is found, the statement sequence associated with the match is executed. The general form of the switch statement is:
\par 
\par 
\par switch(expression) 
\par \{
\par   case constant1:   statement sequence; break;
\par   case constant2:   statement sequence; break;
\par   case constant3:   statement sequence; break;
\par   .
\par   .
\par   .
\par   default:   statement sequence; break;
\par \}
\par 
\par 
\par Each case is labelled by one, or more, constant expressions (or integer-valued constants). The default statement sequence is performed if no matches are found. The default is optional.
\par If all matches fail and default is absent, no action takes place. 
\par 
\par When a match is found, the statement sequence asociated with that case are executed until break is encountered. 
\par 
\par An example program follows: 
\par 
\par 
\par #include <stdio.h>
\par 
\par main()
\par  \{
\par   int i;
\par 
\par   printf("Enter a number between 1 and 4");
\par   scanf("%d",&i);
\par 
\par   switch (i)
\par    \{
\par      case 1:
\par       printf("one");
\par       break;
\par      case 2:
\par       printf("two");
\par       break;
\par      case 3:
\par       printf("three");
\par       break;
\par      case 4:
\par       printf("four");
\par       break;
\par      default:
\par       printf("unrecognized number");
\par    \}    /* end of switch */
\par 
\par  \}
\par 
\par This simple program recognizes the numbers 1 to 4 and prints the name of the one you enter. The switch statement differs from if, in that switch can only test for equality, whereas the if
\par conditional expression can be of any type. Also switch will work with only int and char types. You cannot for example, use floating-point numbers. If the statement sequence includes
\par more than one statement they will have to be enclosed with \{\} to form a compound statement.
\par 
\par  
\par \page }{\super #{\footnote\ftnalt \pard\plain \s30\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs20\lang1036\langfe1033\cgrid\langnp1036\langfenp1033 {\lang1033\langfe1033\langnp1033 #}{\cs89\fs24\up6\lang1033\langfe1033\langnp1033 \tab }{
\f1\lang1031\langfe1033\langnp1031 Topic66}}}{\cs89\fs24\up6\lang1033\langfe1033\super\langfenp1033 ${\footnote\ftnalt \pard\plain \s30\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs20\lang1036\langfe1033\cgrid\langnp1036\langfenp1033 {
\lang1033\langfe1033\langnp1033 $}{\cs89\fs24\up6\lang1033\langfe1033\langnp1033 \tab }{\f1\lang1031\langfe1033\langnp1031 Structure and Nesting}}}{\fs28 Structure and Nesting}{
\par 
\par 
\par Objectives:
\par 
\par This section brings together the various looping mechanisms available to the C programmer with the program control constructs we met in the last section. 
\par 
\par We also demonstrates a neat trick with random numbers. 
\par 
\par It is one of the great discoveries of programming that you can write any program using just simple while loops and if statements. You don't need any other control statements at all. Of
\par course it might be nice to include some other types of control statement to make life easy - for example, you don't need the for loop, but it is good to have! So as long as you understand the
\par if and the while loop in one form or another you can write any program you want to. 
\par 
\par If you think that a loop and an if statement are not much to build programs then you are missing an important point. It's not just the statements you have, but the way you can put them
\par together. You can include an if statement within a loop, loops within loops are also OK, as are loops in ifs, and ifs in ifs and so on. This putting one control statement inside another is
\par called nesting and it is really what allows you to make a program as complicated as you like. 
\par 
\par 
\par Think of a number:
\par 
\par Now let's have a go at writing the following program: 'It thinks of a number in the range 0 to 99 and then asks the user to guess it'. This sounds complicated, especially the 'thinks of a
\par number' part, but all you need to know is that the statement: 
\par 
\par r = rand() 
\par 
\par will store a random number in the integer variable r. The standard library function rand() randomly picks a number within the range 0 to 32767, but this might vary from machine to
\par machine. Look upon rand() as being a large dice. 
\par 
\par Our problem is to select a number between 0 and 99 and not between 0 and 32767. How can we get our random number to within our range? The rand() function will produce numbers
\par such as: 
\par 
\par 
\par 2567
\par 134
\par 20678
\par 15789
\par 32001
\par 15987
\par etc...
\par 
\par 
\par If you look at the last two digits of all of these numbers they would form our random set! To select just these numbers we can use an arithmetic calculation of the following form: 
\par 
\par r = rand() % 100 
\par 
\par That is, to get the number into the right range you simply take the remainder on dividing by 100, ie a value in the range 0 to 99. You should remember this neat programming trick, you'll be
\par surprised how often it is required. 
\par 
\par Our solution to the problem is as follows: 
\par 
\par 
\par #include <stdio.h>
\par 
\par main()
\par  \{
\par    int target;
\par    int guess;
\par    int again;
\par 
\par    printf("\\n Do you want to guess a number 1 =Yes, 0=No ");
\par    scanf("%d",&again);
\par 
\par    while (again)
\par     \{
\par       target = rand() % 100;
\par       guess  = target + l;
\par 
\par       while(target!=guess)
\par        \{
\par          printf('\\n What is your guess ? ");
\par          scanf("%d",&guess);
\par 
\par          if (target>guess) printf("Too low");
\par          else printf("Too high");
\par        \}
\par 
\par       printf("\\n Well done you got it! \\n");
\par       printf("\\nDo you want to guess a number 1=Yes, 0=No");
\par       scanf("%d".&again);
\par     \}
\par  \}
\par 
\par 
\par This looks like a very long and complicated program, but it isn't. Essentially it used two loops and an if/else which in English could be summarised as:
\par 
\par while(again) \{
\par   think of a number
\par   while (user hasn't guessed it)
\par    \{
\par      get users guess.
\par      if (target < guess) tell the user the guess is low 
\par      else                tell the user the guess is high
\par    \}
\par \}
\par 
\par The integer variable again is used to indicate that the user wants to carry on playing. If it is 0 then the loop stops so 0 = No, and 1, or any other non-zero value, = Yes. 
\par 
\par If you try this program out you will discover that it has a slight flaw - not so much a bug, more a feature. If the user guesses the correct value the program still tells the user that the guess is
\par too high and then congratulates them that they have the correct value. Such problems with how loops end are common and you have to pay attention to details such as this. There are a
\par number of possible solutions, but the most straight forward is to change the inner loop so that the first guess is asked for before the loop begins. This shifts the test for the loop to stop to
\par before the test for a high or low guess: 
\par 
\par 
\par #include <stdio.h>
\par 
\par main()
\par  \{
\par    int target;
\par    int guess;
\par    int again;
\par 
\par    printf("\\n Do you want to guess a number 1 =Yes, 0=No ");
\par    scanf("%d",&again);
\par 
\par    while (again)
\par     \{
\par       target = rand() % 100;
\par 
\par       printf('\\n What is your guess ? ");
\par       scanf("%d",&guess);
\par 
\par       while(target!=guess)
\par        \{
\par          if (target>guess) printf("Too low");
\par          else printf("Too high");
\par          printf('\\n What is your guess ? ");
\par          scanf("%d",&guess);
\par        \}
\par 
\par       printf("\\n Well done you got it! \\n");
\par       printf("\\n Do you want to guess a number 1=Yes, 0=No");
\par       scanf("%d".&again);
\par     \}
\par  \}
\par 
\par 
\par If you want to be sure that you understand what is going on here, ask yourself why the line: 
\par 
\par guess = target + 1; 
\par 
\par was necessary in the first version of the program and not in the second?
\par 
\par 
\par \page }{\super #{\footnote\ftnalt \pard\plain \s30\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs20\lang1036\langfe1033\cgrid\langnp1036\langfenp1033 {\lang1033\langfe1033\langnp1033 #}{\cs89\fs24\up6\lang1033\langfe1033\langnp1033 \tab }{
\f1\lang1031\langfe1033\langnp1031 Topic67}}}{\cs89\fs24\up6\lang1033\langfe1033\super\langfenp1033 ${\footnote\ftnalt \pard\plain \s30\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs20\lang1036\langfe1033\cgrid\langnp1036\langfenp1033 {
\lang1033\langfe1033\langnp1033 $}{\cs89\fs24\up6\lang1033\langfe1033\langnp1033 \tab }{\f1\lang1031\langfe1033\langnp1031 Functions and Prototypes}}}{\fs28 Functions and Prototypes }{
\par 
\par 
\par Objectives:
\par 
\par Having read this section you should be able to: 
\par 
\par    1.program using correctly defined C functions 
\par    2.pass the value of local variables into your C functions 
\par 
\par 
\par Functions - C's Building Blocks:
\par 
\par Some programmers might consider it a bit early to introduce the C function - but we think you can't get to it soon enough. It isn't a difficult idea and it is incredibly useful. You could say that
\par you only really start to find out what C programming is all about when you start using functions. 
\par 
\par C functions are the equivalent of what in other languages would be called subroutines or procedures. If you are familiar with another language you also need to know that C only has
\par functions, so don't spend time looking for the definition of subroutines or procedures - in C the function does everything! 
\par 
\par A function is simply a chunk of C code (statements) that you have grouped together and given a name. The value of doing this is that you can use that "chunk" of code repeatedly simply by
\par writing its name. For example, if you want to create a function that prints the word "Hello" on the screen and adds one to variable called total then the chunk of C code that you want to
\par turn into a function is just: 
\par 
\par printf("Hello");
\par total = total + l;
\par 
\par 
\par To turn it into a function you simply wrap the code in a pair of curly brackets to convert it into a single compound statement and write the name that you want to give it in front of the
\par brackets: 
\par 
\par 
\par demo()
\par  \{
\par   printf("Hello");
\par   total = total + 1;
\par  \}
\par 
\par 
\par Don't worry for now about the curved brackets after the function's name. Once you have defined your function you can use it within a program: 
\par 
\par 
\par main()
\par  \{
\par   demo();
\par  \}
\par 
\par 
\par In this program the instruction demo (); is entirely equivalent to writing out all of the statements in the function. What we have done is to create an new C function and this, of course, is the
\par power of functions. When you are first introduced to the idea of functions, or their equivalent in other languages, it is easy to fall into the trap of thinking that they are only useful when you
\par want to use a block of code more than once. 
\par 
\par Functions are useful here but they have a more important purpose. If you are creating a long program then functions allow you to split it into "bite-sized" chunks which you can work on in
\par isolation. As every C programmer knows, "functions are the building blocks of programs." 
\par 
\par 
\par Functions and Local Variables:
\par 
\par Now that the philosophy session is over we have to return to the details - because as it stands the demo function will not work. The problem is that the variable total isn't declared
\par anywhere. A function is a complete program sub-unit in its own right and you can declare variables within it just as you can within the main program. If you look at the main program we
\par have been using you will notice it is in fact a function that just happens to be called "main"! So to make demo work we have to add the declaration of the variable total: 
\par 
\par 
\par demo()
\par  \{
\par   int total; 
\par   printf("Hello"); 
\par   total=total+1; 
\par  \}
\par 
\par 
\par Now this raises the question of where exactly total is a valid variable. You can certainly use total within the function that declares it - this much seems reasonable - but what about other
\par functions and, in particular, what about the main program? The simple answer is that total is a variable that belongs to the demo function. It cannot be used in other functions, it doesn't
\par even exist in other functions and it certainly has nothing to do with any variable of the same name that you declare within other functions. 
\par 
\par This is what we hinted at when we said that functions were isolated chunks of code. Their isolation is such that variables declared within the function can only be used within that function.
\par These variables are known as local variables and as their name suggests are local to the function they have been declared in. If you are used to a language where every variable is usable all
\par the time this might seem silly and restrictive - but it isn't. It's what makes it possible to break a large program down into smaller and more manageable chunks. 
\par 
\par The fact that total is only usable within the demo function is one thing - but notice we said that it only existed within this function, which is a more subtle point. The variables that a function
\par declares are created when the function is started and destroyed when the function is finished. So if the intention is to use total to count the number of times the >demo function is used -
\par forget it! Each time demo is used the variable total is created afresh, and at the end of the function the variable goes up in a puff of smoke along with its value. So no matter how many times
\par you run demo total will only ever reach a value of 1, assuming that it's initialised to 0. 
\par 
\par 
\par Making The Connections:
\par 
\par Functions are isolated, and whats more nothing survives after they have finished. Put like this a function doesn't seem to be that useful because you can't get data values in, you can't get data
\par values out, and they don't remember anything that happens to them! 
\par 
\par To be useful there has to be a way of getting data into and out of a function, and this is the role of the curved brackets. You can define special variables called parameters which are used to
\par carry data values into a function. Parameters are listed and declared in between the () brackets in the function's definition. For example: 
\par 
\par 
\par  sum( int a, int b)
\par  \{
\par   int result; 
\par   result=a + b;
\par  \}
\par 
\par 
\par defines a function called sum with two parameters a and b, both integers. Notice that the result variable is declared in the usual way within the body of the function. Also, notice that the
\par parameters a and b are used within the function in the same way as normal variables - which indeed they are. What is more, they are still local variables and have nothing at all to do with
\par any variables called a and b defined in any other function. 
\par 
\par The only way in which parameters are any different is that you can give them initial values when the function starts by writing the values between the round brackets. So 
\par 
\par sum(l,2); 
\par 
\par is a call to the sum function with a set to 1 and b set to 2 and so result is set to 3. You can also initialise parameters to the result of expressions such as: 
\par 
\par sum(x+2,z*10); 
\par 
\par which will set a equal to whatever x+2 works out to be and b equal to whatever z*10 works out to be. 
\par 
\par As a simpler case you can also set a parameter to the value in a single variable - for example: 
\par 
\par }{\lang1036\langfe1036\langnp1036 sum(x,y); 
\par 
\par }{will set a to the value stored in x and b to the value stored in y. 
\par 
\par Parameters are the main way of getting values into a function, but how do we get values out? There is no point in expecting the >result variable to somehow magically get its value out of the
\par sum function - after all, it is a local variable and is destroyed when sum is finished. You might try something like: 
\par 
\par 
\par  sum(int a, int b, int result)
\par  \{
\par   int result;
\par   result = a + b;
\par  \}
\par 
\par 
\par but it doesn't work. Parameters are just ordinary variables that are set to an initial value when the function starts running - they don't pass values back to the program that used the function.
\par That is: 
\par 
\par sum(l,2,r); 
\par 
\par doesn't store 1+2 in r because the value in r is used to initialise the value in result and not vice versa. You can even try 
\par 
\par sum(l,2,result); 
\par 
\par and it still will not work - the variable result within the function has nothing to do with the variable result used in any other program. 
\par 
\par The simplest way to get a value out of a function is to use the return instruction. A function can return a value via its name - it's as if the name was a variable and had a value. The value that
\par is returned is specified by the instruction: 
\par 
\par return value; 
\par 
\par which can occur anywhere within the function, not just as the last instruction - however, a return always terminates the function and returns control back to the calling function. The only
\par complication is that as the function's name is used to return the value it has to be given a data type. This is achieved by writing the data type in front of the function's name. For example: 
\par 
\par int sum(a,b); 
\par 
\par So now we can at last write the correct version of the sum function: 
\par 
\par 
\par  int sum(int a, int b)
\par   \{
\par    int result;
\par    result = a + b;
\par    return result;
\par   \}
\par 
\par 
\par and to use it you would write something like: 
\par 
\par r=sum(1,2); 
\par 
\par which would add 1 to 2 and store the result in r. You can use a function anywhere that you can use a variable. For example, 
\par 
\par r=sum(1,2)*3 
\par 
\par is perfectly OK, as is 
\par 
\par r=3+sum(1,2)/n-10 
\par 
\par Obviously, the situation with respect to the number of inputs and outputs of a function isn't equal. That is you can create as many parameters as you like but a function can return only a
\par single value. (Later on we will have to find ways of allowing functions to return more than one value.) 
\par 
\par So to summarise: a function has the general form: 
\par 
\par 
\par  type FunctionName(type declared parameter list)
\par   \{
\par    statements that make up the function
\par   \}
\par 
\par 
\par and of course a function can contain any number of return statements to specify its return value and bring the function to an end. 
\par 
\par There are some special cases and defaults we need to look at before moving on. You don't have to specify a parameter list if you don't want to use any parameters - but you still need the
\par empty brackets! You don't have to assign the function a type in which case it defaults to int. A function doesn't have to return a value and the program that makes use of a function doesn't
\par have to save any value it does return. For example, it is perfectly OK to use: 
\par 
\par sum(1,2); 
\par 
\par which simply throws away the result of adding 1 to 2. As this sort of thing offends some programmers you can use the data type void to indicate that a function doesn't return a value. For
\par example: 
\par 
\par void demo(); 
\par 
\par is a function with no parameters and no return value. 
\par 
\par void is an ANSI C standard data type. 
\par 
\par The break statement covered in a previous section can be used to exit a function. The break statement is usually linked with an if statement checking for a particular value. For example: 
\par 
\par if (x==1) break; 
\par 
\par If x contained 1 then the fuction would exit and return to the calling program. 
\par 
\par 
\par Functions and Prototypes:
\par 
\par Where should a function's definition go in relation to the entire program - before or after main()? The only requirement is that the function's type has to be known before it is actually used.
\par One way is to place the function definition earlier in the program than it is used - for example, before main(). The only problem is that most C programmers would rather put the main
\par program at the top of the program listing. The solution is to declare the function separately at the start of the program. For example:
\par 
\par 
\par  int sum();
\par  main()
\par   \{
\par    etc...
\par 
\par declares the name sum to be a function that returns an integer. As long as you declare functions before they are used you can put the actual definition anywhere you like.
\par 
\par By default if you don't declare a function before you use it then it is assumed to be an int function - which is usually, but not always, correct. It is worth getting into the habit of putting
\par function declarations at the start of your programs because this makes them easier to convert to full ANSI C. 
\par 
\par 
\par What is ANSI C?:
\par 
\par When C was first written the standard was set by its authors Kernighan and Ritche - hence "K&R C". In 1990, an international ANSI standard for C was established which differs from
\par K&AMPR C in a number of ways. 
\par 
\par The only really important difference is the use of function prototypes. To allow the compiler to check that you are using functions correctly ANSI C allows you to include a function
\par prototype which gives the type of the function and the type of each parameter before you define the function. For example, a prototype for the sum function would be: 
\par 
\par int sum(int,int); 
\par 
\par meaning sum is an int function which takes two int parameters. Obviously, if you are in the habit of declaring functions then this is a small modification. The only other major change is that
\par you can declare parameter types along with the function as in: 
\par 
\par int sum(int a, int b);
\par \{
\par 
\par rather than: 
\par 
\par int sum(a,b)
\par int a,b;
\par \{
\par 
\par was used in the original K&R C. Again, you can see that this is just a small change. Notice that even if you are using an ANSI compiler you don't have to use prototypes and the K&R
\par version of the code will work perfectly well. 
\par 
\par 
\par The Standard Library Functions:
\par 
\par Some of the "commands" in C are not really "commands" at all but are functions. For example, we have been using printf and scanf to do input and output, and we have used rand to
\par generate random numbers - all three are functions. 
\par 
\par There are a great many standard functions that are included with C compilers and while these are not really part of the language, in the sense that you can re-write them if you really want to,
\par most C programmers think of them as fixtures and fitings. Later in the course we will look into the mysteries of how C gains access to these standard functions and how we can extend the
\par range of the standard library. But for now a list of the most common libraries and a brief description of the most useful functions they contain follows: 
\par 
\par      stdio.h: I/O functions: 
\par           getchar() returns the next character typed on the keyboard. 
\par           putchar() outputs a single character to the screen. 
\par           printf() as previously described 
\par           scanf() as previously described 
\par 
\par      string.h: String functions 
\par           strcat() concatenates a copy of str2 to str1 
\par           strcmp() compares two strings 
\par           strcpy() copys contents of str2 to str1 
\par 
\par      ctype.h: Character functions 
\par           isdigit() returns non-0 if arg is digit 0 to 9 
\par           isalpha() returns non-0 if arg is a letter of the alphabet 
\par           isalnum() returns non-0 if arg is a letter or digit 
\par           islower() returns non-0 if arg is lowercase letter 
\par           isupper() returns non-0 if arg is uppercase letter 
\par 
\par      math.h: Mathematics functions 
\par           acos() returns arc cosine of arg 
\par           asin() returns arc sine of arg 
\par           atan() returns arc tangent of arg 
\par           cos() returns cosine of arg 
\par           exp() returns natural logarithim e 
\par           fabs() returns absolute value of num 
\par           sqrt() returns square root of num 
\par 
\par      time.h: Time and Date functions 
\par           time() returns current calender time of system 
\par           difftime() returns difference in secs between two times 
\par           clock() returns number of system clock cycles since program execution 
\par 
\par      stdlib.h:Miscellaneous functions 
\par           malloc() provides dynamic memory allocation, covered in future sections 
\par           rand() as already described previously 
\par           srand() used to set the starting point for rand() 
\par 
\par 
\par Throwing The Dice:
\par 
\par As an example of how to use functions, we conclude this section with a program that, while it isn't state of the art, does show that there are things you can already do with C. It also has to be
\par said that some parts of the program can be written more neatly with just a little more C - but that's for later. All the program does is to generate a random number in the range 1 to 6 and
\par displays a dice face with the appropriate pattern. 
\par 
\par The main program isn't difficult to write because we are going to adopt the traditional programmer's trick of assuming that any function needed already exists. This approach is called
\par stepwise refinement, and although its value as a programming method isn't clear cut, it still isn't a bad way of organising things: 
\par 
\par 
\par }{\lang1036\langfe1036\langnp1036 main()
\par  \{
\par    int r;
\par    char ans;
\par 
\par    ans = getans();
\par 
\par    }{while(ans== 'y')
\par     \{
\par       r = randn(6);
\par       blines(25);
\par       if (r==1) showone();
\par       if (r==2) showtwo();
\par       if (r==3) showthree();
\par       if (r==4) showfour();
\par       if (r==5) showfive();
\par       if (r==6) showsix();
\par       }{\lang1036\langfe1036\langnp1036 blines(21);
\par       ans = getans();
\par     }{\}
\par 
\par    blines(2);
\par  \}
\par 
\par 
\par If you look at main() you might be a bit mystified at first. It is clear that the list of if statements pick out one of the functions showone, showtwo etc. and so these must do the actual
\par printing of the dot patterns - but what is blines, what is getans and why are we using randn()? The last time we used a random number generator it was called rand()! 
\par 
\par The simple answers are that blines(n) will print n blank lines, getans() asks the user a question and waits for the single letter answer, and randn(n) is a new random number generator
\par function that produces a random integer in the range 1 to n - but to know this you would have written the main program. We decided what functions would make our task easier and named
\par them. The next step is to write the code to fill in the details of each of the functions. There is nothing to stop me assuming that other functions that would make my job easier already exist.
\par This is the main principle of stepwise refinement - never write any code if you can possibly invent another function! Let's start with randn(). 
\par 
\par This is obviously an int function and it can make use of the existing rand() function in the standard library 
\par 
\par 
\par int randn(int n)
\par  \{
\par    return rand()%n + 1;
\par  \}
\par 
\par 
\par The single line of the body of the function just returns the remainder of the random number after dividing by n - % is the remainder operator - plus 1. An alternative would be to use a
\par temporary variable to store the result and then return this value. You can also use functions within the body of other functions. 
\par 
\par Next getans() 
\par 
\par 
\par char getans()
\par  }{\lang1036\langfe1036\langnp1036 \{
\par    int ans;
\par 
\par    printf("Throw y/n ?");
\par    ans = -1;
\par    while (ans == -1)
\par     }{\{
\par       ans=getchar();
\par     \}
\par    return ans;
\par \}
\par 
\par 
\par This uses the standard int function getchar() which reads the next character from the keyboard and returns its ASCII code or -1 if there isn't a key pressed. This function tends to vary in
\par its behaviour according to the implementation you are using. Often it needs a carriage return pressed before it will return anything - so if you are using a different compiler and the program
\par just hangs, try pressing "y" followed the by Enter or Return key. 
\par 
\par The blines(n) function simply has to use a for loop to print the specified number of lines: 
\par 
\par 
\par  void blines(int n)
\par   \{
\par     int i;
\par 
\par     for(i=1 ; i<=n ; i++) printf("\\n");
\par   \}
\par 
\par 
\par Last but not least are the functions to print the dot patterns. These are just boring uses of printf to show different patterns. Each function prints exactly three lines of dots and uses blank
\par lines if necessary. The reason for this is that printing 25 blank lines should clear a standard text screen and after printing three lines printing 21 blank lines will scroll the pattern to the top of
\par the screen. If this doesn't happen on your machine make sure you are using a 29 line text mode display. 
\par 
\par 
\par  void showone()
\par   \{
\par     printf("\\n * \\n");
\par   \}
\par 
\par  void showtwo()
\par   \{
\par     printf(" * \\n\\n");
\par     printf(" * \\n");
\par   \}
\par 
\par  void showthree()
\par   \{
\par     printf(" *  \\n");
\par     printf("  * \\n");
\par     printf("   *\\n");
\par   \}
\par 
\par  void showfour()
\par   \{
\par     printf(" * * \\n\\n");
\par     printf(" * * \\n");
\par   \}
\par 
\par  void showfive()
\par   \{
\par     printf(" * * \\n");
\par     printf("  *  \\n");
\par     printf(" * * \\n");
\par   \}
\par 
\par  void showsix()
\par   \{
\par     int i;
\par 
\par     for(i=1 ; i>=3 ; i++) printf(" * * \\n");
\par   \}
\par 
\par 
\par The only excitment in all of this is the use of a for loop in showsix! Type this all in and add: 
\par 
\par 
\par  void showone();
\par  void showtwo();
\par  void showthree();
\par  void showfour();
\par  void showfive();
\par  void showsix();
\par  }{\lang1036\langfe1036\langnp1036 int randn();
\par  char getans();
\par  }{void blines();
\par 
\par before the main function if you type the other functions in after. 
\par 
\par Once you have the program working try modifying it. For example, see if you can improve the look of the pattems. You might also see if you can reduce the number of showx functions in
\par use - the key is that the patterns are built up of combinations of two honzontal dots and one centered dot. Best of luck.
\par \page }{\super #{\footnote\ftnalt \pard\plain \s30\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs20\lang1036\langfe1033\cgrid\langnp1036\langfenp1033 {\lang1033\langfe1033\langnp1033 #}{\cs89\fs24\up6\lang1033\langfe1033\langnp1033 \tab }{
\f1\lang1031\langfe1033\langnp1031 Topic68}}}{\cs89\fs24\up6\lang1033\langfe1033\super\langfenp1033 ${\footnote\ftnalt \pard\plain \s30\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs20\lang1036\langfe1033\cgrid\langnp1036\langfenp1033 {
\lang1033\langfe1033\langnp1033 $}{\cs89\fs24\up6\lang1033\langfe1033\langnp1033 \tab }{\f1\lang1031\langfe1033\langnp1031 Data Types - Part II}}}{\fs28 Data Types Part II }{
\par 
\par 
\par Objectives:
\par 
\par So far we have looked at local variable now we switch our attension to other types of variables supported by the C programming language: 
\par 
\par    1.Global Variables 
\par    2.Constant Data Types 
\par 
\par 
\par Global variables:
\par 
\par Variables can be declared as either local variables which can be used inside the function it has been declared in (more on this in further sections) and global variables which are known
\par throughout the entire program. Global variables are created by declaring them outside any function. For example:
\par 
\par 
\par  int max;
\par 
\par  main()
\par   \{
\par     .....
\par   \}
\par  f1()
\par   \{
\par     .....
\par   \}
\par 
\par 
\par The int max can be used in both main and function f1 and any changes made to it will remain consistent for both functions.The understanding of this will become clearer when you have
\par studied the section on functions but I felt I couldn't complete a section on data types without mentioning global and local variables. 
\par 
\par 
\par Constant Data Types:
\par 
\par Constants refer to fixed values that may not be altered by the program. All the data types we have previously covered can be defined as constant data types if we so wish to do so. The
\par constant data types must be defined before the main function. The format is as follows: 
\par 
\par #define CONSTANTNAME value 
\par 
\par for example: 
\par 
\par #define SALESTAX 0.05 
\par 
\par The constant name is normally written in capitals and does not have a semi-colon at the end. The use of constants is mainly for making your programs easier to be understood and modified
\par by others and yourself in the future. An example program now follows: 
\par 
\par 
\par #define SALESTAX 0.05
\par #include <stdio.h>
\par main()
\par  \{
\par    float amount, taxes, total;
\par    printf("Enter the amount purchased : ");
\par    scanf("%f",&amount);
\par    taxes = SALESTAX*amount;
\par    printf("The sales tax is \'a3%4.2f",taxes);
\par    printf("\\n The total bill is \'a3%5.2f",total);
\par  \}
\par 
\par 
\par The float constant SALESTAX is defined with value 0.05. Three float variables are declared amount, taxes and total. Display message to the screen is archieved using printf and user
\par input handled by scanf. Calculation is then performed and results sent to the screen. If the value of SALESTAX alters in the future it is very easy to change the value where it is defined rather
\par than go through the whole program changing the indivual values separately, which would be very time consuming in a large program with several references. The program is also improved
\par when using constants rather than values as it improves the clarity.
\par 
\par 
\par \page }{\super #{\footnote\ftnalt \pard\plain \s30\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs20\lang1036\langfe1033\cgrid\langnp1036\langfenp1033 {\lang1033\langfe1033\langnp1033 #}{\cs89\fs24\up6\lang1033\langfe1033\langnp1033 \tab }{
\f1\lang1031\langfe1033\langnp1031 Topic69}}}{\cs89\fs24\up6\lang1033\langfe1033\super\langfenp1033 ${\footnote\ftnalt \pard\plain \s30\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs20\lang1036\langfe1033\cgrid\langnp1036\langfenp1033 {
\lang1033\langfe1033\langnp1033 $}{\cs89\fs24\up6\lang1033\langfe1033\langnp1033 \tab }{\f1\lang1031\langfe1033\langnp1031 Arrays}}}{\fs28 Arrays}{
\par 
\par 
\par Objectives:
\par 
\par Having read this section you should have a good understanding of the use of arrays in C. 
\par 
\par 
\par Advanced Data Types:
\par 
\par Programming in any language takes a quite significant leap forwards as soon as you learn about more advanced data types - arrays and strings of characters. In C there is also a third
\par more general and even more powerful advanced data type - the pointer but more about that later. In this section we introduce the array, but the first question is, why bother? 
\par 
\par There are times when we need to store a complete list of numbers or other data items. You could do this by creating as many individual variables as would be needed for the job, but this is
\par a hard and tedious process. For example, suppose you want to read in five numbers and print them out in reverse order. You could do it the hard way as: 
\par 
\par main()
\par \{
\par  int al,a2,a3,a4,a5;
\par  scanf("%d %d %d %d %d",&a1,&a2,&a3,&a4,&a5);
\par  printf("%d %d %d %d %d'',a5,a4,a3,a2,a1);
\par \}
\par 
\par 
\par Doesn't look very pretty does it, and what if the problem was to read in 100 or more values and print them in reverse order? Of course the clue to the solution is the use of the regular
\par variable names a1, a2 and so on. What we would really like to do is to use a name like a[i] where i is a variable which specifies which particular value we are working with. This is the
\par basic idea of an array and nearly all programming languages provide this sort of facility - only the details alter. 
\par 
\par In the case of C you have to declare an array before you use it - in the same way you have to declare any sort of variable. For example, 
\par 
\par int a[5]; 
\par 
\par declares an array called a with five elements. Just to confuse matters a little the first element is a[0] and the last a[4]. C programmer's always start counting at zero! Languages vary
\par according to where they start numbering arrays. Less technical, i.e. simpler, languages start counting from 1 and more technical ones usually start counting from 0. Anyway, in the case of C
\par you have to remember that 
\par 
\par type array[size] 
\par 
\par declares an array of the specified type and with size elements. The first array element is array[0] and the last is array[size-1]. 
\par 
\par Using an array, the problem of reading in and printing out a set of values in reverse order becomes simple: 
\par 
\par               
\par 
\par  main()
\par   \{
\par    int a[5];
\par    int i;
\par    for(i =0;i < 5; ++i) scanf("%d",&a[i]);
\par    for(i =4;i> =0;--i) printf("%d",a[i]);
\par   \}
\par 
\par 
\par Well we said simple but I have to admit that the pair of for loops looks a bit intimidating. The for loop and the array data type were more or less made for each other. The for loop can be
\par used to generate a sequence of values to pick out and process each element in an array in turn. Once you start using arrays, for loops like: 
\par 
\par for (i=0 ; i<5 ; ++i) 
\par 
\par to generate values in the order 0,1,2 and so forth, and 
\par 
\par for(i=4;i>=0;--i) 
\par 
\par to generate values in the order 4,3,2... become very familiar. 
\par 
\par 
\par In Dis-array:
\par 
\par An array of character variables is in no way different from an array of numeric variables, but programmers often like to think about them in a different way. For example, if you want to read
\par in and reverse five characters you could use: 
\par 
\par 
\par  main()
\par   \{
\par    char a[5];
\par    int i;
\par    for(i=0; i<5; ++i) scanf("%c",&a[i]);
\par    for(i=4;i>=0;--i) printf("%c",a[i]);
\par   \}
\par 
\par 
\par Notice that the only difference, is the declared type of the array and the %c used to specify that the data is to be interpreted as a character in scanf and printf. The trouble with character
\par arrays is that to use them as if they were text strings you have to remember how many characters they hold. In other words, if you declare a character array 40 elements long and store H E L
\par L O in it you need to remember that after element 4 the array is empty. This is such a nuisance that C uses the simple convention that the end of a string of characters is marked by a null
\par character. A null character is, as you might expect, the character with ASCII code 0. If you want to store the null character in a character variable you can use the notation \\0 - but most
\par of the time you don't have to actually use the null character. The reason is that C will automatically add a null character and store each character in a separate element when you use a
\par string constant. A string constant is indicated by double quotes as opposed to a character constant which is indicated by a single quote. For example: 
\par 
\par "A" 
\par 
\par is a string constant, but 
\par 
\par 'A' 
\par 
\par is a character constant. The difference between these two superficially similar types of text is confusing at first and the source of many errors. All you have to remember is that &QUOTA"
\par consists of two characters, the letter A followed by \\0 whereas 'A' is just the single character A. If you are familiar with other languages you might think that you could assign string constants
\par to character arrays and work as if a string was a built-in data type. In C however the fundamental data type is the array and strings are very much grafted on. For example, if you try
\par something like: 
\par 
\par 
\par char name[40];
\par name="Hello"
\par 
\par 
\par it will not work. However, you can print strings using printf and read them into character arrays using scanf. For example, 
\par 
\par 
\par  main()
\par   \{
\par 
\par     static char name[40] ="hello";
\par 
\par     printf("%s",name);
\par     scanf("%s",name);
\par     printf("%s",name);
\par    \}
\par 
\par 
\par This program reads in the text that you type, terminating it with a null and stores it in the character array name. It then prints the character array treating it as a string, i.e. stopping when it hits
\par the first null string. Notice the use of the "%s" format descriptor in scanf and printf to specify that what is being printed is a string. 
\par 
\par At this point the way that strings work and how they can be made a bit more useful and natural depends on understanding pointers which is covered in the next section.
\par 
\par 
\par \page }{\super #{\footnote\ftnalt \pard\plain \s30\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs20\lang1036\langfe1033\cgrid\langnp1036\langfenp1033 {\lang1033\langfe1033\langnp1033 #}{\cs89\fs24\up6\lang1033\langfe1033\langnp1033 \tab }{
\f1\lang1031\langfe1033\langnp1031 Topic70}}}{\cs89\fs24\up6\lang1033\langfe1033\super\langfenp1033 ${\footnote\ftnalt \pard\plain \s30\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs20\lang1036\langfe1033\cgrid\langnp1036\langfenp1033 {
\lang1033\langfe1033\langnp1033 $}{\cs89\fs24\up6\lang1033\langfe1033\langnp1033 \tab }{\f1\lang1031\langfe1033\langnp1031 Pointers}}}{\fs28 Pointers}{
\par 
\par 
\par Objectives:
\par 
\par Having read this section you should be able to: 
\par 
\par    1.program using pointers 
\par    2.understand how C uses pointers with arrays 
\par 
\par 
\par Point to Point:
\par 
\par Pointers are a very powerful, but primitive facility contained in the C language. Pointers are a throwback to the days of low-level assembly language programming and as a result they are
\par sometimes difficult to understand and subject to subtle and difficult-to-find errors. Still it has to be admitted that pointers are one of the great attractions of the C language and there will be
\par many an experienced C programmer splutering and fuming at the idea that we would dare to refer to pointers as 'primitive'! 
\par 
\par In an ideal world we would avoid telling you about pointers until the very last minute, but without them many of the simpler aspects of C just don't make any sense at all. So, with apologies,
\par let's get on with pointers. 
\par 
\par A variable is an area of memory that has been given a name. For example: 
\par 
\par int x; 
\par 
\par is an area of memory that has been given the name x. The advantage of this scheme is that you can use the name to specify where to store data. For example: 
\par 
\par x=lO; 
\par 
\par is an instruction to store the data value 10 in the area of memory named x. The variable is such a fundamental idea that using it quickly becomes second nature, but there is another way of
\par working with memory. 
\par 
\par The computer access its own memory not by using variable names but by using a memory map with each location of memory uniquely defined by a number, called the address of that
\par memory location. 
\par 
\par A pointer is a variable that stores this location of memory. In more fundamental terms, a pointer stores the address of a variable . In more picturesque terms, a pointer points to a variable. 
\par 
\par A pointer has to be declared just like any other variable - remember a pointer is just a variable that stores an address. For example, 
\par 
\par int *p; 
\par 
\par is a pointer to an integer. Adding an asterisk in front of a variable's name declares it to be a pointer to the declared type. Notice that the asterisk applies only to the single variable name that it
\par is in front of, so: 
\par 
\par }{\lang1036\langfe1036\langnp1036 int *p , q; 
\par 
\par }{declares a pointer to an int and an int variable, not two pointers. 
\par 
\par Once you have declared a pointer variable you can begin using it like any other variable, but in practice you also need to know the meaning of two new operators: & and *. The & operator
\par returns the address of a variable. You can remember this easily because & is the 'A'mpersand character and it gets you the 'A'ddress. For example: 
\par 
\par int *p , q; 
\par 
\par declares p, a pointer to int, and q an int and the instruction: 
\par 
\par p=&q; 
\par 
\par stores the address of q in p. After this instruction you can think of p as pointing at q. Compare this to: 
\par 
\par p=q; 
\par 
\par which attempts to store the value in q in the pointer p - something which has to be considered an error. 
\par 
\par The second operator * is a little more difficult to understand. If you place * in front of a pointer variable then the result is the value stored in the variable pointed at. That is, p stores the
\par address, or pointer, to another variable and *p is the value stored in the variable that p points at. 
\par 
\par The * operator is called the dereferencing operator and it helps not to confuse it with multiplication or with its use in declaring a pointer. 
\par 
\par This multiple use of an operator is called operator overload. 
\par 
\par Confused? Well most C programmers are confused when they first meet pointers. There seems to be just too much to take in on first acquaintance. However there are only three basic ideas:
\par 
\par    1.To declare a pointer add an * in front of its name. 
\par    2.To obtain the address of a variable us & in front of its name. 
\par    3.To obtain the value of a variable use * in front of a pointer's name. 
\par 
\par Now see if you can work out what the following means: 
\par 
\par 
\par int *a , b , c;
\par b = 10;
\par a = &b;
\par c = *a;
\par 
\par 
\par Firstly three variables are declared - a (a pointer to int), and b and c (both standard integers). The instruction stores the value l0 in the varable b in the usual way. The first 'difficult'
\par instruction is a=&b which stores the address of b in a. After this a points to b. 
\par 
\par Finally c = *a stores the value in the varable pointed to by a in c. As a points to b, its value i.e. 1O is stored in c. In other words, this is a long winded way of writing 
\par 
\par c = b; 
\par 
\par Notice that if a is an int and p is a pointer to an int then 
\par 
\par a = p; 
\par 
\par is nonsense because it tries to store the address of an int, i.e. a pointer value, in an int. Similarly: 
\par 
\par a = &p; 
\par 
\par tries to store the address of a pointer variable in a and is equally wrong! The only assignment between an int and a pointer to int that makes sense is: 
\par 
\par a = *p; 
\par 
\par 
\par Swap Shop:
\par 
\par At the moment it looks as if pointers are just a complicated way of doing something we can already do by a simpler method. However, consider the following simple problem - write a
\par function which swaps the contents of two variables. That is, write swap(a,b) which will swaps over the contents of a and b. In principle this should be easy: 
\par 
\par 
\par function swap(int a , int b);
\par  \{
\par   int temp;
\par   temp = a;
\par   a    = b;
\par   b    = temp;
\par  \}
\par 
\par 
\par the only complication being the need to use a third variable temp to hold the value of a while the value of b overwrites it. However, if you try this function you will find that it doesn't work.
\par You can use it - swap(a,b); - until you are blue in the face, but it just will not change the values stored in a and b back in the calling program. The reason is that all parameters in C are
\par passed by value. That is, when you use swap(a,b) function the values in a and b are passed into the function swap via the parameters and any changes that are made to the parameters do
\par not alter a and b back in the main program. The function swap does swap over the values in a and b within the function, but doesn't do so in the main program. 
\par 
\par The solution to this very common problem is to pass not the values stored in the variables, but the addresses of the variables. The function can then use pointers to get at the values in the
\par variables in the main program and modify them. That is, the function should be: 
\par 
\par 
\par  function swap(int *a , int *b);
\par  \{
\par   int temp;
\par   temp = *a;
\par   *a   = *b;
\par   *b   = temp;
\par  \}
\par 
\par 
\par 
\par Notice that now the two parameters a and b are pointers and the assignments that effect the swap have to use the dereference operator to make sure that it is the values of the variables
\par pointed at that are swapped. You should have no difficulty with: 
\par 
\par temp = *a; 
\par 
\par this just stores the value pointed at by a into temp. However, 
\par 
\par *a = *b; 
\par 
\par is a little more unusual in that it stores that value pointed at by b in place of the value pointed at by a. There is one final complication. When you use swap you have to remember to pass the
\par addresses of the variables that you want to swap. That is not: 
\par 
\par swap(a,b) 
\par 
\par but 
\par 
\par swap(&a,&b) 
\par 
\par The rule is that whenever you want to pass a variable so that the function can modify its contents you have to pass it as an address. Equally the function has to be ready to accept an address
\par and work with it. You can't take any old function and suddenly decide to pass it the address of a variable instead of its value. If you pass an address to a function that isn't expecting it the
\par result is usually disaster and the same is true if you fail to pass an address to a function that is expecting one. 
\par 
\par For example, calling swap as swap(a,b) instead of swap(&a,&b) will result in two arbitrary areas of memory being swapped over, usually with the result that the entire system, not just
\par your program, crashes. 
\par 
\par The need to pass an address to a function also explains the difference between the two I/O functions that we have been using since the beginning of this course. printf doesn't change the
\par values of its parameters so it is called as printf("%d",a) but scanf does, because it is an input function, and so it is called as scanf("%d",&a). 
\par 
\par 
\par Pointers And Arrays:
\par 
\par In C there is a very close connection between pointers and arrays. In fact they are more or less one and the same thing! When you declare an array as: 
\par 
\par int a[10]; 
\par 
\par you are in fact declaring a pointer a to the first element in the array. That is, a is exactly the same as &a[0]. The only difference between a and a pointer variable is that the array name is a
\par constant pointer - you cannot change the location it points at. When you write an expression such as a[i] this is converted into a pointer expression that gives the value of the appropriate
\par element. To be more precise, a[i] is exactly equivalent to *(a+i) i.e. the value pointed at by a + i . In the same way *(a+ 1) is the same as a[1] and so on. 
\par 
\par Being able to add one to a pointer to get the next element of an array is a nice idea, but it does raise the question of what it means to add 'one' to a pointer. For example, in most
\par implementations an int takes two memory locations and a float takes four. So if you declare an int array and add one to a pointer to it, then in fact the pointer will move on by two
\par memory locations. However, if you declare a float array and add one to a pointer to it then the pointer has to move on by four memory locations. In other words, adding one to a pointer
\par moves it on by an amount of storage depending on the type it is a pointer to. 
\par 
\par This is, of course, precisely why you have to declare the type that the pointer is to point at! Only by knowing that a is a pointer to int and b is a pointer to float can the compiler figure out
\par that 
\par 
\par a + 1 
\par 
\par means move the pointer on by two memory locations i.e. add 2, and 
\par 
\par b + 1 
\par 
\par means move the pointer on by four memory locations i.e. add 4. In practice you don't have to worry about how much storage a pointer's base type takes up. All you do need to remember is
\par that pointer arithmetic works in units of the data type that the pointer points at. Notice that you can even use ++ and -- with a pointer, but not with an array name because this is a constant
\par pointer and cannot be changed. So to summarise: 
\par 
\par    1.An array's name is a constant pointer to the first element in the array that is a==&a[0] and *a==a[0]. 
\par    2.Array indexing is equivalent to pointer arithmetic - that is a+i=&a[i] and *(a+i)==a[i]. 
\par 
\par It is up to you whether you want to think about an array as an array or an area of storage associated with a constant pointer. The view of it as an array is the more sophisticated and the
\par further away from the underlying way that the machine works. The view as a pointer and pointer arithmetic is more primitive and closer to the hardware. In most cases the distinction is
\par irrelevant and purely a matter of taste. 
\par 
\par One final point connected with both arrays and functions is that when you pass an entire array to a function then by default you pass a pointer. This allows you to write functions that
\par process entire arrays without having to pass every single value stored in the array - just a pointer to the first element. However, it also temps you to write some very strange code unless you
\par keep a clear head. Try the following - write a function that will fill an array with random values randdat(a,n) where a is the array and n is its size. Your first attempt might be something
\par like: 
\par 
\par 
\par  void randdat(int *pa , int n)
\par   \{
\par    for (pa = 0 ; pa < n ; pa++ ) *pa = rand()%n + 1;
\par   \}
\par 
\par 
\par Well I hope your first attempt wouldn't be like this because it is wrong on a number of counts! The problem is that the idea of a pointer and the idea of an index have been confused. The
\par pointer pa is supposed to point to the first element of the array, but the for loop sets it to zero and then increments it though a series of memory locations nowhere near the array. A lesser
\par error is to suppose that n-1 is the correct final value of the array pointer! As before, you will be lucky if this program doesn't crash the system, let alone itself! The correct way of doing the
\par job is to use a for loop to step from 0 to n-1, but to use pointer arithmetic to access the correct array element: 
\par 
\par 
\par }{\lang1036\langfe1036\langnp1036 int randdat(int *pa , int n)
\par }{\{
\par   int i;
\par   for ( i=0 ; i< n ; ++i)
\par    }{\lang1036\langfe1036\langnp1036 \{
\par      *pa = rand()%n + 1;
\par      ++pa;
\par    }{\}
\par \}
\par 
\par 
\par Notice the way that the for loop looks just like the standard way of stepping through an array. If you want to make it look even more like indexing an array using a for loop you could
\par write: 
\par 
\par for(i=0 ; i<n ; ++i) *(pa+i)=rand()%n+1; 
\par 
\par or even: 
\par 
\par for(i=0 ; i<n ; ++i) pa[i]=rand()%n+1; 
\par 
\par In otherwords, as long as you define pa as a pointer you can use array indexing notation with it and it looks as if you have actually passed an array. You can even declare a pointer variable
\par using the notation: 
\par 
\par int pa[]; 
\par 
\par that is, as an array with no size information. In this way the illusion of passing an array to a function is complete.
\par 
\par 
\par \page }{\super #{\footnote\ftnalt \pard\plain \s30\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs20\lang1036\langfe1033\cgrid\langnp1036\langfenp1033 {\lang1033\langfe1033\langnp1033 #}{\cs89\fs24\up6\lang1033\langfe1033\langnp1033 \tab }{
\f1\lang1031\langfe1033\langnp1031 Topic71}}}{\cs89\fs24\up6\lang1033\langfe1033\super\langfenp1033 ${\footnote\ftnalt \pard\plain \s30\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs20\lang1036\langfe1033\cgrid\langnp1036\langfenp1033 {
\lang1033\langfe1033\langnp1033 $}{\cs89\fs24\up6\lang1033\langfe1033\langnp1033 \tab }{\f1\lang1031\langfe1033\langnp1031 Strings}}}{\fs28 Objectives}{
\par 
\par 
\par This section brings together the use of two of C's fundamental data types, ponters and arrays, in the use of handling strings. 
\par 
\par Having read this section you should be able to: 
\par 
\par    1.handle any string constant by storing it in an array. 
\par 
\par 
\par Stringing Along:
\par 
\par Now that we have mastered pointers and the relationship between arrays and pointers we can take a second look at strings. A string is just a character array with the convention that the
\par end of the valid data is marked by a null '\\0'. Now you should be able to see why you can read in a character string using scanf("%s", name) rather than scanf("%s",&name) - name is
\par already a pointer variable. Manipulating strings is very much a matter of pointers and special string functions. For example, the strlen(str) function returns the number of characters in the
\par string str. It does this simply by counting the number of characters up to the first null in the character array - so it is important that you are using a valid null-terminated string. Indeed this is
\par important with all of the C string functions. 
\par 
\par You might not think that you need a function to copy strings, but simple assignment between string variables doesn't work. For example: 
\par 
\par 
\par char a[l0],b[10];
\par b = a;
\par 
\par 
\par does not appear to make a copy of the characters in a, but this is an illusion. What actually happens is that the pointer b is set to point to the same set of characters that a points to, i.e. a
\par second copy of the string isn't created. 
\par 
\par To do this you need strcopy(a,b) which really does make a copy of every character in a in the array b up to the first null character. In a similar fashion strcat(a,b) adds the characters
\par in b to the end of the string stored in a. Finally there is the all-important strcmp(a,b) which compares the two strings character by character and returns true - that is 0 - if the results are
\par equal. 
\par 
\par Again notice that you can't compare strings using a==b because this just tests to see if the two pointers a and b are pointing to the same memory location. Of course if they are then the two
\par strings are the same, but it is still possible for two strings to be the same even if they are stored at different locations. 
\par 
\par You can see that you need to understand pointers to avoid making simple mistakes using strings. One last problem is how to initialise a character array to a string. You can't use: 
\par 
\par a = "hello"; 
\par 
\par because a is a pointer and "hello" is a string constant. However, you can use: 
\par 
\par strcopy(a,"hello") 
\par 
\par because a string constant is passed in exactly the same way as a string variable, i.e. as a pointer. If you are worried where the string constant is stored, the answer is in a special area of
\par memory along with all of the constants that the program uses. The main disadvantage of this method is that many compilers use an optimisation trick that results in only a single version of
\par identical constants being stored. For example: 
\par 
\par strcopy(b,"hello"); 
\par 
\par usually ends up with b pointing to the same string as a. In other words, this method isn't particularly safe! 
\par 
\par A much better method is to use array initialisation. You can specify constants to be used to initialise any variable when it is declared. For example: 
\par 
\par int a=10; 
\par 
\par declares a to be an integer and initialises it to 10. You can initialise an array using a similar notation. For example: 
\par 
\par int a[5] = \{1,2,3,4,5\}; 
\par 
\par declares an integer array and initialises it so that a[0]= 1, a[1] = 2 and so on. A character array can be initialised in the same way. For example: 
\par 
\par char a[5]=\{'h','e','l','l','o'\}; 
\par 
\par but a much better way is to write: 
\par 
\par char a[6]="hello"; 
\par 
\par which also automatically stores a null character at the end of the string - hence a[6] and not a[5]. If you really want to be lazy you can use: 
\par 
\par char a[] = "hello"; 
\par 
\par and let the compiler work out how many array elements are needed. Some compilers cannot cope with the idea of initialising a variable that doesn't exist for the entire life of the program. For
\par those compilers to make initialisation work you need to add the keyword static to the front of the string declaration, therefore: 
\par 
\par static char a[] = "hello"; 
\par 
\par 
\par As easy as... B or C?:
\par 
\par A few words of warning. If you are familiar with BASIC then you will have to treat C strings, and even C arrays, with some caution. They are not as easy or as obvious to use and writing a
\par program that manipulates text is harder in C than in BASIC. If you try to use C strings as if it were BASIC strings you are sure to create some very weird and wonderful bugs! 
\par 
\par 
\par A Sort Of Bubble Program:
\par 
\par This sections program implements a simple bubble sort - which is notorious for being one of the worst sorting methods known to programmer-kind, but it does have the advantage of being
\par easy and instructive. Some of the routines have already been described in the main text and a range of different methods of passing data in functions have also been used. 
\par 
\par The main routine is sort which repeats the scan function on the array until the variable done is set to 0. The scan function simply scans down the array comparing elements that are next
\par door to each other. If they are in the wrong order then function swap is called to swap them over. 
\par 
\par Study this program carefully with particular attention to the way arrays, array elements and variables are passed. It is worth saying that in some cases there are better ways of achieving the
\par same results. In particular, it would have been easier not to use the variable done, but to have returned the state as the result of the scan function. 
\par 
\par 
\par #include <stdio.h>
\par 
\par 
\par void randdat(int a[] , int n);
\par void sort(int a[] , int n);
\par void scan(int a[] , int n , int *done);
\par void swap(int *a ,int *b);
\par 
\par main()
\par  \{
\par    int i;
\par    int a[20];
\par 
\par    randdat(a , 20);
\par    sort(a , 20);
\par 
\par    for(i=0;i<20;++i) printf("%d\\n" ,a[i]);
\par  \}
\par 
\par void randdat(int a[1] , int n)
\par  \{
\par   int i;
\par   for (i=0 ; i<n ; ++i)
\par    a[i] = rand()%n+1;
\par  \}
\par 
\par void sort(int a[1] , int n)
\par  \{
\par   int done;
\par   done = 1;
\par   while(done == 1) scan(a , n , &done);
\par  \}
\par 
\par void scan(int a[1] , int n , int *done)
\par  \{
\par   int i;
\par   *done=0;
\par   for(i=0 ; i<n-1 ; ++i)
\par    \{
\par      if(a[i]<a[i+1])
\par       \{
\par        swap(&a[i],&a[i+1]);
\par        *done=1;
\par       \}
\par    \}
\par  \}
\par 
\par void swap(int *a ,int *b)
\par  \{      
\par   int temp;
\par   temp = *a;
\par   *a   = *b;
\par   *b   = temp;
\par  \}
\par 
\par 
\par \page }{\super #{\footnote\ftnalt \pard\plain \s30\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs20\lang1036\langfe1033\cgrid\langnp1036\langfenp1033 {\lang1033\langfe1033\langnp1033 #}{\cs89\fs24\up6\lang1033\langfe1033\langnp1033 \tab }{
\f1\lang1031\langfe1033\langnp1031 Topic72}}}{\cs89\fs24\up6\lang1033\langfe1033\super\langfenp1033 ${\footnote\ftnalt \pard\plain \s30\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs20\lang1036\langfe1033\cgrid\langnp1036\langfenp1033 {
\lang1033\langfe1033\langnp1033 $}{\cs89\fs24\up6\lang1033\langfe1033\langnp1033 \tab }{\f1\lang1031\langfe1033\langnp1031 Structures}}}{\fs28 Structures}{
\par 
\par 
\par Objectives:
\par 
\par This section contains some very advanced but important features of the C programming language. 
\par 
\par Having read this section you should be able to: 
\par 
\par    1.program using a structure rather than several arrays. 
\par    2.how pointer can be used in combination with structures to form linked list. 
\par 
\par 
\par Structures:
\par 
\par The array is an example of a data structure. It takes simple data types like int, char or double and organises them into a linear array of elements. The array serves most but not all of the
\par needs of the typical C program. The restriction is that an array is composed of elements all of the same type. At first this seems perfectly reasonable. After all why would you want an array
\par to be composed of twenty chars and two ints? Well this sort of mixture of data types working together is one of the most familiar of data structures. Consider for a moment a record card
\par which records name, age and salary. The name would have to be stored as a string, i.e. an array of chars terminated with an ASCII null character, and the age and salary could be ints. 
\par 
\par At the moment the only way we can work with this collection of data is as separate variables. This isn't as convenient as a single data structure using a single name and so the C language
\par provides struct. At first it is easier to think of this as a record - although it's a little more versatile than this suggests. 
\par 
\par 
\par Defining A New Type:
\par 
\par Declaring a struct is a two-stage process. The first stage defines a new data type that has the required structure which can then be used to declare as many variables with the same
\par structure as required. This two-stage process is often confusing at first - especially as it results in the need to think up multiple names with the same general meaning - but it really is quite
\par simple. For example, suppose we need to store a name, age and salary as a single structure. You would first define the new data type using: 
\par 
\par 
\par struct emprec
\par  \{
\par    char name[25];
\par    int age;
\par    int pay;
\par  \};
\par 
\par 
\par and then you would declare a new variable: 
\par 
\par struct emprec employee 
\par 
\par Notice that the new variable is called employee and it is of type emprec which has been defined earlier. You see what we mean about duplicating names - emprec is the name of the
\par general employee record structure and employee is a particular example of this general type. It might help to compare the situation with that of a general int type and a particular int
\par variable such as count - emprec is a type like int and employee is a variable like count. You can see that in general you can define a structure using: 
\par 
\par 
\par struct name
\par  \{
\par   list of component variables
\par  \};
\par 
\par 
\par and you can have as long a list of component variables as you need. Once defined you can declare as many examples of the new type as you like using: 
\par 
\par struct name list of variables; 
\par 
\par For example: 
\par 
\par struct emprec employee, oldemploy, newemploy; 
\par 
\par and so on. If you want to you can also declare a structure variable within the type definition by writing its name before the final semi-colon. For example: 
\par 
\par 
\par struct emprec
\par  \{
\par    char name[25];
\par    int age;
\par    int pay;
\par  \} employee;
\par 
\par 
\par defines the structure and declares a structure variable called employee. The only trouble with this form is that not many C programmers use it and many will even think that it is an error! So
\par how do we use a struct? 
\par 
\par When you first start working with arrays it seems obvious that you access the individual elements of the array using an index as in a[i] for the ith element of the array, but how to get at the
\par individual components of a structure? The answer is that you have to use qualified names. You first give the name of the structure variable and then the name of the component separated by a
\par dot. For example, given: 
\par 
\par struct emprec employee 
\par 
\par then: 
\par 
\par employee.age 
\par 
\par is an int and: 
\par 
\par employee.name 
\par 
\par is a char array. Once you have used a qualified name to get down to the level of a component then it behaves like a normal variable of the type. For example: 
\par 
\par employee.age=32; 
\par 
\par is a valid assignment to an int and: 
\par 
\par employee.name[2] = 'X'; 
\par 
\par is a valid assignment to an element of the char array. Notice that the qualified name uses the structure variable name and not the structure type name. You can also define a structure that
\par includes another structure as a component and of course that structure can contain another structure and so on. In this case you simply use the name of each structure in turn, separated by
\par dots, until you reach a final component that isn't a structure. For example, if you declare a struct firm which includes a component employee which is an emprec then: 
\par 
\par firm.employee.age 
\par 
\par is an int. You may be feeling a little disappointed at the way in which structures are used. When you first meet arrays it is obvious how useful they are because the array index is an integer
\par which can be used within a loop to process vast amounts of data in a few lines of code. When you first meet the struct it just doesn't have the same obvious advantages. Because you have
\par to write out a full qualified name to get at each of the components of the struct you can't automate the processing in the same way. However this is reasonable enough when you remember
\par that each component of a struct can be a different data type! The point is that the value of a struct is different to that of an array. A struct can be used to wrap up a group of variables
\par which form a coherent entity. 
\par 
\par For example, C has no facilities for manipulating complex numbers but this is easy enough to put right using a struct and a few functions. A complex number is composed of two parts - a
\par real and imaginary part - which can be implemented as single or double precision values. This suggests defining a new struct type: 
\par 
\par 
\par struct comp
\par  \{
\par    float real;
\par    float imag;
\par  \};
\par 
\par 
\par After this you can declare new complex variables using something like: 
\par 
\par struct comp a,b; 
\par 
\par The new complex variables cannot be used as if they were simple variables - because they are not. Most versions, of the C language do allow you to assign structures so you could write: 
\par 
\par a=b; 
\par 
\par as shorthand for 
\par 
\par 
\par  a.real=b.real;
\par  a.imag=b.imag;
\par 
\par 
\par Being able to assign structures is even more useful when they are bigger. However you can't expect C to sort out what you mean by c = a + b - for this you have to write out the rule for
\par addition as: 
\par 
\par 
\par  c.real=a.real+b.real;
\par  c.imag=a.imag+b.imag;
\par 
\par 
\par Structures and Functions:
\par 
\par Of course a sensible alternative to writing out the addition each time is to define a function to do the same job - but this raises the question of passing structures as parameters. Fortunately
\par this isn't a big problem. Most C compilers, will allow you to pass entire structures as parameters and return entire structures. As with all C parameters structures are passed by value and so if
\par you want to allow a function to alter a parameter you have to remember to pass a pointer to a struct. Given that you can pass and return structs the function is fairly easy: 
\par 
\par 
\par struct comp add(struct comp a , struct comp b)
\par \{
\par  struct comp c;
\par  c.real=a.real+b.real;
\par  c.imag=a.imag+ b.imag;
\par  return c;
\par \}
\par 
\par 
\par After you have defined the add function you can write a complex addition as: 
\par 
\par }{\lang1036\langfe1036\langnp1036 x=add(y,z) 
\par 
\par }{which isn't too far from the x=y+z that you would really like to use. Finally notice that passing a struct by value might use up rather a lot of memory as a complete copy of the structure is
\par made for the function. 
\par 
\par 
\par Pointers to Structures:
\par 
\par You can define a pointer to a structure in the same way as any pointer to any type. For example: 
\par 
\par struct emprec *ptr 
\par 
\par defines a pointer to an emprec. You can use a pointer to a struct in more or less the same way as any pointer but the use of qualified names makes it look slightly different For example: 
\par 
\par (*ptr).age 
\par 
\par is the age component of the emprec structure that ptr points at - i.e. an int. You need the brackets because '.' has a higher priority than '*'. The use of a pointer to a struct is so
\par common, and the pointer notation so ugly, that there is an equivalent and more elegant way of writing the same thing. You can use: 
\par 
\par prt->age 
\par 
\par to mean the same thing as (*ptr).age. The notation gives a clearer idea of what is going on - prt points (i.e. ->) to the structure and .age picks out which component of the structure we
\par want. Interestingly until C++ became popular the -> notation was relatively rare and given that many C text books hardly mentioned it this confused many experienced C programmers! 
\par 
\par There are many reasons for using a pointer to a struct but one is to make two way communication possible within functions. For example, an alternative way of writing the complex number
\par addition function is: 
\par 
\par 
\par void comp add(struct comp *a , struct comp *b , struct comp *c)
\par  \{
\par   c->real=a->real+b->real;
\par   c->imag=a->imag+b->imag;
\par  \}
\par 
\par 
\par In this case c is now a pointer to a comp struct and the function would be used as: 
\par 
\par }{\lang1036\langfe1036\langnp1036 add(&x,&y,&z); 
\par 
\par }{Notice that in this case the address of each of the structures is passed rather than a complete copy of the structure - hence the saving in space. Also notice that the function can now change
\par the values of x, y and z if it wants to. It's up to you to decide if this is a good thing or not! 
\par 
\par 
\par Malloc:
\par 
\par Now we come to a topic that is perhaps potentially the most confusing. So far we have allowed the C compiler to work out how to allocate storage. For example when you declare a
\par variable: 
\par 
\par int a; 
\par 
\par the compiler sorts out how to set aside some memory to store the integer. More impressive is the way that 
\par 
\par int a[50] 
\par 
\par sets aside enough storage for 50 ints and sets the name a to point to the first element. Clever though this may be it is just static storage. That is the storage is allocated by the compiler
\par before the program is run - but what can you do if you need or want to create new variables as your program is running? The answer is to use pointers and the malloc function. The
\par statement: 
\par 
\par ptr=malloc(size); 
\par 
\par reserves size bytes of storage and sets the pointer ptr to point to the start of it. This sounds excessively primitive - who wants a few bytes of storage and a pointer to it? You can make
\par malloc look a little more appealing with a few cosmetic changes. The first is that you can use the sizeof function to allocate storage in multiples of a given type. For example: 
\par 
\par sizeof(int) 
\par 
\par returns a number that specifies the number of bytes needed to store an int. Using sizeof you can allocate storage using malloc as: 
\par 
\par ptr= malloc(sizeof(int)*N) 
\par 
\par where N is the number of ints you want to create. The only problem is what does ptr point at? The compiler needs to know what the pointer points at so that it can do pointer arithmetic
\par correctly. In other words, the compiler can only interpret ptr++ or ptr=ptr+1 as an instruction to move on to the next int if it knows that the ptr is a pointer to an int. This works as
\par long as you define the ptr to be a pointer to the type of variable that you want to work with. Unfortunately this raises the question of how malloc knows what the type of the pointer
\par variable is - unfortunately it doesn't. 
\par 
\par To solve this problem you can use a TYPE cast. This C play on words is a mechanism to force a value to a specific type. All you have to do is write the TYPE specifier in brackets before
\par the value. So: 
\par 
\par ptr = (*int) malloc(sizeof(int)*N) 
\par 
\par forces the value returned by malloc to be a pointer to int. Now you can see how a simple idea ends up looking complicated. OK, so now we can acquire some memory while the
\par program is running, but how can we use it? There are some simple ways of using it and some very subtle mistakes that you can make in trying to use it! For example, suppose during a
\par program you suddenly decide that you need an int array with 50 elements. You didn't know this before the program started, perhaps because the information has just been typed in by the
\par user. The easiest solution is to use: 
\par 
\par int *ptr; 
\par 
\par and then later on: 
\par 
\par ptr = (*int) malloc(sizeof(int)*N) 
\par 
\par where N is the number of elements that you need. After this definition you can use ptr as if it was a conventional array. For example: 
\par 
\par ptr[i] 
\par 
\par is the ith element of the array. The trap waiting for you to make a mistake is when you need a few more elements of the array. You can't simply use malloc again to get the extra elements
\par because the block of memory that the next malloc allocates isn't necessarily next to the last lot. In other words, it might not simply tag on to the end of the first array and any assumption that
\par it does might end in the program simply overwriting areas of memory that it doesn't own. 
\par 
\par Another fun error that you are not protected against is losing an area of memory. If you use malloc to reserve memory it is vital that you don't lose the pointer to it. If you do then that
\par particular chunk of memory isn't available for your program to use until it is restarted. 
\par 
\par 
\par Structures and Linked Lists:
\par 
\par You may be wondering why malloc has been introduced right after the structure. The answer is that the dynamic allocation of memory and the struct go together a bit like the array and
\par the for loop. The best way to explain how this all fits together is via a simple example. You can use malloc to create as many variables as you want as the program runs, but how do you
\par keep track of them? For every new variable you create you also need an extra pointer to keep track of it. The solution to this otherwise tricky problem is to define a struct which has a
\par pointer as one of its components. For example: 
\par 
\par 
\par struct list
\par  \{
\par   int data;
\par   struct list *ptr;
\par  \};
\par 
\par 
\par This defines a structure which contains a single int and - something that looks almost paradoxical - a pointer to the structure that is being defined. All you really need to know is that this is
\par reasonable and it works. Now if you use malloc to create a new struct you also automatically get a new pointer to the struct. The final part of the solution is how to make use of the
\par pointers. If you start off with a single 'starter' pointer to the struct you can create the first new struct using malloc as: 
\par 
\par 
\par struct list *star;
\par start = (*struct list) malloc(sizeof(list))
\par 
\par 
\par After this start points to the first and only example of the struct. You can store data in the struct using statements like: 
\par 
\par start->data=value; 
\par 
\par The next step is to create a second example of the struct: 
\par 
\par start = (*struct list) malloc(sizeof(list)); 
\par 
\par This does indeed give us a new struct but we have now lost the original because the pointer to it has been overwritten by the pointer to the new struct. To avoid losing the original the
\par simplest solution is to use: 
\par 
\par 
\par struct list *start,newitem;
\par newitem = (*struct list) malloc(sizeof(list));
\par start->prt=start;
\par start=newitem;
\par 
\par 
\par This stores the location of the new struct in newitem. Then it stores the pointer to the existing struct into the newitem's pointer and sets the start of the list to be the newitem. Finally
\par the start of the list is set to point at the new struct. This procedure is repeated each time a new structure is created with the result that a linked list of structures is created. The pointer start
\par always points to the first struct in the list and the prt component of this struct points to the next and so on. You should be able to see how to write a program that examines or prints the
\par data in each of the structures. For example: 
\par 
\par 
\par thisptr=start;
\par while (1==1)
\par  \{
\par   printf("%d",thisprt-> data);
\par   thisprt=thisprt->prt;
\par  \}
\par 
\par 
\par This first sets thisptr to the start of the list, prints the data in the first element and then gets the pointer to the next struct in the list and so on. How does the program know it has reached
\par the end of the list? At the moment it just keeps going into the deep and uncharted regions of your machine's memory! To stop it we have to mark the end of the list using a null pointer.
\par Usually a pointer value of 0 is special in that it never occurs in a pointer pointing at a valid area of memory. You can use 0 to initialise a pointer so that you know it isn't pointing at anything
\par real. So all we have to do is set the last pointer in the list to 0 and then test for it That is: 
\par 
\par 
\par thisptr=start;
\par while (thisptr!=0)
\par  \{
\par   printf("%d",thisprt->data);
\par   thisprt=thisprt-> prt;
\par  \}
\par 
\par 
\par To be completely correct you should TYPE cast 0 to be a pointer to the struct in question. That is: 
\par 
\par while (thisptr!=(struct list*)0) 
\par 
\par By generally mucking about with pointers stored in the list you can rearrange it, access it, sort it, delete items and do anything you want to. Notice that the structures in the list can be as
\par complicated as you like and, subject to there being enough memory, you can create as many structures as you like. 
\par 
\par You can use the same sort of technique to create even more complicated list structures. For example you can introduce another pointer into each structure and a pointer to the end of the list
\par so that you can work your way along it in the other direction - a doubly linked list. You can create stacks, queues, deques, trees and so on. The rest of the story is a matter of either
\par inventing these data structures for yourself or looking them up in a suitable book. 
\par 
\par 
\par Structures and C++:
\par 
\par The reason why structures are even more important for today's budding C programmer is that they turn into classes in C++. A class is a structure where you can define components that are
\par functions. In this case the same distinction between a data TYPE and an example of the TYPE, i.e. a variable, is maintained only now the instances of the class include functions as well as
\par data. The same qualified naming system applies to the class and the use of pointers and the -> operator. As this is the basis of C++'s object-oriented features it is important to understand. 
\par 
\par 
\par Header Files:
\par 
\par The final mystery of C that needs to be discussed is the header file. This started off as a simple idea, a convenience to make programming easier. If you have a standard set of instructions
\par that you want to insert in a lot of programs that you are writing then you can do it using the #include statement. 
\par 
\par The # symbol at the start indicates that this isn't a C statement but one for the C pre-processor which looks at the text file before the compiler gets it. The #include tells the pre-processor
\par to read in a text file and treat it as if it was part of the program's text. For example: 
\par 
\par #include "copy.txt" 
\par 
\par could be used to include a copyright notice stored in the file copy.txt. However the most common use of the #include is to define constants and macros. The C pre-processor is almost
\par a language in its own right For example, if you define the identifier NULL as: 
\par 
\par #define NULL 0 
\par 
\par then whenever you use NULL in your program the pre-processor substitutes 0. In most cases you want these definitions to be included in all your programs and so the obvious thing to do is
\par to create a separate file that you can #include. 
\par 
\par This idea of using standard include files has spiralled out of all proportions. Now such include files are called header files and they are distinguished by ending in the extension .h. A header
\par file is generally used to define all of the functions, variables and constants contained in any function library that you might want to use. The header file stdio.h should be used if you want to
\par use the two standard I/O functions printf and scanf. The standard libraries have been covered in a previous section. 
\par 
\par This sort of use of header files is simple enough but over time more and more standard elements of the C environment have been moved into header files. The result is that header files
\par become increasingly mysterious to the beginner. Perhaps they reach their ultimate in complexity as part of the Windows development environment So many constants and macros are defined
\par in the Windows header files that they amount to hundreds of lines! As another example of how you could use a header file consider the complex structure defined earlier. At the moment it
\par looks messy to declare a new complex variable as: 
\par 
\par struct comp a,b; 
\par 
\par If you want to make the complex TYPE look like other data types all you need is a single #define 
\par 
\par #define COMPLEX struct comp 
\par 
\par After this you can write: 
\par 
\par COMPLEX a,b; 
\par 
\par and the pre-processor will automatically replace COMPLEX by struct comp for you when you compile the program. Put this #define and any others needed to make the complex number
\par type work and you have the makings of a complex.h header fileof your very own.
\par 
\par 
\par \page }{\super #{\footnote\ftnalt \pard\plain \s30\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs20\lang1036\langfe1033\cgrid\langnp1036\langfenp1033 {\lang1033\langfe1033\langnp1033 #}{\cs89\fs24\up6\lang1033\langfe1033\langnp1033 \tab }{
\f1\lang1031\langfe1033\langnp1031 Topic73}}}{\cs89\fs24\up6\lang1033\langfe1033\super\langfenp1033 ${\footnote\ftnalt \pard\plain \s30\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs20\lang1036\langfe1033\cgrid\langnp1036\langfenp1033 {
\lang1033\langfe1033\langnp1033 $}{\cs89\fs24\up6\lang1033\langfe1033\langnp1033 \tab }{\f1\lang1031\langfe1033\langnp1031 File Handling}}}{\fs28 File Handling}{
\par  
\par 
\par Objectives:
\par 
\par So far we have entered information into our programs via the computer's keyboard. This is somewhat laborious if we have a lot of data to process. The solution is to combine all the input
\par data into a file and let our C program read the information when it is required. 
\par 
\par Having read this section you should be able to: 
\par 
\par    1.open a file for reading or writing 
\par    2.read/write the contents of a file 
\par    3.close the file 
\par 
\par 
\par The Stream File:
\par 
\par Although C does not have any built-in method of performing file I/O, the C standard library contains a very rich set of I/O functions providing an efficient, powerful and flexible approach.
\par We will cover the ANSI file system but it must be mentioned that a second file system based upon the original UNIX system is also used but not covered on this course.
\par 
\par A very important concept in C is the stream. In C, the stream is a common, logical interface to the various devices that comprise the computer. In its most common form, a stream is a
\par logical interface to a file. As C defines the term "file", it can refer to a disk file, the screen, the keyboard, a port, a file on tape, and so on. Although files differ in form and capabilities, all
\par streams are the same. The stream provides a consistent interface and to the programmer one hardware device will look much like another.
\par 
\par A stream is linked to a file using an open operation. A stream is disassociated from a file using a close operation. The current location, also refered to as the current position, is the
\par location in a file where the next file access will occur. There are two types of streams: text (used with ASCII characters some character translation takes place, may not be one-to-one
\par correspondence between stream and whats in the file) and binary (used with any type of data, no character translation, one-to-one between stream and file).
\par 
\par To open a file and associate it with a stream, use fopen(). Its prototype is shown here:
\par 
\par FILE *fopen(char *fname,char *mode);
\par 
\par The fopen() function, like all the file-system functions, uses the header stdio.h . The name of the file to open is pointed to by fname (must be a valid name). The string pointed at for
\par mode determines how the file may be accesed as shown:
\par 
\par Mode                      Meaning
\par 
\par r                  Open a text file for reading
\par w                  Create a text file for writing
\par a                  Append to a text file
\par rb                 Open a binary file for reading
\par wb                 Open a binary file for writing
\par ab                 Append to a binary file
\par r+                 Open a text file for read/write
\par w+                 Create a text file for read/write
\par a+                 Append or create a text file for read/write
\par r+b                Open a binary file for read/write
\par w+b                Create a binary file for read/write
\par a+b                Append a binary file for read/write
\par 
\par 
\par If the open operation is successful, fopen() returns a valid file pointer. The type FILE is defined in stdio.h. It is a structure that holds various kinds of information about the file, such
\par as size.The file pointer will be used with all other functions that operate on the file and it must never be altered or the object it points to. If fopen() fails it returns a NULL pointer so
\par this must always be checked for when opening a file. For example:
\par 
\par FILE *fp;
\par 
\par if ((fp = fopen("myfile", "r")) ==NULL)\{
\par   printf("Error opening file\\n");
\par   exit(1); 
\par \}
\par 
\par To close a file, use fclose(), whose prototype is
\par 
\par int fclose(FILE *fp);
\par 
\par The fclose() function closes the file associated with fp, which must be a valid file pointer previously obtained using fopen(), and disassociates the stream from the file. The
\par fclose() function returns 0 if successful and EOF (end of file) if an error occurs.
\par 
\par Once a file has been opened, depending upon its mode, you may read and/or write bytes to or from it using these two functions.
\par 
\par }{\lang1036\langfe1036\langnp1036 int fgetc(FILE *fp);
\par }{int fputc(int ch, FILE *fp);
\par 
\par The getc() function reads the next byte from the file and returns its as an integer and if error occurs returns EOF. The getc() function also returns EOF when the end of file is reached. Your
\par routine can assign fget()'s return value to a char you dont't have to assign it to an integer.
\par 
\par The fput() function writes the bytes contained in ch to the file associated with fp as an unsigned char. Although ch is defined as an int, you may call it using simply a char. The fput()
\par function returns the character written if successful or EOF if an error occurs. 
\par 
\par 
\par Text File Functions:
\par 
\par When working with text files, C provides four functions which make file operations easier. The first two are called fputs() and fgets(), which write or read a string from a file,
\par respectively. Their prototypes are:
\par 
\par int fputs(char *str,FILE *fp);
\par char *fgets(char *str, int num, FILE *fp);
\par 
\par The fputs() function writes the string pointed to by str to the file associated with fp. It returns EOF if an error occurs and a non-negative value if successful. The null that terminates str is
\par not written and it does not automatically append a carriage return/linefeed sequence.
\par 
\par The fget() function reads characters from the file associated with fp into a string pointed to by str until num-1 characters have been read, a newline character is encountered, or the end of
\par the file is reached. The string is null-terminated and the newline character is retained. The function returns str if successful and a null pointer if an error occurs.
\par 
\par The other two file handling functions to be covered are fprintf() and fscanf(). These functions operate exactly like printf() and scanf() except that they work with files. Their
\par prototypes are:
\par 
\par int fprintf(FILE *fp, char *control-string, ...);
\par int fscanf(FILE *fp, char *control-string ...);
\par 
\par Instead of directing their I/O operations to the console, these functions operate on the file specified by fp. Otherwise their operations are the same as their console-based relatives. The
\par advantages to fprintf() and fscanf() is that they make it very easy to write a wide variety of data to a file using a text format. 
\par 
\par 
\par Binary File Functions:
\par 
\par The C file system includes two important functions: fread() and fwrite(). These functions can read and write any type of data, using any kind of representation. Their prototypes are:
\par 
\par size_t fread(void *buffer, size_t size, size_t num,FILE *fp);
\par size_t fwrite(void *buffer, size_t size, size_t num, FILE *fp);
\par 
\par The fread() function reads from the file associated with fp, num number of objects, each object size bytes long, into buffer pointed to by buffer. It returns the number of objects actually
\par read. If this value is 0, no objects have been read, and either end of file has been encountered or an error has occurred. You can use feof() or ferror() to find out which. Their
\par prototypes are:
\par 
\par int feof(FILE *fp);
\par int ferror(FILE *fp);
\par 
\par The feof() function returns non-0 if the file associated with fp has reached the end of file, otherwise it returns 0. This function works for both binary files and text files. The ferror()
\par function returns non-0 if the file associated with fp has experienced an error, otherwise it returns 0. 
\par 
\par The fwrite() function is the opposite of fread(). It writes to file associated with fp, num number of objects, each object size bytes long, from the buffer pointed to by buffer. It returns
\par the number of objects written. This value will be less than num only if an output error as occurred.
\par 
\par The void pointer is a pointer that can point to any type of data without the use of a TYPE cast (known as a generic pointer). The type size_t is a variable that is able to hold a value equal
\par to the size of the largest object surported by the compiler. As a simple example, this program write an integer value to a file called MYFILE using its internal, binary representation.
\par 
\par 
\par #include <stdio.h>  /* header file  */
\par #include <stdlib.h>
\par void main(void)
\par \{
\par 
\par  FILE *fp;   /* file pointer */
\par  int i;
\par 
\par  /* open file for output */
\par  if ((fp = fopen("myfile", "w"))==NULL)\{
\par   printf("Cannot open file \\n");
\par   exit(1);
\par  \}
\par  i=100;
\par 
\par  if (fwrite(&i, 2, 1, fp) !=1)\{
\par   printf("Write error occurred");
\par   exit(1);
\par  \}
\par  fclose(fp);
\par 
\par  /* open file for input */
\par  if ((fp =fopen("myfile", "r"))==NULL)\{
\par   printf("Read error occurred");
\par   exit(1);
\par  \}
\par  printf("i is %d",i);
\par  fclose(fp);
\par \}
\par 
\par 
\par File System Functions:
\par 
\par You can erase a file using remove(). Its prototype is
\par 
\par int remove(char *file-name);
\par 
\par You can position a file's current location to the start of the file using rewind(). Its prototype is
\par 
\par void rewind(FILE *fp);
\par 
\par Hopefully I have given you enough information to at least get you started with files. Its really rather easy once you get started. 
\par 
\par 
\par Command Line Parameters:
\par 
\par Many programs allow command-line arguments to be specified when they are run. A command-line argument is the information that follows the program's name on the command line of the
\par operating system. Command-line arguments are used to pass information to the program. For example, when you use a text editor, you probably specify the name of the file you want to edit
\par after the name of the word processing program. For example, if you use a word processor called WP, then this line causes the file TEST to be edited.
\par 
\par WP TEST 
\par 
\par Here, TEST is a command-line argument. Your C programs may also utilize command-line arguments. These are passed to a C program through two arguments to the main() function. The
\par parameters are called argc and argv. These parameters are optional and are not used when no command-line arguments are being used. 
\par 
\par The argc parameter holds the number of arguments on the command-line and is an integer. It will always be at least 1 because the name of the program qualifies as the first argument. The
\par argv parameter is an array of string pointers. The most common method for declaring argv is shown here. 
\par 
\par char *argv[]; 
\par 
\par The empty brackets indicate that it is an array of undetermined length. All command-line arguments are passed to main() as strings. To access an indivual string, index argv. For example,
\par argv[0] points to the program's name and argv[1] points to the first argument. This program displays all the command-line arguments that it is called with.
\par 
\par #include <stdio.h>
\par 
\par void main(int argc, char *argv[])
\par \{
\par  int i;
\par 
\par  for (i=1; i&ltargc; i++) printf("%s",argv[i]);
\par \}
\par 
\par The ANSI C standard does not specify what constitutes a command-line argument, because operatoring systems vary considerably on this point. However, the most common convention is
\par as follows:
\par 
\par Each command-line argument must be separated by a space or a tab character. Commas, semicolons, and the like are not considered separators. For example:
\par 
\par This is a test
\par 
\par is made up of four strings, but
\par 
\par this,that,and,another
\par 
\par is one string. If you need to pass a command-line argument that does, in fact contain spaces, you must place it between quotes, as shown in this example:
\par 
\par "this is a test"
\par 
\par A further example of the use of argc and argv now follows: 
\par 
\par void main(int argc, char *argv[])
\par \{
\par   if (argc !=2)  \{
\par      printf("Specify a password");
\par      exit(1);
\par   \}
\par   if (!strcmp(argv[1], "password"))
\par      printf("Access Permitted");
\par   else 
\par     \{
\par        printf("Access denied");
\par        exit(1);
\par     \}
\par program code here ......
\par \}
\par 
\par This program only allows access to its code if the correct password is entered as a command-line argument. There are many uses for command-line arguments and they can be a powerful
\par tool.
\par 
\par My final example program takes two command-line arguments. The first is the name of a file, the second is a character. The program searches the specified file, looking for the character. If
\par the file contains at least one of these characters, it reports this fact. This program uses argv to access the file name and the character for which to search.
\par 
\par /*Search specified file for specified character. */
\par 
\par #include <stdio.h>
\par #include <stdlib.h>
\par 
\par void main(int argc, char *argv[])
\par \{
\par   FILE *fp;   /* file pointer */
\par   char ch;
\par 
\par   /* see if correct number of command line arguments */
\par    if(argc !=3)  \{
\par      printf("Usage: find <filename> <ch>\\n");
\par      exit(1);
\par    \}
\par 
\par    /* open file for input */
\par    if ((fp = fopen(argv[1], "r"))==NULL)  \{
\par      printf("Cannot open file \\n");
\par      exit(1);
\par    \}
\par 
\par   /* look for character */
\par   while ((ch = getc(fp)) !=EOF)  /* where getc() is a */
\par     if (ch== *argv[2]) \{         /*function to get one char*/
\par       printf("%c found",ch);     /* from the file */
\par       break;
\par     \}
\par    fclose(fp);
\par \}
\par 
\par 
\par The names of argv and argc are arbitrary - you can use any names you like. However, argc and argv have traditionally been used since C's origin. It is a good idea to use these names so
\par that anyone reading your program can quickly identify them as command-line parameters.
\par 
\par 
\par \page }{\super #{\footnote\ftnalt \pard\plain \s30\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs20\lang1036\langfe1033\cgrid\langnp1036\langfenp1033 {\lang1033\langfe1033\langnp1033 #}{\cs89\fs24\up6\lang1033\langfe1033\langnp1033 \tab }{
\f1\lang1031\langfe1033\langnp1031 Topic74}}}{\cs89\fs24\up6\lang1033\langfe1033\super\langfenp1033 ${\footnote\ftnalt \pard\plain \s30\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs20\lang1036\langfe1033\cgrid\langnp1036\langfenp1033 {
\lang1033\langfe1033\langnp1033 $}{\cs89\fs24\up6\lang1033\langfe1033\langnp1033 \tab }{\f1\lang1031\langfe1033\langnp1031 Recommended Books}}}{\fs28 Recommended Books}{
\par 
\par 
\par It is always difficult to recommend books for any course and none more so that a C programming course - there are plenty of book to chose from. It is important to get a book that suits
\par your reading style and also provides you with plenty of worked examples.
\par 
\par A suggested reading list is as follows:
\par 
\par }{\b Title:}{The C Programming Language ANSI C Version
\par }{\b Author:}{Kernighan & Ritchie
\par }{\b Publisher:}{Prentice Hall Software Series
\par }{\b ISBN:}{0-13-110362-8
\par }{\b Comment:}{Ideal reference book and goes well beyond the level of this course. It is expensive but the serious C programmer will kick themself if they don't buy this book. 
\par 
\par }{\b Title:}{ANSI C - Made Easy
\par }{\b Author:}{Herbert Schildt
\par }{\b Publisher:}{Osborne McGraw-Hill
\par }{\b ISBN:}{0-07-881500-2
\par Comment: 
\par 
\par }{\b Title:}{Learning to Program in C
\par }{\b Author:}{N. Kantaris
\par Publisher: Babani
\par }{\b ISBN:}{0-85934-203-4
\par }{\b Comment:}{A good cheap beginners guide. 
\par 
\par }{\b Title:}{Illustrating ANSI C
\par }{\b Author:}{Donald Alcock
\par }{\b Publisher:}{Cambridge University Press
\par }{\b ISBN:}{0-521-42483-6
\par }{\b Comment:}{A good book for the mathematically inclined. 
\par 
\par }{\b Title:}{C - The Complete Reference
\par }{\b Author:}{Herbert Schildt
\par }{\b Publisher:}{Osborne McGraw-Hill
\par }{\b ISBN:}{0-07-881263-1
\par Comment: 
\par 
\par }{\b Title:}{Numerical Recipies in C
\par }{\b Author:}{W.H.Press, et al
\par }{\b Comment:}{An advanced level book with, as the name implies, ready-made solutions to your programming problems.
\par 
\par 
\par \page }{\super #{\footnote\ftnalt \pard\plain \s30\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs20\lang1036\langfe1033\cgrid\langnp1036\langfenp1033 {\lang1033\langfe1033\langnp1033 #}{\cs89\fs24\up6\lang1033\langfe1033\langnp1033 \tab }{
\f1\lang1031\langfe1033\langnp1031 Topic76}}}{\cs89\fs24\up6\lang1033\langfe1033\super\langfenp1033 ${\footnote\ftnalt \pard\plain \s30\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs20\lang1036\langfe1033\cgrid\langnp1036\langfenp1033 {
\lang1033\langfe1033\langnp1033 $}{\cs89\fs24\up6\lang1033\langfe1033\langnp1033 \tab }{\f1\lang1031\langfe1033\langnp1031 Example Programs Database}}}{\f28\fs28 Objectives}{
\par 
\par This section is only for reference! It contains the following information: 
\par 
\par    1.Names of all C's Standard Libraries 
\par    2.The functions they contain 
\par 
\par 
\par Input and Output: <stdio.h>
\par 
\par FILE *fopen(const char *filename, const char *mode) 
\par FILE *freopen(const char *filename, const char *mode, FILE *stream) 
\par int fflush(FILE *stream) 
\par int fclose(FILE *stream) 
\par int remove(const char *filename) 
\par int rename(const char *oldname, const char *newname) 
\par FILE *tmpfile(void) 
\par char *tmpnam(char s[L_tmpnam]) 
\par int setvbuf(FILE *stream, char *buf, int mode, size_t size) 
\par void setbuf(FILE *stream, char *buf) 
\par int fprint(FILE *stream, const char *format, ...) 
\par int sprintf(char *s, const char *format, ...) 
\par }{\lang1036\langfe1036\langnp1036 vprintf(const char *format, va_list arg) 
\par vfprintf(FILE *stream, const char *format, va_list arg) 
\par vsprintf(char *s, const char *format, va_list arg) 
\par int fscanf(FILE *stream, const char *format, ...) 
\par }{int scanf(const char *format, ...) 
\par int sscanf(char *s, const char *format, ...) 
\par int fgetc(FILE *stream) 
\par char *fgets(char *s, int n, FILE *stream) 
\par int fputc(int c, FILE *stream) 
\par int fputs(const char *s, FILE *stream) 
\par int getc(FILE *stream) 
\par int getchar(void) 
\par char *gets(char *s) 
\par int putc(int c, FILE *stream) 
\par int putchar(int c) 
\par int ungetc(int c, FILE *stream) 
\par size_t fread(void *ptr, size_t size, size_t nobj, FILE *stream) 
\par size_t fwrite(const void *ptr, size_t size, size_t nobj, FILE *stream) 
\par int fseek(FILE *stream, long offset, int orogin) 
\par long ftell(FILE *stream) 
\par void rewind(FILE *stream) 
\par int fgetpos(FILE *stream, fpos_t *ptr) 
\par int fsetpos(FILE *stream, const fpos_t *ptr) 
\par void clearerr(FILE *stream) 
\par int feof(FILE *stream) 
\par int ferror(FILE *stream) 
\par void perror(const char *s) 
\par 
\par 
\par Character Class Tests: <ctype.h>
\par 
\par isalnum(c) 
\par isalpha(c) 
\par iscntrl(c) 
\par isdigit(c) 
\par isgraph(c) 
\par islower(c) 
\par isprint(c) 
\par ispunct(c) 
\par isspace(c) 
\par isupper(c) 
\par isxdigit(c) 
\par 
\par 
\par String Functions: <string.h>
\par 
\par char *strcpy(s , ct) 
\par char *strncpy(s , ct , n) 
\par char *strcat(s , ct) 
\par char *strncat(s , ct , n) 
\par int strcmp(cs , ct) 
\par int strncmp(cs , ct ,n) 
\par char *strchr(cs , c) 
\par char *strrchr(cs , c) 
\par size_t strspn(cs , ct) 
\par size_t strcspn(cs , ct) 
\par char *strstr(cs , ct) 
\par size_t strlen(cs) 
\par char *strerror(n) 
\par char *strtok(s , ct) 
\par 
\par 
\par Mathematical Functions: <math.h>
\par 
\par sin(x) 
\par cos(x) 
\par }{\lang1036\langfe1036\langnp1036 tan(x) 
\par asin(x) 
\par acos(x) 
\par atan(x) 
\par atan2(x) 
\par sinh(x) 
\par }{cosh(x) 
\par tanh(x) 
\par }{\lang1036\langfe1036\langnp1036 exp(x) 
\par log(x) 
\par log10(x) 
\par pow(x,y) 
\par sqrt(x) 
\par ceil(x) 
\par }{floor(x) 
\par fabs(x) 
\par ldexp(x) 
\par frexp(x,double *ip) 
\par }{\lang1036\langfe1036\langnp1036 modf(x,double *ip) 
\par fmod(x,y) 
\par 
\par 
\par }{Utility Functions: <stdlib.h>
\par 
\par double atof(const char *s) 
\par int atoi(const char *s 
\par long atol(const char *s) 
\par double strrod(const char *s, char **endp) 
\par long strtol(const char *s, char **endp, int base) 
\par unsigned long strtoul(const char *s, char **endp, int base) 
\par int rand(void) 
\par void srand(unsigned int seed) 
\par void *calloc(size_t nobj, size_t size) 
\par void *malloc(size_t size) 
\par void *realloc(void *p, size_t size) 
\par void free(void *p) 
\par void abort(void) 
\par void exit(int status) 
\par }{\lang1036\langfe1036\langnp1036 int atexit(void (*fcn)(void)) 
\par }{int system(const char *s) 
\par char *getenv(const char *name) 
\par void *bsearch(const void *key, const void *base, size_t n, size_t size, int (*cmp)(const void *keyval, const void *datum)) 
\par void qsort(void *base, size_t n, size_t size, int (*cmp)(const void *, const void *)) 
\par int abs(int n) 
\par long labs(long n) 
\par }{\lang1036\langfe1036\langnp1036 div_t div(int num, int denom) 
\par }{ldiv_t ldiv(long num , long denom) 
\par 
\par 
\par Diagnostics: <assert.h>
\par 
\par void assert(int expression) 
\par 
\par 
\par Non-local Jumps: <setjmp.h>
\par 
\par int setjmp(jmp_buf env) 
\par void longjmp(jmp_buf env, int val) 
\par 
\par 
\par }\pard\plain \s20\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\fs16 Signals: <signal.h>}{
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs16\lang1033\langfe1036\cgrid\langnp1033\langfenp1036 {
\par void (*signal(int sig, void (*handler)(int)))(int) 
\par 
\par 
\par Data and Time Functions: <time.h>
\par 
\par clock_t clock(void) 
\par time_t time(time_t , *tp 
\par double difftime(time_t time2 , time_t time1) 
\par time_t mktime(struct tm *tp) 
\par char *asctime(const time_t *tp) 
\par char *ctime(const time_t *tp) 
\par struct tm *gmtime(const time_t *tp) 
\par struct tm *localtime(const time_t *tp) 
\par size_t strftime(char *s, size_t smax, const char *fmt, const struct tm *tp)
\par 
\par 
\par 
\par 
\par 
\par \page }{\cs88\fs24\up6 #{\footnote \pard\plain \s20\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs88\up6 #}{\fs16  ID_SHORTCUTS}}${\footnote \pard\plain 
\s20\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs88\up6 $}{\fs16  Editor Shortcuts}}K{\footnote \pard\plain \s20\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 
\f11\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs88\up6 K}{\fs16  shortcuts;editor;}}}{\b\fs28\cf18 Editor Shortcuts}{
\par 
\par 
\par }\pard\plain \s22\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \b\f11\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\fs16 Cursor:}{
\par }\pard\plain \s20\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs16\lang1033\langfe1036\cgrid\langnp1033\langfenp1036 {These commands control how the cursor behaves.
\par 
\par }\trowd \trftsWidth1\trpaddl28\trpaddr28\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3 \clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth38 \cellx76\clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone 
\clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth3393 \cellx3469\clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth5975 \cellx9444\pard 
\ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {\cell Command\cell Description\cell }\pard \ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {\trowd \trftsWidth1\trpaddl28\trpaddr28\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3 \clvertalt\clbrdrt\brdrnone 
\clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth38 \cellx76\clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth3393 \cellx3469\clvertalt\clbrdrt\brdrnone 
\clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth5975 \cellx9444\row }\trowd \trftsWidth1\trpaddl28\trpaddr28\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3 \clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone 
\clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth38 \cellx76\clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth3393 \cellx3469\clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone 
\clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth5975 \cellx9444\pard \ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {\cell \cell \cell }\pard \ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {\trowd 
\trftsWidth1\trpaddl28\trpaddr28\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3 \clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth38 \cellx76\clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb
\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth3393 \cellx3469\clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth5975 \cellx9444\row }\pard 
\ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {\cell Left Arrow\cell Left one character\cell }\pard \ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {\trowd \trftsWidth1\trpaddl28\trpaddr28\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3 \clvertalt\clbrdrt
\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth38 \cellx76\clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth3393 \cellx3469\clvertalt\clbrdrt
\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth5975 \cellx9444\row }\pard \ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {\cell Right Arrow\cell Right one character\cell }\pard 
\ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {\trowd \trftsWidth1\trpaddl28\trpaddr28\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3 \clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth38 \cellx76
\clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth3393 \cellx3469\clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth5975 \cellx9444
\row }\pard \ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {\cell Up Arrow\cell Up one line\cell }\pard \ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {\trowd \trftsWidth1\trpaddl28\trpaddr28\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3 \clvertalt\clbrdrt
\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth38 \cellx76\clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth3393 \cellx3469\clvertalt\clbrdrt
\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth5975 \cellx9444\row }\pard \ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {\cell Down Arrow\cell Down one line\cell }\pard 
\ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {\trowd \trftsWidth1\trpaddl28\trpaddr28\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3 \clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth38 \cellx76
\clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth3393 \cellx3469\clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth5975 \cellx9444
\row }\pard \ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {\cell Control + Left\cell Left one word\cell }\pard \ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {\trowd \trftsWidth1\trpaddl28\trpaddr28\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3 \clvertalt
\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth38 \cellx76\clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth3393 \cellx3469\clvertalt
\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth5975 \cellx9444\row }\pard \ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {\cell Control + Right\cell Right one word\cell }\pard 
\ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {\trowd \trftsWidth1\trpaddl28\trpaddr28\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3 \clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth38 \cellx76
\clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth3393 \cellx3469\clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth5975 \cellx9444
\row }\pard \ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {\cell Home\cell Start of line\cell }\pard \ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {\trowd \trftsWidth1\trpaddl28\trpaddr28\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3 \clvertalt\clbrdrt
\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth38 \cellx76\clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth3393 \cellx3469\clvertalt\clbrdrt
\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth5975 \cellx9444\row }\pard \ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {\cell End\cell End of line\cell }\pard 
\ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {\trowd \trftsWidth1\trpaddl28\trpaddr28\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3 \clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth38 \cellx76
\clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth3393 \cellx3469\clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth5975 \cellx9444
\row }\pard \ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {\cell Page Up\cell Up one page\cell }\pard \ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {\trowd \trftsWidth1\trpaddl28\trpaddr28\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3 \clvertalt\clbrdrt
\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth38 \cellx76\clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth3393 \cellx3469\clvertalt\clbrdrt
\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth5975 \cellx9444\row }\pard \ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {\cell Page Down\cell Down one page\cell }\pard 
\ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {\trowd \trftsWidth1\trpaddl28\trpaddr28\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3 \clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth38 \cellx76
\clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth3393 \cellx3469\clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth5975 \cellx9444
\row }\pard \ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {\cell \cell Left one page\cell }\pard \ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {\trowd \trftsWidth1\trpaddl28\trpaddr28\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3 \clvertalt\clbrdrt
\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth38 \cellx76\clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth3393 \cellx3469\clvertalt\clbrdrt
\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth5975 \cellx9444\row }\pard \ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {\cell \cell Right one page\cell }\pard 
\ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {\trowd \trftsWidth1\trpaddl28\trpaddr28\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3 \clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth38 \cellx76
\clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth3393 \cellx3469\clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth5975 \cellx9444
\row }\pard \ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {\cell Control + Page Up\cell Top of age\cell }\pard \ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {\trowd \trftsWidth1\trpaddl28\trpaddr28\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3 \clvertalt
\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth38 \cellx76\clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth3393 \cellx3469\clvertalt
\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth5975 \cellx9444\row }\pard \ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {\cell Control + Page Down\cell Bottom of page\cell }\pard 
\ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {\trowd \trftsWidth1\trpaddl28\trpaddr28\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3 \clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth38 \cellx76
\clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth3393 \cellx3469\clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth5975 \cellx9444
\row }\pard \ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {\cell Control + Home\cell Abs begin\cell }\pard \ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {\trowd \trftsWidth1\trpaddl28\trpaddr28\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3 \clvertalt
\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth38 \cellx76\clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth3393 \cellx3469\clvertalt
\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth5975 \cellx9444\row }\pard \ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {\cell Control + End\cell Abs end\cell }\pard 
\ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {\trowd \trftsWidth1\trpaddl28\trpaddr28\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3 \clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth38 \cellx76
\clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth3393 \cellx3469\clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth5975 \cellx9444
\row }\trowd \trftsWidth1\trpaddl28\trpaddr28\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3 \clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth38 \cellx76\clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone 
\clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth3393 \cellx3469\clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth5975 \cellx9444\pard 
\ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {\cell \cell Move specified coordinates\cell }\pard \ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {\trowd \trftsWidth1\trpaddl28\trpaddr28\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3 \clvertalt\clbrdrt
\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth38 \cellx76\clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth3393 \cellx3469\clvertalt\clbrdrt
\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth5975 \cellx9444\row }\pard \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {
\par 
\par }\pard\plain \s22\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \b\f11\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\fs16 Selection:}{
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs16\lang1033\langfe1036\cgrid\langnp1033\langfenp1036 {
\par These commands control how the currently highlighted text behaves.
\par 
\par }\trowd \trftsWidth1\trpaddl28\trpaddr28\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3 \clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth3429 \cellx3429\clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone 
\clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth5977 \cellx9406\pard \ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {Command\cell Description\cell }\pard \ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {\trowd 
\trftsWidth1\trpaddl28\trpaddr28\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3 \clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth3429 \cellx3429\clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb
\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth5977 \cellx9406\row }\trowd \trftsWidth1\trpaddl28\trpaddr28\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3 \clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone 
\cltxlrtb\clftsWidth3\clwWidth3429 \cellx3429\clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth5977 \cellx9406\pard \ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {\cell \cell }\pard 
\ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {\trowd \trftsWidth1\trpaddl28\trpaddr28\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3 \clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth3429 
\cellx3429\clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth5977 \cellx9406\row }\pard \ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {Shift + Left\cell Select left\cell }\pard 
\ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {\trowd \trftsWidth1\trpaddl28\trpaddr28\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3 \clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth3429 
\cellx3429\clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth5977 \cellx9406\row }\pard \ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {Shift + Right\cell Select right\cell }\pard 
\ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {\trowd \trftsWidth1\trpaddl28\trpaddr28\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3 \clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth3429 
\cellx3429\clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth5977 \cellx9406\row }\pard \ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {Shift + Up\cell Select up\cell }\pard 
\ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {\trowd \trftsWidth1\trpaddl28\trpaddr28\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3 \clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth3429 
\cellx3429\clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth5977 \cellx9406\row }\pard \ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {Shift + Down\cell Select down\cell }\pard 
\ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {\trowd \trftsWidth1\trpaddl28\trpaddr28\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3 \clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth3429 
\cellx3429\clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth5977 \cellx9406\row }\pard \ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {Control + Shift + Left\cell Select word left\cell }\pard 
\ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {\trowd \trftsWidth1\trpaddl28\trpaddr28\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3 \clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth3429 
\cellx3429\clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth5977 \cellx9406\row }\pard \ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {Control + Shift + Right\cell Select word right\cell 
}\pard \ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {\trowd \trftsWidth1\trpaddl28\trpaddr28\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3 \clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth3429 
\cellx3429\clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth5977 \cellx9406\row }\pard \ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {Shift + Home\cell Select line start\cell }\pard 
\ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {\trowd \trftsWidth1\trpaddl28\trpaddr28\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3 \clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth3429 
\cellx3429\clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth5977 \cellx9406\row }\pard \ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {Shift + End\cell Select line end\cell }\pard 
\ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {\trowd \trftsWidth1\trpaddl28\trpaddr28\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3 \clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth3429 
\cellx3429\clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth5977 \cellx9406\row }\pard \ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {Shift + Page Up\cell Select page up\cell }\pard 
\ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {\trowd \trftsWidth1\trpaddl28\trpaddr28\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3 \clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth3429 
\cellx3429\clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth5977 \cellx9406\row }\pard \ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {Shift + Page Down\cell Select page down\cell }\pard 
\ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {\trowd \trftsWidth1\trpaddl28\trpaddr28\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3 \clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth3429 
\cellx3429\clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth5977 \cellx9406\row }\pard \ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {\cell Select page left\cell }\pard 
\ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {\trowd \trftsWidth1\trpaddl28\trpaddr28\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3 \clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth3429 
\cellx3429\clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth5977 \cellx9406\row }\pard \ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {\cell Select page right\cell }\pard 
\ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {\trowd \trftsWidth1\trpaddl28\trpaddr28\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3 \clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth3429 
\cellx3429\clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth5977 \cellx9406\row }\pard \ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {Control + Shift + Page Up\cell Select page top\cell 
}\pard \ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {\trowd \trftsWidth1\trpaddl28\trpaddr28\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3 \clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth3429 
\cellx3429\clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth5977 \cellx9406\row }\pard \ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {Control + Shift + Page Down\cell Select page bottom\cell 
}\pard \ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {\trowd \trftsWidth1\trpaddl28\trpaddr28\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3 \clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth3429 
\cellx3429\clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth5977 \cellx9406\row }\pard \ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {Control + Shift + Home\cell Select editor top\cell 
}\pard \ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {\trowd \trftsWidth1\trpaddl28\trpaddr28\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3 \clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth3429 
\cellx3429\clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth5977 \cellx9406\row }\pard \ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {Control + Shift + End\cell Select gotoxy\cell }\pard 
\ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {\trowd \trftsWidth1\trpaddl28\trpaddr28\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3 \clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth3429 
\cellx3429\clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth5977 \cellx9406\row }\pard \ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {Control + A\cell Select All\cell }\pard 
\ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {\trowd \trftsWidth1\trpaddl28\trpaddr28\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3 \clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth3429 
\cellx3429\clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth5977 \cellx9406\row }\pard \ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {Control + Insert\cell Copy select to clip\cell }\pard 
\ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {\trowd \trftsWidth1\trpaddl28\trpaddr28\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3 \clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth3429 
\cellx3429\clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth5977 \cellx9406\row }\trowd \trftsWidth1\trpaddl28\trpaddr28\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3 \clvertalt\clbrdrt\brdrnone 
\clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth3429 \cellx3429\clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth5977 \cellx9406\pard 
\ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {Control + C\cell \cell }\pard \ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {\trowd \trftsWidth1\trpaddl28\trpaddr28\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3 \clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone 
\clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth3429 \cellx3429\clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth5977 \cellx9406\row }\pard 
\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {
\par 
\par }\pard\plain \s22\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \b\f11\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\fs16 Scrolling:}{
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs16\lang1033\langfe1036\cgrid\langnp1033\langfenp1036 {
\par These commands control everything to do with scrolling.
\par 
\par }\trowd \trftsWidth1\trpaddl28\trpaddr28\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3 \clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth3429 \cellx3429\clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone 
\clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth5977 \cellx9406\pard \ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {Command\cell Description\cell }\pard \ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {\trowd 
\trftsWidth1\trpaddl28\trpaddr28\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3 \clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth3429 \cellx3429\clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb
\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth5977 \cellx9406\row }\trowd \trftsWidth1\trpaddl28\trpaddr28\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3 \clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone 
\cltxlrtb\clftsWidth3\clwWidth3429 \cellx3429\clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth5977 \cellx9406\pard \ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {\cell \cell }\pard 
\ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {\trowd \trftsWidth1\trpaddl28\trpaddr28\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3 \clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth3429 
\cellx3429\clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth5977 \cellx9406\row }\pard \ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {Scroll Up + Control\cell Go up one line\cell }\pard 
\ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {\trowd \trftsWidth1\trpaddl28\trpaddr28\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3 \clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth3429 
\cellx3429\clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth5977 \cellx9406\row }\pard \ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {Scroll Down + Control\cell Go down one line\cell }\pard 
\ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {\trowd \trftsWidth1\trpaddl28\trpaddr28\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3 \clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth3429 
\cellx3429\clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth5977 \cellx9406\row }\pard \ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {Scroll Left\cell Left one character\cell }\pard 
\ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {\trowd \trftsWidth1\trpaddl28\trpaddr28\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3 \clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth3429 
\cellx3429\clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth5977 \cellx9406\row }\trowd \trftsWidth1\trpaddl28\trpaddr28\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3 \clvertalt\clbrdrt\brdrnone 
\clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth3429 \cellx3429\clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth5977 \cellx9406\pard 
\ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {Scroll Right\cell Right one character\cell }\pard \ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {\trowd \trftsWidth1\trpaddl28\trpaddr28\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3 \clvertalt\clbrdrt
\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth3429 \cellx3429\clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth5977 \cellx9406\row }\pard 
\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {
\par 
\par }\pard\plain \s22\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \b\f11\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\fs16 Modes:}{
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs16\lang1033\langfe1036\cgrid\langnp1033\langfenp1036 {
\par These commands control modes
\par 
\par }\trowd \trftsWidth1\trpaddl28\trpaddr28\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3 \clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth3393 \cellx3393\clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone 
\clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth6013 \cellx9406\pard \ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {Command\cell Description\cell }\pard \ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {\trowd 
\trftsWidth1\trpaddl28\trpaddr28\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3 \clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth3393 \cellx3393\clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb
\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth6013 \cellx9406\row }\trowd \trftsWidth1\trpaddl28\trpaddr28\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3 \clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone 
\cltxlrtb\clftsWidth3\clwWidth3393 \cellx3393\clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth6013 \cellx9406\pard \ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {\cell \cell }\pard 
\ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {\trowd \trftsWidth1\trpaddl28\trpaddr28\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3 \clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth3393 
\cellx3393\clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth6013 \cellx9406\row }\pard \ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {\cell Set insert mode\cell }\pard 
\ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {\trowd \trftsWidth1\trpaddl28\trpaddr28\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3 \clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth3393 
\cellx3393\clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth6013 \cellx9406\row }\pard \ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {\cell Set overwrite mode\cell }\pard 
\ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {\trowd \trftsWidth1\trpaddl28\trpaddr28\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3 \clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth3393 
\cellx3393\clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth6013 \cellx9406\row }\pard \ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {Insert\cell Toggle insert/overwrite\cell }\pard 
\ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {\trowd \trftsWidth1\trpaddl28\trpaddr28\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3 \clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth3393 
\cellx3393\clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth6013 \cellx9406\row }\pard \ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {Control + Shift + N\cell Selection type is normal\cell 
}\pard \ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {\trowd \trftsWidth1\trpaddl28\trpaddr28\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3 \clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth3393 
\cellx3393\clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth6013 \cellx9406\row }\pard \ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {Control + Shift + C\cell Selection type is column\cell 
}\pard \ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {\trowd \trftsWidth1\trpaddl28\trpaddr28\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3 \clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth3393 
\cellx3393\clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth6013 \cellx9406\row }\trowd \trftsWidth1\trpaddl28\trpaddr28\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3 \clvertalt\clbrdrt\brdrnone 
\clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth3393 \cellx3393\clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth6013 \cellx9406\pard 
\ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {Control + Shift + L\cell Selection type is line\cell }\pard \ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {\trowd \trftsWidth1\trpaddl28\trpaddr28\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3 \clvertalt
\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth3393 \cellx3393\clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth6013 \cellx9406\row 
}\pard \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {
\par 
\par }\pard\plain \s22\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \b\f11\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\fs16 Actions:}{
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs16\lang1033\langfe1036\cgrid\langnp1033\langfenp1036 {
\par These commands perform various actions.
\par 
\par 
\par }\trowd \trftsWidth1\trpaddl28\trpaddr28\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3 \clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth3393 \cellx3393\clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone 
\clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth6013 \cellx9406\pard \ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {Command\cell Description\cell }\pard \ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {\trowd 
\trftsWidth1\trpaddl28\trpaddr28\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3 \clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth3393 \cellx3393\clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb
\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth6013 \cellx9406\row }\trowd \trftsWidth1\trpaddl28\trpaddr28\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3 \clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone 
\cltxlrtb\clftsWidth3\clwWidth3393 \cellx3393\clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth6013 \cellx9406\pard \ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {\cell \cell }\pard 
\ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {\trowd \trftsWidth1\trpaddl28\trpaddr28\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3 \clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth3393 
\cellx3393\clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth6013 \cellx9406\row }\pard \ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {Control + Shift + B\cell Go to matching bracket\cell 
}\pard \ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {\trowd \trftsWidth1\trpaddl28\trpaddr28\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3 \clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth3393 
\cellx3393\clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth6013 \cellx9406\row }\pard \ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {Control + (number)\cell Move to marker (number)\cell 
}\pard \ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {\trowd \trftsWidth1\trpaddl28\trpaddr28\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3 \clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth3393 
\cellx3393\clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth6013 \cellx9406\row }\pard \ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {Control + Shift + (number)\cell Set marker (number)\cell 
}\pard \ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {\trowd \trftsWidth1\trpaddl28\trpaddr28\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3 \clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth3393 
\cellx3393\clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth6013 \cellx9406\row }\trowd \trftsWidth1\trpaddl28\trpaddr28\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3 \clvertalt\clbrdrt\brdrnone 
\clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth3393 \cellx3393\clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth6013 \cellx9406\pard 
\ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {F1\cell Context sensitive help on word\cell }\pard \ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {\trowd \trftsWidth1\trpaddl28\trpaddr28\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3 \clvertalt\clbrdrt
\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth3393 \cellx3393\clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth6013 \cellx9406\row }\pard 
\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {
\par 
\par }\pard\plain \s22\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \b\f11\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\fs16 Delete:}{
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs16\lang1033\langfe1036\cgrid\langnp1033\langfenp1036 {
\par All the commands having to do with deleting shit.
\par 
\par }\trowd \trftsWidth1\trpaddl28\trpaddr28\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3 \clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth3393 \cellx3393\clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone 
\clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth6013 \cellx9406\pard \ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {Command\cell Description\cell }\pard \ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {\trowd 
\trftsWidth1\trpaddl28\trpaddr28\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3 \clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth3393 \cellx3393\clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb
\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth6013 \cellx9406\row }\trowd \trftsWidth1\trpaddl28\trpaddr28\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3 \clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone 
\cltxlrtb\clftsWidth3\clwWidth3393 \cellx3393\clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth6013 \cellx9406\pard \ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {\cell \cell }\pard 
\ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {\trowd \trftsWidth1\trpaddl28\trpaddr28\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3 \clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth3393 
\cellx3393\clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth6013 \cellx9406\row }\pard \ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {Backspace\cell Character to left\cell }\pard 
\ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {\trowd \trftsWidth1\trpaddl28\trpaddr28\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3 \clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth3393 
\cellx3393\clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth6013 \cellx9406\row }\pard \ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {Shift + Backspace\cell \cell }\pard 
\ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {\trowd \trftsWidth1\trpaddl28\trpaddr28\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3 \clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth3393 
\cellx3393\clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth6013 \cellx9406\row }\pard \ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {Delete\cell Character to right\cell }\pard 
\ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {\trowd \trftsWidth1\trpaddl28\trpaddr28\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3 \clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth3393 
\cellx3393\clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth6013 \cellx9406\row }\pard \ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {Control + T\cell Word to right\cell }\pard 
\ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {\trowd \trftsWidth1\trpaddl28\trpaddr28\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3 \clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth3393 
\cellx3393\clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth6013 \cellx9406\row }\pard \ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {Control + Backspace\cell Word to left\cell }\pard 
\ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {\trowd \trftsWidth1\trpaddl28\trpaddr28\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3 \clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth3393 
\cellx3393\clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth6013 \cellx9406\row }\pard \ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {\cell From cursor to start of line\cell }\pard 
\ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {\trowd \trftsWidth1\trpaddl28\trpaddr28\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3 \clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth3393 
\cellx3393\clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth6013 \cellx9406\row }\pard \ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {Control + Shift + Y\cell From cursor to end of line\cell 
}\pard \ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {\trowd \trftsWidth1\trpaddl28\trpaddr28\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3 \clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth3393 
\cellx3393\clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth6013 \cellx9406\row }\pard \ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {Control + Y\cell Current line\cell }\pard 
\ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {\trowd \trftsWidth1\trpaddl28\trpaddr28\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3 \clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth3393 
\cellx3393\clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth6013 \cellx9406\row }\pard \ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {\cell Everything in editor\cell }\pard 
\ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {\trowd \trftsWidth1\trpaddl28\trpaddr28\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3 \clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth3393 
\cellx3393\clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth6013 \cellx9406\row }\pard \ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {Enter\cell Line break at current position, move caret
\cell }\pard \ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {\trowd \trftsWidth1\trpaddl28\trpaddr28\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3 \clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone 
\cltxlrtb\clftsWidth3\clwWidth3393 \cellx3393\clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth6013 \cellx9406\row }\pard \ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {Shift + Enter\cell 
\cell }\pard \ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {\trowd \trftsWidth1\trpaddl28\trpaddr28\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3 \clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone 
\cltxlrtb\clftsWidth3\clwWidth3393 \cellx3393\clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth6013 \cellx9406\row }\pard \ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {Control + M\cell 
\cell }\pard \ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {\trowd \trftsWidth1\trpaddl28\trpaddr28\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3 \clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone 
\cltxlrtb\clftsWidth3\clwWidth3393 \cellx3393\clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth6013 \cellx9406\row }\pard \ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {Control + N\cell 
Line break at current position, no move caret\cell }\pard \ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {\trowd \trftsWidth1\trpaddl28\trpaddr28\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3 \clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone 
\clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth3393 \cellx3393\clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth6013 \cellx9406\row }\pard \ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {
\cell Insert character at curent position\cell }\pard \ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {\trowd \trftsWidth1\trpaddl28\trpaddr28\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3 \clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr
\brdrnone \cltxlrtb\clftsWidth3\clwWidth3393 \cellx3393\clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth6013 \cellx9406\row }\pard \ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {
Alt + Backspace\cell Perform undo if available\cell }\pard \ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {\trowd \trftsWidth1\trpaddl28\trpaddr28\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3 \clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone 
\clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth3393 \cellx3393\clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth6013 \cellx9406\row }\pard \ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {
Control + Z\cell Perform undo if available\cell }\pard \ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {\trowd \trftsWidth1\trpaddl28\trpaddr28\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3 \clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone 
\clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth3393 \cellx3393\clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth6013 \cellx9406\row }\pard \ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {
Alt + Shift + Back\cell Perform redo if available\cell }\pard \ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {\trowd \trftsWidth1\trpaddl28\trpaddr28\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3 \clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone 
\clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth3393 \cellx3393\clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth6013 \cellx9406\row }\pard \ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {
Control + Shift + Z\cell Perform redo if available\cell }\pard \ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {\trowd \trftsWidth1\trpaddl28\trpaddr28\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3 \clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb
\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth3393 \cellx3393\clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth6013 \cellx9406\row }\pard 
\ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {Shift + Delete\cell Remove selection place on clipboard\cell }\pard \ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {\trowd \trftsWidth1\trpaddl28\trpaddr28\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3 
\clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth3393 \cellx3393\clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth6013 \cellx9406
\row }\pard \ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {Control + X\cell Remove selection place on clipboard\cell }\pard \ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {\trowd \trftsWidth1\trpaddl28\trpaddr28\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3 
\clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth3393 \cellx3393\clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth6013 \cellx9406
\row }\pard \ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {Shift + Insert\cell Move clipboard contents to current position\cell }\pard \ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {\trowd 
\trftsWidth1\trpaddl28\trpaddr28\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3 \clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth3393 \cellx3393\clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb
\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth6013 \cellx9406\row }\pard \ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {Control + V\cell Move clipboard contents to current position\cell }\pard \ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 
{\trowd \trftsWidth1\trpaddl28\trpaddr28\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3 \clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth3393 \cellx3393\clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone 
\clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth6013 \cellx9406\row }\pard \ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {Control + Shift + I\cell Move selection to right\cell }\pard \ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {
\trowd \trftsWidth1\trpaddl28\trpaddr28\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3 \clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth3393 \cellx3393\clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone 
\clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth6013 \cellx9406\row }\pard \ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {Control + Shift + U\cell Move selection to left\cell }\pard \ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {
\trowd \trftsWidth1\trpaddl28\trpaddr28\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3 \clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth3393 \cellx3393\clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone 
\clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth6013 \cellx9406\row }\pard \ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {Tab\cell Tab key\cell }\pard \ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {\trowd 
\trftsWidth1\trpaddl28\trpaddr28\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3 \clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth3393 \cellx3393\clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb
\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth6013 \cellx9406\row }\trowd \trftsWidth1\trpaddl28\trpaddr28\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3 \clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone 
\cltxlrtb\clftsWidth3\clwWidth3393 \cellx3393\clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth6013 \cellx9406\pard \ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {Shift + Tab\cell Tab to left
\cell }\pard \ql \li0\ri0\nowidctlpar\intbl\faauto\rin0\lin0 {\trowd \trftsWidth1\trpaddl28\trpaddr28\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3 \clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone 
\cltxlrtb\clftsWidth3\clwWidth3393 \cellx3393\clvertalt\clbrdrt\brdrnone \clbrdrl\brdrnone \clbrdrb\brdrnone \clbrdrr\brdrnone \cltxlrtb\clftsWidth3\clwWidth6013 \cellx9406\row }\pard \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {
\par \page 
\par }{\super #{\footnote\ftnalt \pard\plain \s30\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs20\lang1036\langfe1033\cgrid\langnp1036\langfenp1033 {#}{\cs89\fs24\up6\lang1033\langfe1033\langnp1033 \tab }{\f1\lang1031\langfe1033\langnp1031 Topic5}}}{
\cs89\fs24\up6\lang1033\langfe1033\super\langfenp1033 ${\footnote\ftnalt \pard\plain \s30\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs20\lang1036\langfe1033\cgrid\langnp1036\langfenp1033 {$}{\cs89\fs24\up6\lang1033\langfe1033\langnp1033 \tab }{
\f1\lang1031\langfe1033\langnp1031 Resources}}}{Resources
\par 
\par 
\par Links:
\par 
\par \{button Bloodshed.net}{\v !ExecFile(\lquote http://www.bloodshed.net\rquote )}{\} The home of Bloodshed Software...
\par 
\par \{button Mingw.org}{\v !ExecFile(\lquote http://www.mingw.org\rquote )}{\} The home of the MinGW compiler...
\par 
\par }{\lang1036\langfe1036\langnp1036 \{button Dev-C++ Source Code}{\v\lang1036\langfe1036\langnp1036 !ExecFile(\lquote http://www.bloodshed.net/dev/\rquote )}{\lang1036\langfe1036\langnp1036 \} Dev-C++ source code...
\par 
\par \{button Mingw Source Code}{\v\lang1036\langfe1036\langnp1036 !ExecFile(\lquote http://www.xraylith.wisc.edu/~khan/software/gnu-win32\rquote )}{\lang1036\langfe1036\langnp1036 \} Dev-C++ source code...
\par 
\par }{\lang2057\langfe1036\langnp2057 \{button Dev-C++ Software Forum}{\v\lang2057\langfe1036\langnp2057 !ExecFile(\lquote http://sourceforge.net/forum/forum.php?forum_id=48211\rquote )}{\lang2057\langfe1036\langnp2057 \} Dev-C++ Forum...
\par 
\par }{\{button Dev-C++ Developer Forum}{\v !ExecFile(\lquote https://sourceforge.net/forum/forum.php?forum_id=33286\rquote )}{\} Dev-C++ Developer Forum...
\par 
\par \page }{\cs88\fs24\up6 #{\footnote \pard\plain \s20\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs88\up6 #}{\fs16  ID_GETTINGSTARTED}}${\footnote \pard\plain 
\s20\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f11\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs88\up6 $}{\fs16  Getting Started with Dev-C++}}K{\footnote \pard\plain \s20\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 
\f11\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs88\up6 K}{\fs16  theme;language;}}}{\b\fs28\cf18 Getting Started}{
\par }{\b\fs28\cf18 
\par }{When you launch Dev-C++ for the first time, you will see the following dialog :
\par 
\par \{bmc firsttime.bmp\}
\par 
\par You can select the language Dev-C++ will use, as well as the icon theme.
\par To add a XP flavor to Dev-C++, check the \lquote Use XP Theme\rquote  box.
\par 
\par If you installed a Dev-C++ version which include a Mingw compiler system, this is all you need to do to configure
\par  the software, since all compiler paths have been set to default. In this case you can then proceed to the }{\uldb\lang1024\langfe1024\noproof Basic Steps}{\lang1024\langfe1024\noproof ID_CREATEPROJECT.}{
\par 
\par However, if you prefer to use your own GCC distribution (like Cygwin), you can manually configure the compiler and 
\par directories settings to feet your own system. You can do that in }{\uldb\lang1024\langfe1024\noproof Compiler Options}{\lang1024\langfe1024\noproof ID_COMPILEROPTIONS.}{ 
\par \page }{\lang1024\langfe1024\noproof\langfenp1033 ID_CREATEPROJECT
\par 
\par }}