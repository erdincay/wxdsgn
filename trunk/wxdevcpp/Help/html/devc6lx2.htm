<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Running C Programs</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFFF" TEXT="#000000">

<P><A NAME="topic56"></A><SUP></SUP>Introduction to C Programming </P>

<P>So you want to learn C? We hope to provide you with an easy step by step guide to programming in C. The course is split up into several sections, or lessons,</P>

<P>which include C example programs for you to demonstrate what has been taught. Although the ordering of the sections does not have to be strictly followed, the</P>

<P>sections become progressively more involved and assume background knowledge attained from previous sections. Good Luck! </P>

<P>Before you start:</P>

<P>1.Please read this Introduction. </P>

<P>2.It is a long course and will take you quite a while to complete. If you use the Hotlist or Bookmark feature of your browser you will be able to return to the place</P>

<P>where you left off at or to return to a particular section. </P>

<P>3.This tutorial should be viewable on any WWW browser - if you have any problems please let us know!. </P>

<P>The Course Section Topics:</P>

<P>1.Overview of C.</P>

<P>a.Why use C? </P>

<P>b.Uses of C </P>

<P>c.A Brief History of C </P>

<P>d.C for Personal Computers </P>

<P>2.Running C Programs.</P>

<P>a.Using Microsoft C. </P>

<P>b.Unix System. </P>

<P>3.Structure of C Programs.</P>

<P>a.C's Character Set </P>

<P>b.The form of a C Program </P>

<P>c.The layout of C Programs </P>

<P>d.Preprocessor Directives </P>

<P>4.Your First Program.</P>

<P>a.Commenting Programs. </P>

<P>5.Data Types - Part I.</P>

<P>a.Integer Number Variables. </P>

<P>b.Decimal Number Variables. </P>

<P>c.Character Variables. </P>

<P>d.Assignment Statement. </P>

<P>e.Arithmetic Ordering. </P>

<P>f.Something To Declare. </P>

<P>6.Input and Output</P>

<P>a.printf. </P>

<P>b.The % Format Specifiers. </P>

<P>c.Formatting Your Output. </P>

<P>d.scanf. </P>

<P>7.Control Loops</P>

<P>a.The while and do while Loops. </P>

<P>b.Conditions, or Logical Expression. </P>

<P>c.The for Loop. </P>

<P>8.Conditional Execution</P>

<P>a.Program Control - if , if else etc.. </P>

<P>b.Using break and continue Within Loops. </P>

<P>c.Select Paths with switch. </P>

<P>9.Structure and Nesting</P>

<P>10.Functions and Prototypes</P>

<P>a.Functions - C's Building Blocks. </P>

<P>b.Functions and Local Variables. </P>

<P>c.Getting the Value of Variables into Functions. </P>

<P>d.Functions and Prototypes. </P>

<P>e.What is ANSI C?. </P>

<P>f.Standard Library Functions. </P>

<P>11.Data Types - Part II</P>

<P>a.Global Variables. </P>

<P>b.Constant Data Types. </P>

<P><A HREF="devc6lyx.htm">12.Arrays</A></P>

<P>13.Pointers</P>

<P>a.Point To Point. </P>

<P>b.Swap Shop. </P>

<P>c.Pointers Linked To Arrays. </P>

<P><A HREF="devc6m0h.htm">14.Strings</A></P>

<P>a.Stringing Along. </P>

<P>b.As easy as... B or C?. </P>

<P>c.A Sort OF Bubble Program. </P>

<P>15.Structures</P>

<P>a.Defining A New Type. </P>

<P>b.Structures and Functions. </P>

<P>c.Pointers To Structures. </P>

<P>d.Malloc. </P>

<P>e.Structures and Linked Lists. </P>

<P>f.Structures and C++. </P>

<P>g.Header Files. </P>

<P>16.File Handling</P>

<P>a.Stream Files. </P>

<P>b.Text File Functions. </P>

<P>c.Binary File Functions. </P>

<P>d.File System Functions. </P>

<P>e.Command Line Parameters. </P>

<P>17.Recommended Books</P>

<P>18.Appendix: C's functions</P>

<P>You've now reached the end of this online tutorial. We have covered a lot of ground - but this has been a first course in C and there is still plenty to learn. However, as long as you keep in</P>

<P>mind that C is an essentially simple language and how new features are built from this simplicity you shouldn't have many problems.</P>

<P>You also need to be aware of the fact that C is a very low-level language and as a result allows programmers to confuse data types and muck around with the bit</P>

<P>patterns of the data in a way that higher level languages would disown! You probably need to make sure that you understand binary and the way that values are</P>

<P>represented to get the best from C.</P>

</BODY>
</HTML>
