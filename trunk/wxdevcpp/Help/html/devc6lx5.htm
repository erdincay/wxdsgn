<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Running C Programs</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFFF" TEXT="#000000">

<P><A NAME="topic59"></A><SUP></SUP>Running C Programs </P>

<P>Objectives:</P>

<P>Having read this section you should be able to:</P>

<P>1.Edit, link and run your C programs </P>

<P>This section is primarily aimed at the beginner who as no or little experience of using compiled languages. We cover the various stages of program development. The basic principles of this</P>

<P>section will apply to what ever C compiler you choose to use, the stages are nearly always the same</P>

<P>The Edit-Compile-Link-Execute Process:</P>

<P>Developing a program in a compiled language such as C requires at least four steps: </P>

<P>1.editing (or writing) the program </P>

<P>2.compiling it </P>

<P>3.linking it </P>

<P>4.executing it </P>

<P>We will now cover each step separately.</P>

<P>Editing:</P>

<P>You write a computer program with words and symbols that are understandable to human beings. This is the edit part of the development cycle. You type the program directly into a</P>

<P>window on the screen and save the resulting text as a separate file. This is often referred to as the source file (you can read it with the TYPE command in DOS or the cat command in unix).</P>

<P>The custom is that the text of a C program is stored in a f ile with the extension .c for C programming language</P>

<P>Compiling:</P>

<P>You cannot directly execute the source file. To run on any computer system, the source file must be translated into binary numbers understandable to the computer's Central Procesing Unit</P>

<P>(for example, the 80*87 microprocessor). This process produces an intermediate object file - with the extension .obj, the .obj stands for Object.</P>

<P>Linking:</P>

<P>The first question that comes to most peoples minds is Why is linking necessary? The main reason is that many compiled languages come with library rountines which can be added to your</P>

<P>program. Theses routines are written by the manufacturer of the compiler to perform a variety of tasks, from input/output to complicated mathematical functions. In the case of C the standard</P>

<P>input and output functions are contained in a library (stdio.h) so even the most basic program will require a lib rary function. After linking the file extension is .exe which are executable</P>

<P>files.</P>

<P>Executable files:</P>

<P>Thus the text editor produces .c source files, which go to the compiler, which produces .obj object files, which go to the linker, which produces .exe executable file. You can then run</P>

<P>.exe files as you can other applications, simply by typing their names at the DOS prompt or run using windows menu. </P>

<P>Using Microsoft C:</P>

<P>Edit stage: </P>

<P>Type program in using one of the Microsoft Windows editing packages.</P>

<P>Compile and link: </P>

<P>Select Building from Make menu. Building option allows you to both compile and link in the same option.</P>

<P>Execute: </P>

<P>Use the Run menu and select Go option.</P>

<P>Errors: </P>

<P>First error highlighted. Use Next Error from Search menu for further errors if applicable. </P>

<P>If you get an error message, or you find that the program doesn't work when you finally run it (at least not in the way you anticipated) you will have to go back to the source file - the .c file -</P>

<P>to make changes and go through the whole development process again! </P>

<P>Unix systems:</P>

<P>The University's central irix Service is a Silicon Graphics Inc. Challenge XL system which runs a Unix-like operating sysem called IRIX. The basic information to run a C program on this</P>

<P>system is covered in document HT.SI.05 - How To... Run C Programs On The irix Service. Although this document refers to the IRIX operating system many of the command options will</P>

<P>be common to all Unix systems. </P>

<P>On all Unix systems further help on the C compiler can be obtained from the on-line manual. Type </P>

<P>man cc </P>

<P>on your local Unix system for more information. </P>

<P>Please note that Unix is a case sensitive operating system and files named firstprog.c and FIRSTPROG.c are treated as two separate files on these system. By default the Unix system</P>

<P>compiles and links a program in one step, as follows:</P>

<P>cc firstprog.c </P>

<P>This command creates an executable file called a.out that overwrites any existing file called a.out. Executable files on Unix are run by typing their name. In this case the program is run as</P>

<P>follows:</P>

<P>a.out</P>

<P>To change the name of the executable file type:</P>

<P>cc -o firstprog.c</P>

<P>This produces an executable file called firstprog which is run as follows:</P>

<P>firstprog</P>

</BODY>
</HTML>
