<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Arrays</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFFF" TEXT="#000000">

<P><A NAME="topic69"></A><SUP></SUP>Arrays</P>

<P>Objectives:</P>

<P>Having read this section you should have a good understanding of the use of arrays in C. </P>

<P>Advanced Data Types:</P>

<P>Programming in any language takes a quite significant leap forwards as soon as you learn about more advanced data types - arrays and strings of characters. In C there is also a third</P>

<P>more general and even more powerful advanced data type - the pointer but more about that later. In this section we introduce the array, but the first question is, why bother? </P>

<P>There are times when we need to store a complete list of numbers or other data items. You could do this by creating as many individual variables as would be needed for the job, but this is</P>

<P>a hard and tedious process. For example, suppose you want to read in five numbers and print them out in reverse order. You could do it the hard way as: </P>

<P>main()</P>

<P>{</P>

<P>int al,a2,a3,a4,a5;</P>

<P>scanf("%d %d %d %d %d",&amp;a1,&amp;a2,&amp;a3,&amp;a4,&amp;a5);</P>

<P>printf("%d %d %d %d %d'',a5,a4,a3,a2,a1);</P>

<P>}</P>

<P>Doesn't look very pretty does it, and what if the problem was to read in 100 or more values and print them in reverse order? Of course the clue to the solution is the use of the regular</P>

<P>variable names a1, a2 and so on. What we would really like to do is to use a name like a[i] where i is a variable which specifies which particular value we are working with. This is the</P>

<P>basic idea of an array and nearly all programming languages provide this sort of facility - only the details alter. </P>

<P>In the case of C you have to declare an array before you use it - in the same way you have to declare any sort of variable. For example, </P>

<P>int a[5]; </P>

<P>declares an array called a with five elements. Just to confuse matters a little the first element is a[0] and the last a[4]. C programmer's always start counting at zero! Languages vary</P>

<P>according to where they start numbering arrays. Less technical, i.e. simpler, languages start counting from 1 and more technical ones usually start counting from 0. Anyway, in the case of C</P>

<P>you have to remember that </P>

<P>type array[size] </P>

<P>declares an array of the specified type and with size elements. The first array element is array[0] and the last is array[size-1]. </P>

<P>Using an array, the problem of reading in and printing out a set of values in reverse order becomes simple: </P>

<P></P>

<P>main()</P>

<P>{</P>

<P>int a[5];</P>

<P>int i;</P>

<P>for(i =0;i &lt; 5; ++i) scanf("%d",&amp;a[i]);</P>

<P>for(i =4;i&gt; =0;--i) printf("%d",a[i]);</P>

<P>}</P>

<P>Well we said simple but I have to admit that the pair of for loops looks a bit intimidating. The for loop and the array data type were more or less made for each other. The for loop can be</P>

<P>used to generate a sequence of values to pick out and process each element in an array in turn. Once you start using arrays, for loops like: </P>

<P>for (i=0 ; i&lt;5 ; ++i) </P>

<P>to generate values in the order 0,1,2 and so forth, and </P>

<P>for(i=4;i&gt;=0;--i) </P>

<P>to generate values in the order 4,3,2... become very familiar. </P>

<P>In Dis-array:</P>

<P>An array of character variables is in no way different from an array of numeric variables, but programmers often like to think about them in a different way. For example, if you want to read</P>

<P>in and reverse five characters you could use: </P>

<P>main()</P>

<P>{</P>

<P>char a[5];</P>

<P>int i;</P>

<P>for(i=0; i&lt;5; ++i) scanf("%c",&amp;a[i]);</P>

<P>for(i=4;i&gt;=0;--i) printf("%c",a[i]);</P>

<P>}</P>

<P>Notice that the only difference, is the declared type of the array and the %c used to specify that the data is to be interpreted as a character in scanf and printf. The trouble with character</P>

<P>arrays is that to use them as if they were text strings you have to remember how many characters they hold. In other words, if you declare a character array 40 elements long and store H E L</P>

<P>L O in it you need to remember that after element 4 the array is empty. This is such a nuisance that C uses the simple convention that the end of a string of characters is marked by a null</P>

<P>character. A null character is, as you might expect, the character with ASCII code 0. If you want to store the null character in a character variable you can use the notation \0 - but most</P>

<P>of the time you don't have to actually use the null character. The reason is that C will automatically add a null character and store each character in a separate element when you use a</P>

<P>string constant. A string constant is indicated by double quotes as opposed to a character constant which is indicated by a single quote. For example: </P>

<P>"A" </P>

<P>is a string constant, but </P>

<P>'A' </P>

<P>is a character constant. The difference between these two superficially similar types of text is confusing at first and the source of many errors. All you have to remember is that &amp;QUOTA"</P>

<P>consists of two characters, the letter A followed by \0 whereas 'A' is just the single character A. If you are familiar with other languages you might think that you could assign string constants</P>

<P>to character arrays and work as if a string was a built-in data type. In C however the fundamental data type is the array and strings are very much grafted on. For example, if you try</P>

<P>something like: </P>

<P>char name[40];</P>

<P>name="Hello"</P>

<P>it will not work. However, you can print strings using printf and read them into character arrays using scanf. For example, </P>

<P>main()</P>

<P>{</P>

<P>static char name[40] ="hello";</P>

<P>printf("%s",name);</P>

<P>scanf("%s",name);</P>

<P>printf("%s",name);</P>

<P>}</P>

<P>This program reads in the text that you type, terminating it with a null and stores it in the character array name. It then prints the character array treating it as a string, i.e. stopping when it hits</P>

<P>the first null string. Notice the use of the "%s" format descriptor in scanf and printf to specify that what is being printed is a string. </P>

<P>At this point the way that strings work and how they can be made a bit more useful and natural depends on understanding pointers which is covered in the next section.</P>

</BODY>
</HTML>
