<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Compiler Options</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFFF" TEXT="#000000">

<OBJECT TYPE="application/x-oleobject" CLASSID="clsid:1e2a7bd0-dab9-11d0-b93a-00c04fc99f9e">
	<PARAM NAME="Keyword" VALUE="compiler">
	<PARAM NAME="Keyword" VALUE="options">
</OBJECT>

<P><A NAME="id_compileroptions"></A><B>Compiler Options</B></P>

<P>To access the Compiler Options dialog, click on the ‘Tools’ menu, then on ‘Compiler Options’.</P>

<P><B>Compiler</B></P>

<P><I>Compiler set to configure</I></P>

<P>Here, you can maintain different compiler profiles. Each profile has it's own settings and options, so that you can easily switch between different presets (for example, MingW32 and Cygwin). The default compiler that comes bundled with Dev-C++ is MingW32.</P>

<P>There are three buttons to add, delete and rename the compiler set.</P>

<P>7</P>

<P><I>Add the following commands when calling compiler</I></P>

<P>Here you can specify additional command-line options to be passed to the GCC compiler when compiling your project or file. Check the MingW32 manual (available at the website, <U>www.mingw.org</U> for a list of command-line arguments.</P>

<P></P>

<P><I>Add these commands to the linker command-line</I></P>

<P>Here you can specify options to be passed onto the linker (ld.exe). You can specify library files here.</P>

<P></P>

<P><I>Compile delay</I></P>

<P>This option is present to provide a delay before compiling. Normally, you will not use this. If make complains of the timestamp being invalid, try specifying a delay here.</P>

<P></P>

<P><I>Use fast but imperfect dependancy generation</I></P>

<P>By default, Dev-C++ will check all files and headers for dependancy information, and update the makefile accordingly. If you find that it's taking too much time, you can prevent this by enabling this option.</P>

<P><B>Settings / C compiler</B></P>

<P><I>Support all ANSI standard C programs</I></P>

<P>Option -ansi: Will attempt to be as ANSI conformant as possible.</P>

<P><I>Attempt to support some aspects of traditional C pre-processors</I></P>

<P><I></I>Option -traditional-cpp : Will attempt to make the pre-processor behave as traditional ones do.</P>

<P><I>Inhibit all warning messages</I></P>

<P>Option -w: No warnings will be displayed.</P>

<P><B>Settings / C++ compiler</B></P>

<P><I>Turn off all access checking</I></P>

<P>Option -fno-access-control</P>

<P><I>Accept $ in identifiers</I></P>

<P>Option -fdollar-in-identifiers: Will allow $ to be used in variable and function names. Cannot be used with GCC 3.2.</P>

<P><I>Use heuristics to compiler faster</I></P>

<P>Option -fsave-memoized</P>

<P><B>Settings / Code generation</B></P>

<P><I>Enable exception handling</I></P>

<P>Option -fexceptions</P>

<P><I>Use same size for double and float</I></P>

<P>Option -fshort-double</P>

<P><I>Put extra commentary information in the generated assembler</I></P>

<P>Option -fverbose-asm: The intermediary assembler files generated will have extra comments. Only useful if they're being saved (using the <B>-S</B> command-line option).</P>

<P><B>Settings / Code profiling</B></P>

<P><I>Generate profiling info for analysis</I></P>

<P>Option -pg: Writes extra information into the generated program files to use with the profiler. The profiler lets you see where maximum amount of the program's execution time is being spent, so that when you're optimizing the program, you optimize only the parts that make the difference. This option should be disabled when building retail/final versions. It should be used only in debug builds.</P>

<P><B>Settings / Linker</B></P>

<P><I>Link an Objective C program</I></P>

<P>Option -lobjc</P>

<P><I>Generate debugging information</I></P>

<P>Option -g3: Writes debug information into the generate binaries. This lets you debug it with the integrated debugger.</P>

<P><I>Do not use standard system startup files or libraries</I></P>

<P>Option -nostdlib</P>

<P><I>Do not create a console window</I></P>

<P>Option -mwindows: Instructs GCC to build a Windows GUI application.</P>

<P><B>Settings / Optimization</B></P>

<P><I>Perform a number of minor optimizations</I></P>

<P><I></I>Option -fexpensive-optimizations</P>

<P><B>Settings / Optimization / Further Optimizations</B></P>

<P>Here, you can select the optimization level.</P>

<P><I>Optimize</I></P>

<P>Option -O1</P>

<P><I>Optimize more</I></P>

<P>Option -O2</P>

<P><I>Best optimization</I></P>

<P>Option -O3</P>

<P><B>Directories</B></P>

<P><I>Binaries</I></P>

<P>Specifies the locations of the compiler (executables).</P>

<P><I>Libraries</I></P>

<P>Specifies the locations of the library files (*.a).</P>

<P><I>C includes</I></P>

<P>Specifies the locations of the headers (*.h) for C programs.</P>

<P><I>C++ includes</I></P>

<P>Specifies the locations of the headers (*.h, *.hpp) for C++ programs.</P>

<P><B>Programs</B></P>

<P>Here you can specify the filenames of the different compiler executable components.</P>

</BODY>
</HTML>
